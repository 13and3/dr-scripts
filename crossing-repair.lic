=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script will repair a list of items. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).
=end

custom_require(%w(common common-money drinfomon equipmanager))

class CrossingRepair
  include DRC
  include DRCM

  def initialize
    setup

    ensure_copper_on_hand(@settings.repair_withdrawal_amount(10_000))

    @repair_info.each do |repairer, info|
      echo "Repairing at #{repairer}" if @settings.crossing_repair_debug
      repair_at(repairer, info['room'], info['items'])
    end

    while tickets_left?
    end
  end

  def repair(repairer, item)
    return unless EquipmentManager.instance.get_item(item)

    case bput("give my #{item.name} to #{repairer}", "There isn't a scratch on that", "I don't work on those here", 'Just give it to me again', "You don't need to specify the object")
    when "There isn't a scratch on that"
      EquipmentManager.instance.empty_hands
    when "I don't work on those here"
      echo "*** ITEM HAS IMPROPER is_leather FLAG: #{item} ***"
      EquipmentManager.instance.empty_hands
    when "You don't need to specify the object"
      repair(repairer, item)
    else
      fput "give my #{item.name} to #{repairer}"
      fput 'stow my ticket'
    end
  end

  def tickets_left?
    result = bput('look at my ticket', "won't be ready for another", 'should be ready any moment now', 'Looking at the (.*) ticket .* should be ready by now', 'I could not find what you were referring to')

    case result
    when "won't be ready for another", 'should be ready any moment now'
      echo '***Item not ready yet. Sleeping for 30 seconds.***'
      pause 30
    when 'I could not find what you were referring to'
      return false
    else
      repairer = result.match(/Looking at the (.*) ticket/).to_a[1]
      walk_to @repair_info[repairer]['room']
      fput 'get my ticket'
      fput "give my ticket to #{repairer}"
      EquipmentManager.instance.empty_hands
    end

    true
  end

  def repair_at(repairer, target_room, items)
    return if items.nil? || items.empty?
    walk_to target_room

    items.each do |item|
      repair(repairer, item)
    end
  end

  def setup
    @settings = get_settings
    @repair_info = {
      # forging tool repair: clerk, 8776
      'Catrox' => { 'room' => 19_093, 'items' => EquipmentManager.instance.items.reject(&:is_leather) },
      'Randal' => { 'room' => 1544, 'items' => EquipmentManager.instance.items.select(&:is_leather) }
    }

    EquipmentManager.instance.refresh
    EquipmentManager.instance.wear_equipment_set('standard')
  end
end

CrossingRepair.new
