=begin
    Authored by Sheltim. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will repair a list of items. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download scripts "common" and "drinfomon".
    * ;trust each of the above scripts.
    * Set up a configuration script named "crossing-repair-setup"
        * Download "crossing-repair-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.crossing_repair_debug = true
=end

def main

    # Run helper scripts
    ["common", "drinfomon"].each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    # Configure UserVars
    unless start_script "crossing-repair-setup"
        echo "***Please configure your setup script (open this script for instructions).***"
        stop_script "crossing-repair"
    end

    while running? "crossing-repair-setup"
    end

    start_room = Room.current.id
    echo "Starting room: #{start_room}" if UserVars.crossing_repair_debug

    echo "Going to Randal in the Wolf Clan" if UserVars.crossing_repair_debug
    repair_at 1544, UserVars.repair_items.select{ |item| item.is_leather? }, "Randal"

    echo "Going to Catrox in the Crossing forge" if UserVars.crossing_repair_debug
    repair_at 19093, UserVars.repair_items.select{ |item| !item.is_leather? }, "Catrox"

    echo "Returning to start room: #{start_room}" if UserVars.crossing_repair_debug
    walk_to start_room
end

def repair_at(target_room, items, repairer)
    return if items.length == 0
    walk_to target_room

    empty_hands

    items.each do |item|
        echo "Repairing #{item.name} at #{repairer}" if UserVars.crossing_repair_debug

        action = item.is_worn? ? "remove" : "get"
        fput "#{action} my #{item.name}"

        case bput("give my #{item.name} to #{repairer}", "There isn't a scratch on that", "Just give it to me again")
        when "There isn't a scratch on that"
            fput "stow my #{item.name}"
        else
            fput "give my #{item.name} to #{repairer}"
            fput "stow my ticket"
        end
    end

    loop do
        case bput("look at my ticket", "won't be ready for another", "should be ready any moment now", "should be ready by now", "I could not find what you were referring to")
        when "won't be ready for another", "should be ready any moment now"
            echo "***Item not ready yet. Sleeping for 30 seconds.***"
            pause 30
        when "should be ready by now"
            fput "get my ticket"
            fput "give my ticket to #{repairer}"
            empty_hands
        else
            break
        end
    end

    items
    .select{ |item| item.is_worn? }
    .each do |item|
        fput "get my #{item.name}"
        fput "wear my #{item.name}"
    end
end

# Call this last to avoid the need for forward declarations
main
