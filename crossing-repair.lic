=begin
    Authored by Sheltim. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts
    
    This script will repair a list of items. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).
    
    Before running this script for the first time:
    * Download script "drinfomon" and ;trust it. It will be automatically run if it is not already running.
    * You can turn on debug mode with ;e UserVars.crossing_repair_debug = true
=end

# TODO: Move "items" to a setup script

# TODO: Change item creation to use named parameters

def main
    # Run helper scripts
    ["drinfomon"].each do |script_name|
        if !running?(script_name)
            start_script script_name
            pause 2
        end
    end
    
    start_room = Room.current.id
    echo "Starting room: #{start_room}" if UserVars.crossing_repair_debug
    
    items = [ Item.new("cowl", true, true),
              Item.new("gloves", true, true),
              Item.new("targe", true, true),
              Item.new("leathers", true, true),
              
              Item.new("parry stick", false, true),
              Item.new("knuckles", false, true),
              Item.new("spikes", false, true),
              
              Item.new("bastard sword", false, false),
              Item.new("hammer", false, false),
              Item.new("flail", false, false),
    ]
    
    echo "Going to Randal in the Wolf Clan" if UserVars.crossing_repair_debug
    repair_at 1544, items.select{ |item| item.is_leather? }, "Randal"
    
    echo "Going to Catrox in the Crossing forge" if UserVars.crossing_repair_debug
    repair_at 19093, items.select{ |item| !item.is_leather? }, "Catrox"
    
    echo "Returning to start room: #{start_room}" if UserVars.crossing_repair_debug
    walk_to start_room
end

def repair_at target_room, items, repairer
    walk_to target_room

    empty_hands
    
    items.each do |item|
        echo "Repairing #{item.name} at #{repairer}" if UserVars.crossing_repair_debug
    
        if item.is_worn?
            fput "remove my #{item.name}"
        else
            fput "get my #{item.name}"
        end
        
        result = fput "give my #{item.name} to #{repairer}", "There isn't a scratch on that", "Just give it to me again"
        if result == "There isn't a scratch on that"
            fput "stow my #{item.name}"
        else # "Just give it to me again"
            fput "give my #{item.name} to #{repairer}"
            fput "stow my ticket"
        end
    end
    
    while true
        result = fput "look at my ticket", "won't be ready for another", "should be ready any moment now", "should be ready by now", "I could not find what you were referring to"
        
        if result == "won't be ready for another" || result == "should be ready any moment now"
            echo "***Item not ready yet. Sleeping for 30 seconds.***"
            pause 30
        elsif result == "should be ready by now"
            fput "get my ticket"
            fput "give my ticket to #{repairer}"
            empty_hands
        else # "I could not find what you were referring to"
            break
        end
    end
    
    items
    .select{ |item| item.is_worn? }
    .each do |item|
        fput "get my #{item.name}"
        fput "wear my #{item.name}"
    end
end

def walk_to room_num
    return if room_num == Room.current.id
    fput "retreat" if DRRoom.npcs.count > 0
    fput "retreat" if DRRoom.npcs.count > 0

	start_script "go2", ["#{room_num}"]
    timer = Time.now
	while running?("go2")
        if (Time.now - timer) > 30
            kill_script "go2"
            timer = Time.now
            start_script "go2", ["#{room_num}"]
        end
        pause 0.5
	end
end

def empty_hands
    while checkright != nil
        fput "stow right"
    end
    
    while checkleft != nil
        fput "stow left"
    end
end

class Item
    @name
    @is_leather
    @is_worn
    
    def initialize name, is_leather, is_worn
        @name = name
        @is_leather = is_leather
        @is_worn = is_worn
    end
    
    def is_leather?
        return @is_leather
    end
    
    def is_worn?
        return @is_worn
    end
    
    def name
        return @name
    end
end

# Call this last to avoid the need for forward declarations
main