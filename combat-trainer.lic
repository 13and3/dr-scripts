=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script is used to train a list of weapon skills in order of the lowest amount of field experience.

  You can turn on debug mode with ;e UserVars.combat_trainer_debug = true
  You can turn on debug mode by passing 'debug' as an argument with ;combat-trainer debug
=end

custom_require.call(%w(common common-summoning common-travel drinfomon equipmanager events spellmonitor))
pause 0.05

$thrown_skills = ['Heavy Thrown', 'Light Thrown']
$aim_skills = %w(Bow Slings Crossbow)
EquipmentManager.instance.refresh

class SetupProcess
  include DRC
  include DRCS
  include DRCT

  def initialize(settings)
    echo('New SetupProcess') if $debug_mode
    @weapon_training = settings.weapon_training({})
    @summoned_weapons_element = settings.summoned_weapons_element(nil)
  end

  def execute(game_state)
    return true if game_state.done_cleaning_up?
    if game_state.stowing?
      echo('SetupProcess::clean_up') if $debug_mode
      retreat
      if game_state.summoned_info(game_state.weapon_skill)
        if DRStats.moon_mage?
          bput('wear moon', 'telekinetic')
        else
          break_summoned_weapon?(checkright)
          break_summoned_weapon?(checkleft)
        end
      else
        EquipmentManager.instance.stow_weapon(@weapon_training[game_state.weapon_skill])
      end
      game_state.next_clean_up_step
      return true
    end
    game_state.update_dancing(DRRoom.npcs.length)
    game_state.update_retreating(DRRoom.npcs.length)
    if game_state.dancing
      game_state.dance(@weapon_training)
    elsif game_state.now_retreating
      determine_next_to_train(game_state, game_state.retreat_weapons(@weapon_training))
      game_state.was_retreating = true
    else
      determine_next_to_train(game_state, @weapon_training)
      game_state.was_retreating = false
    end

    if game_state.parrying
      check_stance(game_state)
      check_weapon(game_state)
    else
      check_weapon(game_state)
      check_stance(game_state)
    end

    game_state.update_weapon_skill(game_state.weapon_skill)
    false
  end

  private

  def determine_next_to_train(game_state, weapon_training)
    return unless game_state.skill_done?(DRSkill.getxp(game_state.weapon_skill).to_i) || !weapon_training[game_state.weapon_skill] || game_state.ending_ranged?

    echo('new skill needed for training') if $debug_mode
    # echo("action count: #{game_state.action_count} vs #{@target_action_count}") if $debug_mode
    # echo("skill ranks: #{DRSkill.getxp(game_state.weapon_skill).to_i} vs #{game_state.target_weapon_skill}") if $debug_mode

    game_state.action_count = 0

    if DRStats.moon_mage? && moon_used_to_summon_weapon.nil?
      echo('skipping summoned weapons because no moonblade available') if $debug_mode
      weapon_training = weapon_training.reject { |skill, _| game_state.summoned_info(skill) }
    end
    new_weapon_skill, game_state.weapon_name = weapon_training.min_by { |skill, _| [DRSkill.getxp(skill).to_i, DRSkill.getrank(skill).to_i] }
    game_state.update_weapon_skill(new_weapon_skill)

    game_state.update_target_weapon_skill(DRSkill.getxp(game_state.weapon_skill).to_i)
  end

  def last_stance
    Flags['last-stance'][0] =~ /(\d+)%.* (\d+)%.* (\d+)%.* (\d+)/
    { 'EVASION' => Regexp.last_match(1).to_i, 'PARRY' => Regexp.last_match(2).to_i, 'SHIELD' => Regexp.last_match(3).to_i, 'SPARE' => Regexp.last_match(4).to_i }
  end

  def build_stance_string(vals)
    "stance set #{vals['EVASION']} #{vals['PARRY']} #{vals['SHIELD']}"
  end

  def check_stance(game_state, override = nil)
    vals = { 'EVASION' => 0, 'PARRY' => 0, 'SHIELD' => 0, 'SPARE' => 0 }
    skill_map = { 'Parry Ability' => 'Parry', 'Shield Usage' => 'Shield' }
    previous = last_stance
    points = override || previous.values.inject(&:+)

    priority = if game_state.current_weapon_stance.nil?
                 ['Evasion', 'Parry Ability', 'Shield Usage'].sort_by { |skill| DRSkill.getxp(skill).to_i }
               else
                 game_state.current_weapon_stance
               end

    game_state.parrying = priority.index('Parry Ability') < 2

    priority.each do |skill|
      skill = skill_map[skill] if skill_map[skill]
      vals[skill.upcase] = points >= 100 ? 100 : points
      points -= vals[skill.upcase]
    end

    return if vals == previous
    return unless /maximum number of points \((\d+)/ =~ bput(build_stance_string(vals), 'Setting your Evasion stance to', 'is above your maximum number of points \(\d+')
    check_stance(game_state, Regexp.last_match(1).to_i)
  end

  def check_weapon(game_state)
    return unless game_state.weapon_skill_changed?

    echo("checking weapons as #{game_state.last_weapon_skill.inspect}!=#{game_state.weapon_skill}") if $debug_mode

    last_summoned = game_state.summoned_info(game_state.last_weapon_skill)
    next_summoned = game_state.summoned_info(game_state.weapon_skill)

    # Clean up the previous weapon
    if !last_summoned
      EquipmentManager.instance.stow_weapon(@weapon_training[game_state.last_weapon_skill])
    elsif !next_summoned && !DRStats.moon_mage?
      break_summoned_weapon?(checkright)
      break_summoned_weapon?(checkleft)
    elsif !next_summoned && DRStats.moon_mage?
      if checkright =~ /moon/ || checkleft =~ /moon/
        bput('wear moon', 'telekinetic')
      end
    end

    # Prepare the next weapon
    if next_summoned
      summon_weapon(UserVars.moons['visible'].first, @summoned_weapons_element) unless last_summoned
      shape_summoned_weapon(game_state.weapon_skill)
      turn_summoned_weapon if next_summoned['turn']
      push_summoned_weapon if next_summoned['push']
      pull_summoned_weapon if next_summoned['pull']
    else
      EquipmentManager.instance.wield_weapon(game_state.weapon_name, game_state.weapon_skill)
    end
  end
end

class LootProcess
  include DRC

  def initialize(settings)
    echo('New LootProcess') if $debug_mode
    @skin = settings.skinning({})['skin'] || false
    @arrange_all = settings.skinning({})['arrange_all'] || false
    @arrange_count = settings.skinning({})['arrange_count'] || 0
    @tie_bundle = settings.skinning({})['tie_bundle'] || false
    @arrange_types = settings.skinning({})['arrange_types'] || {}
    @lootables = settings.lootables([])
    @ritual_type = settings.thanatology({})['ritual_type'] || {}
    @necro = settings.thanatology({})['necro'] || false
  end

  def execute(game_state)
    game_state.mob_died = false
    dispose_body(game_state)
    stow_lootables(game_state)
    if (game_state.mob_died || DRRoom.npcs.empty?) && game_state.finish_killing?
      echo('LootProcess::clean_up') if $debug_mode
      game_state.next_clean_up_step
    end
    return true if game_state.finish_spell_casting? || game_state.stowing?
    false
  end

  def stow_lootables(game_state)
    pair = [checkleft, checkright]
    tried_loot = false
    @lootables.each do |item|
      next if game_state.too_many.include?(item.downcase)
      matches = DRRoom.room_objs.grep(/\b#{item}/)
      tried_loot ||= !matches.empty?
      matches.each { |_| fput "stow #{item}" }
    end
    return unless tried_loot
    pause 1
    if checkleft != pair.first && !@lootables.grep(/#{checkleft}/).empty?
      echo("out of room, failed to store #{checkleft}")
      game_state.too_many.push(checkleft.downcase)
      dispose_trash(checkleft)
    end
    if checkright != pair.last && !@lootables.grep(/#{checkright}/).empty?
      echo("out of room, failed to store #{checkright}")
      game_state.too_many.push(checkright.downcase)
      dispose_trash(checkright)
    end
  end

  def dispose_body(game_state)
    return if DRRoom.dead_npcs.empty?

    game_state.mob_died = true
    arrange_mob(DRRoom.dead_npcs.first, game_state)
    if @necro
      if @ritual_type == 'harvest'
        check_thanatology(DRRoom.dead_npcs.first, 'preserve', game_state)
      end
      check_thanatology(DRRoom.dead_npcs.first, @ritual_type, game_state)
      check_skinning(DRRoom.dead_npcs.first, game_state) if ['preserve'].include?(@ritual_type)
    elsif @skin
      check_skinning(DRRoom.dead_npcs.first, game_state)
    end
    bput('loot', 'You search', 'I could not find what you were referring to')
    pause 0.2 until DRRoom.dead_npcs.empty?
  end

  # partially completed, only works for a single ritual.
  def check_thanatology(mob_noun, ritual, game_state)
    return if game_state.construct?(mob_noun)

    perform_message = "perform #{ritual} on #{mob_noun}"
    case bput(perform_message, 'Rituals do not work upon constructs', 'precise motions with your ritual knife', 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts', 'roundtime')
    when 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts'
      return
    when 'precise motions with your ritual knife'
      waitrt?
      fput 'drop material'
      return
    when 'Rituals do not work upon constructs'
      game_state.construct(mob_noun)
      return
    end
    waitrt?
    # Eventually need a method for self-healing that would use this same block to set it up the perform consume and prep/cast consume flesh/devour
    pause 0.25
    waitrt?
    snap = [checkleft, checkright]
    dispose_trash(checkleft) if snap.first != checkleft
    dispose_trash(checkright) if snap.last != checkright
  end

  def arrange_mob(mob_noun, game_state)
    return unless @arrange_count > 0
    return unless game_state.skinnable?(mob_noun)

    arranges = 0
    type = @arrange_types[mob_noun] || 'skin'
    arrange_message = @arrange_all ? "arrange all for #{type}" : "arrange for #{type}"
    while arranges < @arrange_count
      arranges += 1
      case bput(arrange_message, 'You begin to arrange', 'You continue arranging', 'You make a mistake', 'You complete arranging', 'That creature cannot', 'That has already been arranged', 'Arrange what', 'cannot be skinned')
      when 'You complete arranging', 'That has already been arranged'
        break
      when 'Arrange what', 'cannot be skinned'
        # echo("adding #{mob_noun} to no skin list: #{game_state.no_skins}") if $debug_mode
        game_state.unskinnable(mob_noun)
        return
      when 'That creature cannot'
        arranges = 0
        arrange_message = @arrange_all ? 'arrange all' : 'arrange'
      end
      waitrt?
    end
  end

  def check_skinning(mob_noun, game_state)
    return unless game_state.skinnable?(mob_noun)

    pause 0.25
    waitrt?
    if game_state.need_bundle
      case bput('tap bundle', 'You tap a \w+ bundle that you are wearing', 'I could not find what you were referring to')
      when /lumpy/
        if @tie_bundle
          bput('tie bundle', 'TIE the bundle again')
          bput('tie bundle', 'you tie the bundle')
          bput('adjust bundle', 'You adjust')
        end
        game_state.need_bundle = false
      when /tight/
        game_state.need_bundle = false
      end
    end

    snap = [checkleft, checkright]
    case bput('skin', 'roundtime', 'skin what', 'cannot be skinned', 'carrying far too many items')
    when 'carrying far too many items'
      waitrt?
      fput 'get skin from bundle'
      fput 'drop skin'
      fput 'skin'
    when 'cannot be skinned'
      # echo("adding #{mob_noun} to no skin list: #{game_state.no_skins}") if $debug_mode
      game_state.unskinnable(mob_noun)
      return
    end
    pause 1
    waitrt?
    if game_state.need_bundle && snap != [checkleft, checkright]
      unless DRStats.moon_mage? && 'telekinetic' == bput('wear moon', 'telekinetic', 'wear what')
        EquipmentManager.instance.stow_weapon(game_state.weapon_name)
      end
      if 'You get' == bput('get bundling rope', 'You get', 'What were you referring to', 'You need a free hand')
        fput('bundle')
        fput('wear bundle')
        if @tie_bundle
          bput('tie bundle', 'TIE the bundle again')
          bput('tie bundle', 'you tie the bundle')
          bput('adjust bundle', 'You adjust')
        end
      end
      game_state.need_bundle = false
      unless DRStats.moon_mage? && 'you grab' == bput('get moon', 'you grab', 'What were')
        EquipmentManager.instance.wield_weapon(game_state.weapon_name, game_state.weapon_skill)
      end
    end
    dispose_trash(checkleft) if snap.first != checkleft
    dispose_trash(checkright) if snap.last != checkright
  end
end

class SafetyProcess
  include DRC
  include DRCT

  def initialize
    echo('New SafetyProcess') if $debug_mode
    Flags.add('ct-engaged', 'closes to pole weapon range on you', 'closes to melee range on you')
  end

  def execute(game_state)
    custom_require.call('tendme') if checkbleeding && !Script.running?('tendme')
    fix_standing
    game_state.danger = in_danger?(game_state.danger)
    keep_away if !game_state.danger && game_state.now_retreating
  end

  private

  def keep_away
    return unless Flags['ct-engaged']
    Flags.reset('ct-engaged')
    retreat
  end

  def in_danger?(danger)
    return false if checkhealth >= 75

    unless danger
      Flags.reset('ct-engaged')
      retreat
    end

    fput 'exit' if checkhealth < 40

    keep_away
    true
  end
end

class SpellProcess
  include DRC
  include DRCS

  def initialize(settings)
    echo('New SpellProcess') if $debug_mode
    @buff_spells = settings.buff_spells({})
    @offensive_spells = settings.offensive_spells([])
    @cambrinth = settings.cambrinth(nil)
    @casts = settings.cast_messages([])
    @preps = settings.prep_messages([])
    @is_empath = settings.is_empath(false)
    @empath_spells = settings.empath_healing({})

    if (!@buff_spells.empty? || !@offensive_spells.empty?) && (@casts.empty? || @preps.empty?)
      raise(ArgumentError, 'Must provide casting/prep messages to use spells')
    end

    Flags.add('ct-spelllost', 'Your pattern dissipates with the loss of your target')
    @offensive_spells
      .select { |spell| spell['expire'] }
      .each { |spell| add_spell_flag(spell['name'], spell['expire']) }
    @buff_spells
      .select { |_name, data| data['expire'] }
      .each { |name, data| add_spell_flag(name, data['expire']) }
  end

  def add_spell_flag(name, expire)
    Flags.add("ct-#{name}", expire)
    Flags["ct-#{name}"] = true
  end

  def execute(game_state)
    return true if game_state.stowing?
    check_timer(game_state)
    if Flags['ct-spelllost']
      game_state.casting = false
      Flags.reset('ct-spelllost')
    end
    @offensive_spells.select { |spell| spell['expire'] }.each { |spell| Flags["ct-#{spell['name']}"] = true } if game_state.mob_died
    unless game_state.casting
      bless_thrown(game_state)
      ignite_weapon(game_state)
      check_health(game_state)
      check_buffs(game_state)
    end
    check_offensive(game_state)
    check_current(game_state)
    if game_state.finish_spell_casting? && !game_state.casting
      echo('SpellProcess::clean_up') if $debug_mode
      game_state.next_clean_up_step
      fput('release dalu') if DRSpells.active_spells['Damaris\' Lullaby']
      return true
    end
    false
  end

  private

  def check_timer(game_state)
    return if game_state.cast_timer.nil? || (Time.now - game_state.cast_timer) <= 60

    game_state.cast_timer = nil
    game_state.casting = false
    fput('release spell')
  end

  def bless_thrown(game_state)
    return unless @buff_spells['Bless']
    return unless game_state.weapon_skill_changed?
    return unless $thrown_skills.include?(game_state.weapon_skill)
    return if checkright.nil?

    bput('prepare Bless', *@preps)
    bput("cast #{checkright}", *@casts)
  end

  def ignite_weapon(game_state)
    return unless @buff_spells['Ignite']
    return unless game_state.weapon_skill_changed?
    return if $aim_skills.include?(game_state.weapon_skill)
    return if checkright.nil?

    bput('release ignite', 'The warm feeling in your hand goes away', 'Release what')
    bput('prepare Ignite', *@preps)
    bput("cast #{checkright}", 'Tendrils of flame dart along your hand', 'The flames dancing along your fingertips', 'Currently lacking the skill', 'You don\'t think you can manage to ignite')
  end

  def charge_cambrinth?(game_state)
    return false unless game_state.charges
    echo("charge_camb: #{game_state.charges}") if $debug_mode

    if game_state.charges.empty?
      bput("invoke my #{@cambrinth}", 'You reach for its center', 'Your link to the')
      game_state.charges = nil
    else
      bput("charge my #{@cambrinth} #{game_state.charges.pop}", '^You harness')
      waitrt?
    end
    true
  end

  def check_current(game_state)
    return unless game_state.casting
    return if charge_cambrinth?(game_state)

    cast(game_state) if Flags['ct-spellcast']
  end

  def cast(game_state)
    case bput(@custom_cast || 'cast', *([@casts] + [/^Your target pattern dissipates/, /^You can't cast that at yourself/]))
    when /^Your target pattern dissipates/, /^You can't cast that at yourself/
      fput('release spell')
    end
    @custom_cast = nil

    game_state.casting = false
    game_state.cast_timer = nil
    if game_state.casting_moonblade
      game_state.last_moonblade_cast = Time.now
      if checkleft =~ /moon/
        # The moonblade was summoned or refreshed while training something else
        bput('wear moon', 'telekinetic')
      end

      game_state.casting_moonblade = false
    end

    return unless @after
    @after.each { |action| bput(action['message'], action['matches']) }
    @after = nil
  end

  def check_buffs(game_state)
    return if checkmana < 30
    recastable_buffs = @buff_spells
                       .select { |_, data| data['recast'] || data['recast_every'] }
                       .select { |name, data| data['expire'] ? Flags["ct-#{name}"] : true }

    name, data = recastable_buffs.find do |name, data|
      if data['abbrev'] == 'moonblade'
        time_since_last_moonblade = (Time.now - game_state.last_moonblade_cast)
        echo("Time since last moonblade is #{time_since_last_moonblade} seconds.")
        echo("recast_every for moonblade is #{data['recast_every']}")
        (Time.now - game_state.last_moonblade_cast) >= data['recast_every']
      else
        !DRSpells.active_spells[name] || DRSpells.active_spells[name].to_i <= data['recast']
      end
    end
    echo("found buff missing: #{name}") if $debug_mode && name
    data['name'] = name
    prepare_spell(data, game_state)
  end

  def check_health(game_state)
    return unless @is_empath
    return if checkhealth > 91

    echo('Healing') if $debug_mode
    data = { 'abbrev' => 'vh', 'mana' => @empath_spells['VH'].first, 'cambrinth' => @empath_spells['VH'][1..-1] }
    prepare_spell(data, game_state)
  end

  def check_offensive(game_state)
    return if game_state.casting
    return if DRRoom.npcs.empty?
    return if checkmana < 40
    data = @offensive_spells
           .select { |spell| spell['expire'] ? Flags["ct-#{spell['name']}"] : true }
           .select { |spell| game_state.dancing ? spell['harmless'] : true }
           .min_by { |spell| DRSkill.getxp(spell['skill']).to_i }
    return if DRSkill.getxp(data['skill']).to_i >= 34 && checkmana < 70 # make this a spell option
    prepare_spell(data, game_state)
    Flags.reset('ct-spelllost')
  end

  def prepare_spell(data, game_state)
    return unless data
    game_state.cast_timer = Time.now
    echo("prepare spell: #{data}") if $debug_mode
    if data['cyclic']
      fput('release care') if DRSpells.active_spells['Caress of the Sun']
      fput("release #{data['abbrev']}") # make bputs. better spells
    end
    command = 'pre'
    command = data['skill'] == 'Debilitation' ? 'pre' : 'tar' if data['skill']
    command = data['prep_type'] if data['prep_type']
    if data['moon']
      moon = UserVars.moons['visible'].first
      unless moon
        echo "No moon available to cast #{data['abbrev']}"
        unless Script.running? 'moonwatch'
          echo 'moonwatch is not running. Starting it now'
          custom_require.call('moonwatch')
          echo "Run `;e autostart('moonwatch')` to avoid this in the future"
        end
        weather = bput('weather', 'inside', 'You glance up at the sky.')
        if weather =~ /inside/
          echo "*** You're inside and there are no available moons. You're going to have a hard time casting #{data['abbrev']}"
        end
        unless moon = UserVars.moons['visible'].first
          echo "Couldn't find any moons to cast #{data['abbrev']} with"
          return
        end
      end
      if data['abbrev'] == 'moonblade'
        game_state.casting_moonblade = true
        visible_moons = UserVars.moons['visible']
        last_moon = moon_used_to_summon_weapon
        data['before'] << { 'message' => 'get moon', 'matches' => ['already holding that', 'You grab'] }
        if visible_moons.include? last_moon
          moon = last_moon
          data['cast'] = "cast #{moon} refresh"
        else
          data['before'] << { 'message' => 'drop moon', 'matches' => ['open your hand'] }
          data['cast'] = "cast #{moon}"
        end
      else
        data['cast'] = "cast #{moon}"
      end
    end
    bput("#{command} #{data['abbrev']} #{data['mana']}", *(@preps + ['You are already preparing']))
    game_state.casting = true
    game_state.charges = data['cambrinth'].dup if data['cambrinth']
    @custom_cast = data['cast']
    @after = data['after']
    Flags.reset("ct-#{data['name']}") if data['expire']
    Flags.reset('ct-spellcast')
    data['before'].each { |action| bput(action['message'], action['matches']) } if data['before']
  end
end

class AbilityProcess
  include DRC
  include DRCT

  def initialize(settings)
    echo('New AbilityProcess') if $debug_mode
    @buffs = settings.buff_nonspells({})
    @khri = @buffs.delete('khri') || []
    @kneel_khri = settings.kneel_khri(false)
    @khri_preps = settings.khri_preps([])
  end

  def execute(game_state)
    check_nonspell_buffs(game_state)
    false
  end

  private

  def check_nonspell_buffs(game_state)
    @buffs.each do |action, cooldown|
      timer = game_state.cooldown_timers[action]
      next unless !timer || (Time.now - timer).to_i > cooldown
      game_state.cooldown_timers[action] = Time.now
      fput action
      waitrt?
    end
    return if game_state.danger && @kneel_khri
    @khri.select { |name| !DRSpells.active_spells["Khri #{name}"] }.each do |name|
      timer = game_state.cooldown_timers[name]
      next unless !timer || (Time.now - timer).to_i > 30
      retreat if @kneel_khri
      fput('kneel') if @kneel_khri
      game_state.cooldown_timers[name] = Time.now if ['Your body is willing', 'You have not recovered'].include? bput("Khri #{name}", *@khri_preps + [/Your body is willing/, /You have not recovered/])
      waitrt?
      fix_standing
    end
  end
end

class ManipulateProcess
  include DRC
  include DRCT

  def initialize(settings)
    echo('New ManipulateProcess') if $debug_mode
    @threshold = settings.manipulate_threshold(nil)

    @last_manip = Time.now - 200
  end

  def execute(game_state)
    return if game_state.danger || @threshold.nil?
    @filtered_npcs = DRRoom.npcs - ['Warrior']
    manipulate if should_manipulate?
  end

  private

  def should_manipulate?
    @filtered_npcs.length >= @threshold && Time.now - @last_manip > 120
  end

  def manipulate
    bput('manip stop all', 'You relax your will', 'But you aren')
    bput("manipulate friendship #{@filtered_npcs.first}",  'You attempt to empathically manipulate', 'You strain')
    @last_manip = Time.now
  end
end

class TrainerProcess
  include DRC
  include DRCT

  def initialize(settings)
    echo('New TrainerProcess') if $debug_mode
    @training_abilities = settings.training_abilities({})
  end

  def execute(game_state)
    return if game_state.danger || game_state.casting
    case select_ability(game_state)
    when 'PercMana'
      moon_mage_perc(game_state)
    when 'Perc'
      bput('perc', 'You reach out') unless game_state.now_retreating
    when 'Perc Health'
      bput('perc heal', 'You close your eyes')
    when 'Astro'
      astrology(game_state)
    when 'App'
      appraise(game_state, '')
    when 'App Quick'
      appraise(game_state, 'quick')
    when 'App Careful'
      appraise(game_state, 'careful')
    when 'Tactics'
      bput(%w(weave bob circle).sample, 'roundtime', 'There is nothing else', 'You must be closer') unless DRRoom.npcs.empty?
    when 'Hunt'
      bput('hunt', 'You take note of ', 'You find yourself unable to hunt in this area') unless game_state.now_retreating
    when 'Pray'
      bput('pray meraud', 'You glance')
    when 'Scream'
      bput('Scream conc', 'Inhaling deeply', 'There is nothing') unless DRRoom.npcs.empty?
    when 'Khri Prowess'
      bput('khri prowess', 'Remembering the mantra of mind over matter', 'You\'re already using the Prowess meditation.', 'previous use of the Prowess', 'Your body is willing', 'Your mind and body are willing') unless DRRoom.npcs.empty?
    when 'Stealth'
      fput('hide')
      pause
      waitrt?
      fput('stalk') if checkhidden
    end
    waitrt?
    false
  end

  private

  def appraise(game_state, modifier)
    return if game_state.now_retreating
    return if DRRoom.npcs.empty?

    bput("app #{DRRoom.npcs.first} #{modifier}", 'Taking stock of', 'It\'s dead', 'You can\'t determine anything about this creature.', 'I could not find', 'You cannot appraise that', 'roundtime')
  end

  def moon_mage_perc(game_state)
    return if game_state.now_retreating

    retreat
    bput('perc mana', 'You reach out')
  end

  def astrology(game_state)
    return if game_state.now_retreating

    retreat
    bput('predict weather', 'You predict that', 'You are far too', 'you lack the skill to grasp them fully')
  end

  def select_ability(game_state)
    ability = @training_abilities.find { |name, ability_info| check_ability(name, ability_info, game_state) }.first
    echo("Selected: #{ability}") if ability && $debug_mode
    game_state.cooldown_timers[ability] = Time.now
    ability
  end

  def check_ability(name, ability_info, game_state)
    expcheck = ability_info[:check].nil? || DRSkill.getxp(ability_info[:check]).to_i < 30
    return expcheck unless game_state.cooldown_timers[name]
    Time.now - game_state.cooldown_timers[name] >= ability_info[:cooldown] ? expcheck : false
  end
end

class AttackProcess
  include DRC

  def initialize(settings)
    echo('New AttackProcess') if $debug_mode
    @aim_fillers = settings.aim_fillers([])
    @aim_fillers_stealth = settings.aim_fillers_stealth({})
    @charged_maneuvers = settings.charged_maneuvers({})
    @dance_actions = settings.dance_actions([])
    @dance_actions_stealth = settings.dance_actions_stealth([])
    @fatigue_regen_threshold = settings.fatigue_regen_threshold(90)
    @fatigue_regen_action = settings.fatigue_regen_action('bob')
    @dual_load = settings.dual_load(false)
    @is_empath = settings.is_empath(false) && !settings.construct(false)
    @backstab = settings.backstab(nil)
    @ambush = settings.ambush(false)
    @use_stealth_attacks = settings.use_stealth_attacks(false)

    Flags.add('ct-ranged-ready', 'You think you have your best shot possible now')
  end

  def execute(game_state)
    if DRRoom.npcs.uniq.length == 1 && !game_state.stabbable?(DRRoom.npcs.uniq.first)
      game_state.no_stab_current_mob = true
    elsif game_state.mob_died && game_state.no_stab_current_mob
      game_state.no_stab_current_mob = false
    end
    if game_state.dancing
      if game_state.finish_killing?
        echo('AttackProcess::clean_up') if $debug_mode
        game_state.next_clean_up_step
      else
        dance(game_state)
      end
      return false
    end

    if fatigue_low?
      echo("***Fatigue: #{DRStats.fatigue}***") if $debug_mode
      echo("***Target: #{@fatigue_regen_threshold}***") if $debug_mode
      fput(@fatigue_regen_action)
      return false
    end

    return false if @is_empath

    charged_maneuver = check_charged_maneuver(@charged_maneuvers[game_state.weapon_skill], game_state)

    if $thrown_skills.include?(game_state.weapon_skill)
      game_state.loaded = false
      attack_thrown(game_state)
    elsif $aim_skills.include?(game_state.weapon_skill)
      attack_aimed(charged_maneuver, game_state)
    else
      game_state.loaded = false
      attack_melee(charged_maneuver, game_state)
    end
    false
  end

  private

  def fatigue_low?
    DRStats.fatigue < @fatigue_regen_threshold
  end

  def attack_melee(charged_maneuver, game_state)
    if charged_maneuver.empty?
      is_offhand = game_state.weapon_skill == 'Offhand Weapon'

      if @backstab.include?(game_state.weapon_skill) || (@ambush && DRSkill.getxp('Backstab').to_i < 34 && !is_offhand) || (@use_stealth_attacks && DRSkill.getxp('Stealth') < 32)
        fput('hide')
        pause 1
        waitrt?
        if is_offhand && @backstab
          hidden_attack = game_state.no_stab_current_mob || !is_offhand ? 'attack left back' : 'backstab left'
          command = checkhidden ? hidden_attack : 'attack left'
        else
          hidden_attack = game_state.no_stab_current_mob || !@backstab.include?(game_state.weapon_skill) ? 'attack back' : 'backstab'
          command = checkhidden ? hidden_attack : 'attack'
        end
      else
        command = is_offhand ? 'attack left' : 'attack'
      end
      fput(command)
    else
      use_charged_maneuver(charged_maneuver, game_state)
    end

    waitrt?

    if reget(5, 'You can\'t backstab that')
      if DRRoom.npcs.uniq.length == 1
        game_state.unstabbable(DRRoom.npcs.first)
      else
        game_state.no_stab_current_mob = true
      end
    end

    if reget(5, 'You aren\'t close enough to attack', 'It would help if you were closer')
      fput('eng')
      pause 6
    else
      game_state.action_count += 1
    end
  end

  def attack_thrown(game_state)
    bput('lob', 'roundtime', 'What are you trying to lob')
    waitrt?
    if game_state.weapon_name == 'blades'
      until /(Stow what|You put your)/ =~ bput('stow blade', 'Stow what', 'You pick up .*blade', 'You put your blades')
      end
    end
    bput("get my #{game_state.weapon_name}", 'You are already holding', 'You pick up', 'You get')
    game_state.action_count += 1
  end

  def attack_aimed(charged_maneuver, game_state)
    game_state.selected_maneuver = charged_maneuver unless game_state.loaded
    game_state.loaded = false if game_state.mob_died
    game_state.action_queue = [] if Flags['ct-ranged-ready']

    if game_state.loaded && game_state.action_queue.empty?
      if game_state.selected_maneuver.empty?
        command = 'shoot'
        if @use_stealth_attacks && DRSkill.getxp('Stealth') < 32
          until checkhidden
            fput('hide')
            pause
            waitrt?
          end
          command = checkhidden ? 'poach' : 'shoot'
        end
        case bput(command, 'isn\'t loaded', 'There is nothing', 'But your', 'you fire', 'you poach', 'I could not find', 'with no effect and falls to the ground', 'Face what')
        when 'you fire', 'you poach'
          game_state.action_count += 1
        end
      else
        use_charged_maneuver(game_state.selected_maneuver, game_state)
        game_state.action_count += 1
      end
      game_state.loaded = false
      waitrt?
    elsif game_state.loaded
      fput(game_state.action_queue.shift)
      waitrt?
    else
      if @dual_load && DRSpells.active_spells['Hands of Lirisa']
        pause 0.5 until bput('load arrows', 'You reach into', 'already loaded')
      else
        pause 0.5 until bput('load', 'You reach into', 'already loaded')
      end

      waitrt?
      game_state.loaded = true
      if game_state.selected_maneuver.empty?
        game_state.action_queue = get_actions(@aim_fillers, @aim_fillers_stealth, game_state.weapon_skill)
        bput('aim', 'You begin to target', 'You are already', 'There is nothing else', 'Face what\?', 'You shift your target')
        Flags.reset('ct-ranged-ready')
      end
    end
  end

  def get_actions(actions, stealth_actions, weapon_skill)
    echo("get_actions #{actions}:#{stealth_actions}") if $debug_mode

    (stealth_actions && stealth_actions[weapon_skill] && (DRSkill.getxp('Stealth').to_i < 34)) ? stealth_actions[weapon_skill].dup : actions[weapon_skill].dup
  end

  def dance(game_state)
    if DRRoom.npcs.empty?
      pause 1
    else
      if game_state.dance_queue.empty?
        actions = @dance_actions_stealth && !@dance_actions_stealth.empty? && DRSkill.getxp('Stealth').to_i < 34 ? @dance_actions_stealth.dup : @dance_actions.dup
        game_state.dance_queue = actions
      end
      fput(game_state.dance_queue.shift)
      waitrt?
    end
  end

  def check_charged_maneuver(charged_maneuver, game_state)
    return '' unless charged_maneuver

    timer = game_state.cooldown_timers[charged_maneuver]
    return '' if timer && (Time.now - timer).to_i < 60

    echo "***Ready to use charged maneuver: #{charged_maneuver}***" if $debug_mode
    charged_maneuver
  end

  def use_charged_maneuver(action, game_state)
    game_state.cooldown_timers[action] = Time.now
    attempt = bput("maneuver #{action}", 'You brace your', 'balanced and', 'Taking a full step back', 'You take a step back', 'You lower your shoulders', 'You angle to the side and ', 'rest a bit longer', 'You square up your feet')
    return if attempt == 'rest a bit longer'

    # Maneuvers have extra non-RT delays
    pause 7
    waitrt?
  end
end

class CombatTrainer
  include DRC

  attr_reader :running

  def stop
    echo 'Received stop signal' if $debug_mode
    @stop = true
  end

  def parse_args(args)
    should_debug = args.delete('debug')
    should_app = args.delete('app')
    darg = args.find { |arg| arg =~ /d\d+/ }
    args.delete(darg) if darg
    rarg = args.find { |arg| arg =~ /r\d+/ }
    args.delete(rarg) if rarg
    construct = args.delete('construct')

    settings = get_settings(args)

    settings.construct = construct

    debug if should_debug
    set_dance(darg, settings) if darg
    set_retreat(rarg, settings) if rarg
    app(settings) if should_app

    settings
  end

  def initialize(args:[])
    settings = parse_args(args)

    setup(settings)
    settings.storage_containers([]).each { |container| fput("open my #{container}") }
    EquipmentManager.instance.wear_equipment_set?('standard')
  end

  def app(settings)
    settings.training_abilities['App'] = { check: 'Appraisal', cooldown: 60 }
    settings.training_abilities['App Quick'] = { check: 'Appraisal', cooldown: 60 }
    settings.training_abilities['App Careful'] = { check: 'Appraisal', cooldown: 60 }
  end

  def set_dance(message, settings)
    message =~ /d(\d+)/
    settings.dance_threshold = Regexp.last_match(1).to_i
  end

  def set_retreat(message, settings)
    message =~ /r(\d+)/
    settings.retreat_threshold = Regexp.last_match(1).to_i
  end

  def debug
    $debug_mode = true
  end

  def setup(settings)
    Flags.add('ct-spellcast', '^Your formation of a targeting pattern around .+ has completed\.', '^You feel fully prepared to cast your spell\.')

    Flags.add('last-stance', 'Setting your Evasion stance to \d+%, your Parry stance to \d+%, and your Shield stance to \d+%.  You have \d+ stance points left')

    fput 'stance set 100 40 40'
    pause 0.25 until Flags['last-stance']

    @stop = false
    @running = true
    @game_state = GameState.new(settings)
    $debug_mode |= UserVars.combat_trainer_debug
    @combat_processes = make_processes(settings)
  end

  def make_processes(settings)
    [
      SetupProcess.new(settings),
      SpellProcess.new(settings),
      AbilityProcess.new(settings),
      LootProcess.new(settings),
      SafetyProcess.new,
      ManipulateProcess.new(settings),
      TrainerProcess.new(settings),
      AttackProcess.new(settings)
    ]
  end

  def start_combat
    EquipmentManager.instance.empty_hands
    loop do
      @combat_processes.each do |process|
        break if process.execute(@game_state)
      end
      pause 0.1
      if @game_state.done_cleaning_up?
        echo('CombatTrainer::clean_up') if $debug_mode
        @running = false
        stop_script('tendme') if Script.running?('tendme')
        break
      end
      @game_state.next_clean_up_step if @stop && !@game_state.cleaning_up?
    end
  end
end

class GameState
  $ranged_skills = $thrown_skills + $aim_skills

  attr_accessor :dancing, :now_retreating, :was_retreating, :mob_died, :action_count, :last_weapon_skill, :weapon_name, :danger, :parrying, :casting, :too_many, :need_bundle, :cooldown_timers, :action_queue, :dance_queue, :no_stab_current_mob, :loaded, :selected_maneuver, :charges, :last_moonblade_cast, :cast_timer, :casting_moonblade

  def initialize(settings)
    @dancing = false
    @now_retreating = false
    @was_retreating = false
    @mob_died = false
    @last_weapon_skill = nil
    @weapon_name = nil
    @danger = false
    @parrying = false
    @casting = false
    @too_many = []
    @need_bundle = true
    @cooldown_timers = {}
    @action_queue = []
    @dance_queue = []
    @no_stab_current_mob = false
    @loaded = false
    @selected_maneuver = ''
    @charges = nil
    @last_moonblade_cast = Time.at(0)
    @cast_timer = nil
    @casting_moonblade = false

    # private
    @clean_up_step = nil
    @target_weapon_skill = -1
    @no_skins = []
    @constructs = []
    @no_stab_mobs = []
    @dance_skill = settings.dance_skill(nil)
    @target_action_count = settings.combat_trainer_action_count(10)
    @dance_threshold = settings.dance_threshold(0)
    @retreat_threshold = settings.retreat_threshold(nil)
    @summoned_weapons = settings.summoned_weapons([])
    @target_increment = settings.combat_trainer_target_increment(3)
    @stances = settings.stances([])
  end

  def next_clean_up_step
    case @clean_up_step
    when nil
      @clean_up_step = 'kill'
    when 'kill'
      @clean_up_step = 'clear_magic'
    when 'clear_magic'
      @clean_up_step = 'stow'
    when 'stow'
      @clean_up_step = 'done'
    end
  end

  def cleaning_up?
    !@clean_up_step.nil?
  end

  def finish_killing?
    @clean_up_step == 'kill'
  end

  def finish_spell_casting?
    @clean_up_step == 'clear_magic'
  end

  def stowing?
    @clean_up_step == 'stow'
  end

  def done_cleaning_up?
    @clean_up_step == 'done'
  end

  def update_weapon_skill(skill)
    @last_weapon_skill = @current_weapon_skill
    @current_weapon_skill = skill
  end

  def weapon_skill
    @current_weapon_skill
  end

  def weapon_skill_changed?
    @last_weapon_skill != @current_weapon_skill
  end

  def dance(weapon_training)
    update_weapon_skill(@dance_skill)
    @weapon_name = weapon_training[@dance_skill]
  end

  def skill_done?(exp)
    @action_count >= @target_action_count || exp >= @target_weapon_skill
  end

  def ending_ranged?
    @was_retreating && !@now_retreating
  end

  def update_dancing(npc_count)
    @dancing = npc_count <= @dance_threshold || npc_count == 0
  end

  def update_retreating(npc_count)
    @now_retreating = @retreat_threshold && npc_count >= @retreat_threshold
  end

  def retreat_weapons(weapon_training)
    weapon_training.select { |skill, _| $ranged_skills.include?(skill) }
  end

  def summoned_info(weapon_skill)
    @summoned_weapons.find { |summoned_skill| summoned_skill['name'] == weapon_skill }
  end

  def update_target_weapon_skill(current_exp)
    @target_weapon_skill = [34, current_exp + @target_increment].min
  end

  def current_weapon_stance
    @stances[@current_weapon_skill]
  end
  
  def skinnable?(mob_noun)
    !@no_skins.include?(mob_noun)
  end
  
  def unskinnable(mob_noun)
    @no_skins.push(mob_noun)
  end
  
  def construct?(mob_noun)
    @constructs.include?(mob_noun)
  end
  
  def construct(mob_noun)
    @constructs.push(mob_noun)
  end
  
  def stabbable?(mob_noun)
    !@no_stab_mobs.include?(mob_noun)
  end
  
  def unstabbable(mob_noun)
    @no_stab_mobs.push(mob_noun)
  end

  private

  attr_accessor :clean_up_step, :current_weapon_skill, :target_weapon_skill, :no_skins, :constructs, :no_stab_mobs
  attr_reader :dance_skill, :target_action_count, :dance_threshold, :retreat_threshold, :summoned_weapons, :target_increment, :stances
end

$COMBAT_TRAINER = CombatTrainer.new(args: variable.drop(1))
$COMBAT_TRAINER.start_combat
