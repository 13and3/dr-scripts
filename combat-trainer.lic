=begin
    Authored by Sheltim and Seped, suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will train a pre-configured list of weapon skills, starting with whichever has the lowest amount of field experience.

    Before running this script for the first time:
    * Download scripts "drmonitor", "events", and "spellmonitor". ;trust them all. These will be automatically run if they are not already running.
    * Set UserVars.combat_trainer_setup["YourCharacterNameHere"] to the name of your configuration script for this character.
        * For example, run ;e UserVars.combat_trainer_setup = {"YourCharacterName" => "YourSetupScriptName"}
        * You can add support for additional characters with ;e UserVars.combat_trainer_setup["CharacterName"] = "ScriptName"
        * To confirm correct setup, you can display each character's configuration script with ;e echo UserVars.combat_trainer_setup
        * Download "combat-trainer-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.combat_trainer_debug = true
=end

# TODO: Add clear to the top of the main loop?
# https://gswiki.play.net/mediawiki/index.php/Lich_scripting_reference#clear

# TODO: Detect low vitality and/or bleeds (retreat, exit room, quit?)

# TODO: Handle a nonexistent worn weapon (similar to what is done for wielding)
# "Remove what", "You sling", "You remove", "You aren't wearing that"

# TODO: Train expertise

# TODO: cache last stance to be less spammy.

# TODO: Alternate skinning options (skin only for skill not loot)

# TODO: Add sniping

# TODO: Train appraise if above a certain rank (100?)

# TODO: spell stance before casting

# TODO add a dance weapon

def main
    if !UserVars.combat_trainer_setup || !UserVars.combat_trainer_setup[checkname]
        echo "***Please configure your setup script (open this script for instructions).***"
        stop_script "combat-trainer"
    end

    # Configure UserVars
    start_script UserVars.combat_trainer_setup[checkname]
    while running?(UserVars.combat_trainer_setup[checkname])

    end

    # Run helper scripts
    ["drinfomon", "spellmonitor", "events" ].each do |script_name|
        if !running?(script_name)
            start_script script_name
            pause 2
        end
    end

    @aim_skills = [ "Bow", "Slings", "Crossbow", ]
    @thrown_skills = [ "Heavy Thrown", "Light Thrown", ]
    @twohanded_skills = [ "Twohanded Blunt", "Twohanded Edged", ]
    @buff_timers = { }

    Flags.delete('ct-spellcast')
    Flags.add('ct-spellcast', ['^Your formation of a targeting pattern around .+ has completed\.', '^You feel fully prepared to cast your spell\.'])

    Flags.delete('ct-evasion')
    Flags.delete('ct-parry')
    Flags.delete('ct-shield')
    Flags.delete('ct-spare')

    Flags.add('ct-evasion', 'You are currently using (\d+)% of your evasion skill')
    Flags.add('ct-parry', 'You are currently using (\d+)% of your weapon parry skill')
    Flags.add('ct-shield', 'You are currently using (\d+)% of your shield block skill')
    Flags.add('ct-spare', 'You have (\d+) defensive point\(s\) left to allocate')

    put "stance"
    pause 2
    while !Flags['ct-shield']
        pause 2
    end

    UserVars.stance_points = [Flags['ct-evasion'].last, Flags['ct-parry'].last, Flags['ct-shield'].last].map(&:to_i).inject(&:+)
    UserVars.stance_points += Flags['ct-spare'].last.to_i if Flags['ct-spare']

    last_skill = nil
    last_stance = nil

    while true do
        last_skill, last_stance = event_loop(last_skill, last_stance)
    end
end

def event_loop last_skill, last_stance
    # The next skill to train is the one with the lowest field experience
    weapon_skill, weapon_name = UserVars.weapon_training.sort_by { |skill, weapon| DRSkill.getxp(skill).to_i }.first

    check_weapon(weapon_skill, weapon_name) if last_skill != weapon_skill

    target = [34, DRSkill.getxp(weapon_skill).to_i + 3].min
    counter = 0

    last_stance = set_stance(weapon_skill, last_stance)

    if checkhealth <= 75
        echo "\a"
        echo "LOW ON HEALTH"
        fput "retreat"
        fput "retreat"
        pause 5
        return weapon_skill, last_stance
    end

    if(DRSkill.getxp(weapon_skill).to_i >= 34)
        idle_in_room
        echo "***Skills capped, sleeping***" if UserVars.combat_trainer_debug
        pause 5
        return weapon_skill, last_stance
    end

    if(DRRoom.npcs.length <= UserVars.dance_threshold && DRRoom.dead_npcs.length == 0)
        idle_in_room
        echo "***Too few or no enemies, sleeping***" if UserVars.combat_trainer_debug
        pause 5
        return weapon_skill, last_stance
    end

    echo "***Attempting to train #{weapon_skill}***" if UserVars.combat_trainer_debug

    while DRSkill.getxp(weapon_skill).to_i < target
        echo "***#{weapon_skill}: #{DRSkill.getxp(weapon_skill).to_i}***" if UserVars.combat_trainer_debug
        echo "***Target: #{target}***" if UserVars.combat_trainer_debug

        break if counter >= 10
        break if DRRoom.npcs.length == 0 && DRRoom.dead_npcs.length == 0
        check_dead_npcs()
        cast_spell = check_buffs()
        check_offensive_spells() unless cast_spell || DRRoom.npcs.length == 0
        check_fatigue()
        stow_ammo()

        counter += 1

        if @aim_skills.include? weapon_skill
            fput "load", "You reach into", "already loaded"
            waitrt?
            fput "aim", "You begin to target", "You are already", "There is nothing else"
            actions = DRSkill.getxp("Stealth").to_i < 34 && UserVars.aim_fillers_stealth[weapon_skill] ? UserVars.aim_fillers_stealth[weapon_skill] : UserVars.aim_fillers[weapon_skill]
            actions.each{|action|
                fput action
                waitrt?
                check_buffs()
            }
            fput "shoot", "isn't loaded", "There is nothing", "But your"
            waitrt?
        elsif @thrown_skills.include? weapon_skill
            fput "lob"
            waitrt?
            fput "get #{weapon_name}", "You are already holding", "You pick up"
        else
            fput weapon_skill == "Offhand Weapon" ? "attack left" : "attack"
            waitrt?
            if reget 5, "You aren't close enough to attack"
                pause 3
            end
        end
    end

    if counter == 10
        echo "***Weapon appears to be learning slowly, consider removing it from the training list***"
    end

    return weapon_skill, last_stance
end

def idle_in_room
    kill_offensive_spells
    check_buffs()
    if DRRoom.npcs.length > 0
        actions = DRSkill.getxp("Stealth").to_i < 34 && UserVars.dance_actions_stealth ? UserVars.dance_actions_stealth : UserVars.dance_actions
        actions.each do |action|
            fput action
            waitrt?
            check_buffs()
        end
    else
        pause 10
    end
end

def set_stance weapon_skill, last_stance
    vals = {"EVASION"=>0, "PARRY"=> 0, "SHIELD"=>0}
    skill_map = {"Parry Ability" => "Parry", "Shield Usage"=> "Shield"}
    points = UserVars.stance_points

    if UserVars.stances[weapon_skill].nil?
        echo "***No stance set for #{weapon_skill}, determining learning priority***" if UserVars.combat_trainer_debug
        priority = ["Evasion", "Parry Ability", "Shield Usage"].sort_by {|skill| DRSkill.getxp(skill).to_i}
    else
        echo "***Stance order set for #{weapon_skill}***" if UserVars.combat_trainer_debug
        priority = UserVars.stances[weapon_skill]
    end

    priority.each do |skill|
        skill = skill_map[skill] if skill_map[skill]
        vals[skill.upcase] = points >= 100 ? 100 : points
        points -= vals[skill.upcase]
    end

    new_stance = "stance set #{vals["EVASION"]} #{vals["PARRY"]} #{vals["SHIELD"]}"

    return last_stance if last_stance == new_stance
    fput new_stance
    new_stance
end

def stow_weapons
    while checkright != nil
        if UserVars.worn_weapons.include? checkright
            fput "wear #{checkright}"
        else
            fput "stow right"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end

    while checkleft != nil
        if UserVars.worn_weapons.include? checkleft
            fput "wear #{checkleft}"
        else
            fput "stow left"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end
end

def check_offensive_spells
    return if DRSpells.prep_spell
    data = UserVars.offensive_spells.sort_by { |data| DRSkill.getxp(data["skill"]).to_i }.first
    return unless data
    return if DRSkill.getxp(data["skill"]).to_i >= 34
    command = data["skill"] == "Debilitation" ? "pre" : "tar"
    fput "#{command} #{data["abbrev"]} #{data["mana"]}"
    @charges = data["cambrinth"].dup if data["cambrinth"]
    Flags.reset('ct-spellcast')
end

def check_buffs
    UserVars.buff_nonspells.each {|action, cooldown|
        timer = @buff_timers[action]
        if !timer || (Time.now - timer).to_i > cooldown
            @buff_timers[action] = Time.now
            fput action
            waitrt?
        end
    }

    if DRSpells.prep_spell
        if @charges
            if @charges.length > 0
                fput "charge #{UserVars.cambrinth} #{@charges.pop}"
                waitrt?
                return false
            else
                fput "invoke #{UserVars.cambrinth}"
                @charges = nil
                return false
            end
        end
        if Flags['ct-spellcast']
            fput "cast"
            return true
        end
        return false
    end

    UserVars.buff_spells.each {|name, data|
        if !DRSpells.active_spells[name] || (DRSpells.active_spells[name] <= data["recast"])
            fput "prepare #{data["abbrev"]} #{data["mana"]}"
            @charges = data["cambrinth"].dup if data["cambrinth"]
            Flags.reset('ct-spellcast')
            return true
        end
    }
    return false
end

def stow_ammo
    UserVars.ammo.each {|item|
        DRRoom.room_objs.grep(/#{item}/).each {|item| fput "stow #{item}"}
    }
end

def check_dead_npcs()
    return if DRRoom.dead_npcs.length < 1

    echo "***Found dead NPCs: #{DRRoom.dead_npcs}***" if UserVars.combat_trainer_debug

    check_skinning()

    fput "loot"
    kill_offensive_spells()
end

def check_skinning()
    if UserVars.skinning["skin"]
        arranges = 0
        arrange_message = UserVars.skinning["arrange_all"] ? "arrange all for skin" : "arrange for skin"
        while arranges < UserVars.skinning["arrange_count"]
            arranges += 1
            attempt = fput arrange_message, "You begin to arrange", "You continue arranging", "You make a mistake", "You complete arranging", "That creature cannot", "That has already been arranged", "Arrange what", "cannot be skinned"
            break if attempt == "You complete arranging"
            break if attempt == "That has already been arranged"
            return if attempt == "Arrange what" # Skip skinning too
            return if attempt == "cannot be skinned" # Skip skinning too
            if attempt == "That creature cannot"
                arranges = 0
                arrange_message = UserVars.skinning["arrange_all"] ? "arrange all" : "arrange"
            end
            waitrt?
        end

        fput "skin"
        waitrt?
    end
end

def kill_offensive_spells()
    fput "rel spel" if DRSpells.prep_spell && (UserVars.offensive_spells.select{ |data| data["name"] == DRSpells.prep_spell }.length > 0)
end

def check_weapon(weapon_skill, weapon_name)
    stow_weapons()

    if UserVars.worn_weapons.include? weapon_name
        while checkright == nil
            fput "remove #{weapon_name}"
        end
    elsif !weapon_name.empty?
        attempt = fput "wield #{weapon_name}", "Wield what", "You're already", "right hand and balancing", "right hand\."
        if attempt == "You're already"
            attempt = reget(10, "right hand and balancing", "right hand\.").last
        end

        if attempt == "Wield what"
            echo "***Could not find weapon #{weapon_name}. Please update your config script.***"
            stop_script "combat-trainer"
        elsif attempt =~ /right hand and balancing/ && !@twohanded_skills.include?(weapon_skill)
            echo "***Swapping 2Hander to 1Hander***" if UserVars.combat_trainer_debug
            fput "swap #{weapon_name}"
        elsif attempt =~ /right hand\./ && @twohanded_skills.include?(weapon_skill)
            echo "***Swapping 1Hander to 2Hander***" if UserVars.combat_trainer_debug
            fput "swap #{weapon_name}"
        end
    end
    if weapon_skill == "Offhand Weapon"
        fput "swap"
    end
end

def check_fatigue()
    while DRStats.fatigue < UserVars.fatigue_regen_threshold
        echo "***Fatigue: #{DRStats.fatigue}***" if UserVars.combat_trainer_debug
        echo "***Target: #{UserVars.fatigue_regen_threshold}***" if UserVars.combat_trainer_debug

        fput UserVars.fatigue_regen_action
        waitrt?
    end
end

# Call this last to avoid the need for forward declarations
main()