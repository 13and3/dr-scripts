=begin
    Authored by Sheltim and Seped, suggestions and contributions are welcome: https://github.com/rpherbig/dr-combat-trainer

    This script will train a pre-configured list of weapon skills, starting with whichever has the lowest amount of field experience.

    Before running this script for the first time:
    * Download scripts "drmonitor" and "spellmonitor". These will be automatically run if they are not already running.
    * Set UserVars.combat_trainer_setup["YourCharacterNameHere"] to the name of your configuration script for this character.
        * For example, run ;e UserVars.combat_trainer_setup = {"YourCharacterName" => "YourSetupScriptName"}
        * You can add support for additional characters with ;e UserVars.combat_trainer_setup["CharacterName"] = "ScriptName"
        * To confirm correct setup, you can display each character's configuration script with ;e echo UserVars.combat_trainer_setup
        * Download "combat-trainer-setup" for an example configuration script.
    * If you wish to turn on debug mode, set UserVars.combat_trainer_debug to "true".
=end

# TODO: Watch for 'already advancing'/'not in melee' and set a waitfor "closes to melee"
# You turn to face a grass eel. You aren't close enough to attack. What do you want to advance towards?; You aren't close enough to attack. You begin to advance on a grass eel. ; You aren't close enough to attack. You are already advancing on a grass eel.

# TODO: Detect low vitality and/or bleeds (retreat, exit room, quit?)

# TODO: Handle a nonexistent worn weapon (similar to what is done for wielding)

# TODO: Maintain berserks, forms?

# TODO: Train expertise, stealth?

# TODO: alternate skinning options (skin only for skill not loot)

# TODO: defense training (switch to a given stance and bob until the skill caps)

def main
    if !UserVars.combat_trainer_setup || !UserVars.combat_trainer_setup[checkname]
        echo "*** Please configure your setup script."
        echo '*** ;e UserVars.combat_trainer_setup = {"YourCharacterName" => "YourSetupScriptName"}'
        echo '*** Once you have additional characters add them with ;e UserVars.combat_trainer_setup["CharacterName"] = "ScriptName"'
    end

    # Configure UserVars
    start_script UserVars.combat_trainer_setup[checkname]
    while running?(UserVars.combat_trainer_setup[checkname])

    end

    # Run helper scripts
    ["drinfomon", "spellmonitor" ].each do |script_name|
        if !running?(script_name)
            start_script script_name
            pause 2
        end
    end

    @aim_skills = [ "Bow", "Slings", "Crossbow", ]
    @thrown_skills = [ "Heavy Thrown", "Light Thrown", ]
    @twohanded_skills = [ "Twohanded Blunt", "Twohanded Edged", ]

    # Cache the user var so we can modify it later if needed
    @weapon_list = UserVars.weapon_training

    while true do
        event_loop
    end
end

def event_loop
    weapon_skill, weapon_name = next_to_train

    if(DRSkill.getxp(weapon_skill).to_i >= 34)
        echo "***Skills capped***" if UserVars.combat_trainer_debug
        pause_script
        return
    end

    if(DRRoom.npcs.length == 0 && DRRoom.dead_npcs.length == 0)
        check_spells()
        echo "***No enemies, sleeping***" if UserVars.combat_trainer_debug
        Thread.new {
            sleep 5
            unpause_script "combat-trainer"
        }
        pause_script
        return
    end

    echo "***Attempting to train #{weapon_skill}***" if UserVars.combat_trainer_debug

    check_weapon(weapon_skill, weapon_name)

    target = [34, DRSkill.getxp(weapon_skill).to_i + 3].min
    counter = 0

    echo "***No stance set for #{UserVars.stances[weapon_skill]}***" if UserVars.combat_trainer_debug && UserVars.stances[weapon_skill].empty?
    fput "stance set #{UserVars.stances[weapon_skill]}" if !UserVars.stances[weapon_skill].empty?

    while DRSkill.getxp(weapon_skill).to_i < target
        echo "***#{weapon_skill}: #{DRSkill.getxp(weapon_skill).to_i}***" if UserVars.combat_trainer_debug
        echo "***Target: #{target}***" if UserVars.combat_trainer_debug

        break if counter >= 10
        break if DRRoom.npcs.length == 0 && DRRoom.dead_npcs.length == 0
        check_dead_npcs()
        cast_spell = check_spells()
        check_offensive_spells() unless cast_spell || DRRoom.npcs.length == 0
        check_fatigue()
        stow_ammo()

        counter += 1

        if @aim_skills.include? weapon_skill
            fput "load", "You reach into", "already loaded"
            waitrt?
            fput "aim", "You begin to target", "You are already", "There is nothing else"
            UserVars.aim_fillers[weapon_skill].each{|item|
                fput item
                waitrt?
                check_spells()
            }
            fput "shoot", "isn't loaded", "There is nothing", "But your"
            waitrt?
        elsif @thrown_skills.include? weapon_skill
            fput "lob"
            waitrt?
            fput "get #{weapon_name}", "You are already holding", "You pick up"
        else
            fput "attack"
            waitrt?
        end
    end

    if counter == 10
        echo "***Weapon appears to be learning slowly, consider removing it from the training list***"
    end
end

def next_to_train
    @weapon_list.sort_by { |skill, weapon| DRSkill.getxp(skill).to_i }.first
end

def stow_weapons
    while checkright != nil
        if UserVars.worn_weapons.include? checkright
            fput "wear #{checkright}"
        else
            fput "stow right"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end

    while checkleft != nil
        if UserVars.worn_weapons.include? checkleft
            fput "wear #{checkleft}"
        else
            fput "stow left"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end
end

def check_offensive_spells
    return if DRSpells.prep_spell
    data = UserVars.offensive_spells.sort_by { |data| DRSkill.getxp(data["skill"]).to_i }.first
    return unless data
    return if DRSkill.getxp(data["skill"]).to_i >= 34
    command = data["skill"] == "Debilitation" ? "pre" : "tar"
    fput "#{command} #{data["abbrev"]} #{data["mana"]}"
    @charges = data["cambrinth"].dup if data["cambrinth"]
end

def check_spells
    if DRSpells.prep_spell
        if @charges
            if @charges.length > 0
                fput "charge #{UserVars.cambrinth} #{@charges.pop}"
                waitrt?
                return false
            else
                fput "invoke #{UserVars.cambrinth}"
                @charges = nil
                return false
            end
        end
        if DRSpells.prep_time <= 0
            fput "cast"
            return true
        end
        return false
    end

    UserVars.spells.each {|name, data|
        if !DRSpells.active_spells[name] || (DRSpells.active_spells[name] <= data["recast"])
            fput "prepare #{data["abbrev"]} #{data["mana"]}"
            @charges = data["cambrinth"].dup if data["cambrinth"]
            return true
        end
    }
    return false
end

def stow_ammo
    UserVars.ammo.each {|item|
        DRRoom.room_objs.grep(/#{item}/).each {|item| fput "stow #{item}"}
    }
end

def check_dead_npcs()
    return if DRRoom.dead_npcs.length < 1

    echo "***Found dead NPCs: #{DRRoom.dead_npcs}***" if UserVars.combat_trainer_debug

    if UserVars.skinning["skin"]
        arranges = 0
        arrange_message = UserVars.skinning["arrange_all"] ? "arrange all for skin" : "arrange for skin"
        while arranges < UserVars.skinning["arrange_count"]
            arranges += 1
            attempt = fput arrange_message, "You begin to arrange", "You continue arranging", "You make a mistake", "You complete arranging", "That creature cannot", "That has already been arranged", "Arrange what", "cannot be skinned"
            break if attempt == "You complete arranging"
            break if attempt == "That has already been arranged"
            break if attempt == "Arrange what"
            break if attempt == "cannot be skinned"
            if attempt == "That creature cannot"
                arranges = 0
                arrange_message = UserVars.skinning["arrange_all"] ? "arrange all" : "arrange"
            end
            waitrt?
        end

        fput "skin"
        waitrt?
    end

    fput "loot"
    fput "rel spel" if DRSpells.prep_spell && (UserVars.offensive_spells.select{ |data| data["name"] == DRSpells.prep_spell }.length > 0)
end

def check_weapon(weapon_skill, weapon_name)
    stow_weapons
    
    if UserVars.worn_weapons.include? weapon_name
        fput "remove #{weapon_name}"
    elsif !weapon_name.empty?
        attempt = fput "wield #{weapon_name}", "Wield what", "You're already", "right hand and balancing", "right hand\."
        if attempt == "You're already"
            attempt = reget(10, "right hand and balancing", "right hand.").last
        end
        
        if attempt == "Wield what"
            echo "***Could not find weapon #{weapon_name}; removing #{weapon_skill} from the training list***"
            @weapon_list.delete(weapon_skill)
        elsif attempt =~ /right hand and balancing/ && !@twohanded_skills.include?(weapon_skill)
            echo "***Swapping 2Hander to 1Hander***" if UserVars.combat_trainer_debug
            fput "swap #{weapon_name}"
        elsif attempt =~ /right hand\./ && @twohanded_skills.include?(weapon_skill)
            echo "***Swapping 1Hander to 2Hander***" if UserVars.combat_trainer_debug
            fput "swap #{weapon_name}"
        end
    end
end

def check_fatigue()
    while DRStats.fatigue < UserVars.fatigue_regen_threshold
        echo "***Fatigue: #{DRStats.fatigue}***" if UserVars.combat_trainer_debug
        echo "***Target: #{UserVars.fatigue_regen_threshold}***" if UserVars.combat_trainer_debug

        fput UserVars.fatigue_regen_action
        waitrt?
    end
end

# Call this last to avoid the need for forward declarations
main()