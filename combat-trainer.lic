=begin
    Authored by Sheltim and Seped, suggestions and contributions are welcome: https://github.com/rpherbig/dr-combat-trainer
    
    This script will train a pre-configured list of weapon skills, prioritizing whichever has the lowest amount of field experience.

    Before running this script for the first time:
    * Download scripts "drmonitor" and "spellmonitor". These will be automatically run if they are not already running.
    * Set UserVars.combat_trainer_setup to the name of your configuration file. Download "combat-trainer-setup" for an example.
    * If you wish to turn on debug mode, set UserVars.combat_trainer_debug to "true".
=end

# Configure UserVars
start_script UserVars.combat_trainer_setup
while running?(UserVars.combat_trainer_setup)

end

# Run helper scripts
["drinfomon", "spellmonitor" ].each do |script_name|
    if !running?(script_name)
        start_script script_name
    end
end

@aim_skills = {
    "Bow" => true,
    "Slings" => true,
    "Crossbow" => true,
}

@thrown_skills = {
    "Heavy Thrown" => true,
    "Light Thrown" => true,
}

# Cache the user var so we can modify it later if needed
@weapon_list = UserVars.weapon_training
@custom_stow = nil
 
def next_to_train
    @weapon_list.sort_by { |skill, weapon| DRSkill.getxp(skill).to_i }.first
end

def stow_weapons
    if @custom_stow
        fput @custom_stow
            stow_weapons if checkright != nil
        @custom_stow = nil
    end
    if checkleft != nil
        fput "stow left"
    end

    if checkright != nil
        fput "stow right"
    end
end

def check_spells
    if DRSpells.prep_spell
        fput "cast" if DRSpells.prep_time <= 0
        return
    end

    UserVars.spells.each {|name, data|
        if !DRSpells.active_spells[name] || (DRSpells.active_spells[name] <= data["recast"])
            fput "prepare #{data["abbrev"]} #{data["mana"]}"
            break
        end
    }
end


def stow_ammo
    UserVars.ammo.each {|item|
        DRRoom.room_objs.grep(/#{item}/).each {|item| fput "stow #{item}"}
    }
end

def check_dead_npcs()
    return if !DRRoom.dead_npcs.length > 0
    
    if UserVars.skinning["skin"]
        arranges = 0
        arrange_message = "arrange for skin"
        while arranges < UserVars.skinning["arrange_count"]
            arranges += 1
            attempt = fput arrange_message, "You begin to arrange", "You continue arranging", "You make a mistake", "You complete arranging", "That creature cannot", "That has already been arranged", "Arrange what"
            break if attempt == "You complete arranging"
            break if attempt == "That has already been arranged"
            break if attempt == "Arrange what"
            if attempt == "That creature cannot"
                arranges = 0
                arrange_message = "arrange"
            end
            waitrt?
        end

        fput "skin"
        waitrt?
    end
    
    fput "loot"
end

def check_weapon(weapon_skill, weapon_name)
    if weapon_name.empty?
        stow_weapons
    else
        if !checkright(weapon_name)
            stow_weapons
        end

        # TODO: Handle swappable weapons
        # You draw out your bastard sword from the backpack, gripping it firmly in your right hand and balancing with your left.
        # You draw out your bastard sword from the backpack, gripping it firmly in your right hand.
        if UserVars.custom_wield[weapon_skill]
            fput UserVars.custom_wield[weapon_skill]["wield"]
            @custom_stow = UserVars.custom_wield[weapon_skill]["stow"]
        else
	        attempt = fput "wield #{weapon_name}", "Wield what?", "You're already", "You draw out"        
    	    if attempt == "Wield what?"
	            echo "***Could not find weapon #{weapon_name}; removing #{weapon_skill} from the training list***"
	            @weapon_list.delete(weapon_skill)
	        end
    	end
    end
end

def check_fatigue()
    # https://elanthipedia.play.net/mediawiki/index.php/Combat_maneuvers
    while DRStats.fatigue < 90
        echo "***Fatigue is low: #{DRStats.fatigue}***" if UserVars.combat_trainer_debug

        # Bob trains Tactics, but does no damage. Feint does damage, but without training another skill.
        fput "bob"
        waitrt?
    end
end

# TODO: Rename to something more descriptivess
def main_loop
    weapon_skill, weapon_name = next_to_train

    echo "***Attempting to train #{weapon_skill}***" if UserVars.combat_trainer_debug

    check_weapon(weapon_skill, weapon_name)

    target = [34, DRSkill.getxp(weapon_skill).to_i + 2].min
    counter = 0

    echo "***No stance set for #{UserVars.stances[weapon_skill]}***" if UserVars.combat_trainer_debug && UserVars.stances[weapon_skill].empty?
    fput "stance set #{UserVars.stances[weapon_skill]}" if !UserVars.stances[weapon_skill].empty?

    while DRSkill.getxp(weapon_skill).to_i < target
        echo "***#{weapon_skill}: #{DRSkill.getxp(weapon_skill).to_i}***" if UserVars.combat_trainer_debug
        echo "***Target: #{target}***" if UserVars.combat_trainer_debug

        break if counter >= 10
        check_dead_npcs()
        check_spells()
        check_fatigue()
        
        counter += 1
 
        if @aim_skills[weapon_skill]
            fput "load", "You reach into", "already loaded"
            waitrt?
            fput "aim", "You begin to target", "You are already"
            UserVars.aim_fillers[weapon_skill].each{|item|
                fput item
                waitrt?
            }
            fput "shoot", "isn't loaded"
            waitrt?
        elsif @thrown_skills[weapon_skill]
            fput "lob"
            waitrt?
            fput "get #{weapon_name}", "You are already holding", "You pick up"
        else
            fput "attack"
            waitrt?
        end
    end

    if counter == 10
        echo "***Weapon appears to be learning slowly, consider removing it from the training list***"
    end

    stow_ammo()
    # TODO: Maintain berserks, forms?
    # TODO: Train expertise, stealth?
    # TODO: Handle running out of targets
    # TODO: Handle engaging a new target (facing and/or moving into melee)
end

while true do
    main_loop
end