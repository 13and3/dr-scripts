=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Mines in defined mining areas, once per room.
=end

custom_require.call(%w(common common-money common-travel drinfomon))

class MiningBuddy
  include DRC
  include DRCT
  include DRCM

  def initialize
    setup

    ensure_copper_on_hand(10_000)

    if @use_packet && 'I could not' == bput('tap second packet', 'You tap', 'I could not')
      walk_to(8775)
      fput('order 14')
      fput('order 14')
      fput('stow my packet')
      fput('get my second packet')
      fput('stow my packet')
    end

    get_mining_tool
    @areas.each { |area_name| mine_rooms(@area_list[area_name]) }
    get_mining_tool
    store_mining_tool
  end

  def setup
    settings = get_settings
    @area_list = settings.mining_buddy_rooms
    @areas = settings.mining_rooms
    @skip_populated = settings.mining_skip_populated
    @mine_every_room = settings.mining_buddy_mine_every_room(false)
    @vein_list = settings.mining_buddy_vein_list([])
    @mining_implement = settings.mine_implement('shovel')
    @use_packet = settings.mine_use_packet
    echo("#{@areas}:#{@vein_list}") if UserVars.mining_debug
  end

  def get_mining_tool
    case bput("get my #{@mining_implement}", 'You get', 'You pull at it, but the ties prevent you', 'You are already')
    when 'You pull at it, but the ties prevent you'
      bput("untie my #{@mining_implement}", 'You remove')
      @was_tied = true
    end
  end

  def store_mining_tool
    waitrt?
    if @was_tied
      fput("tie my #{@mining_implement} to belt")
    else
      fput("stow my #{@mining_implement}")
    end
  end

  def check_repair
    result = bput("anal my #{@mining_implement}", 'practically in mint', 'pristine condition', 'in good condition', 'crafting tool and it is rather scuffed up', 'Roundtime')
    waitrt?
    if /roundtime/i =~ result
      store_mining_tool
      walk_to(19_093)
      get_mining_tool
      fput('give catrox')
      fput('give catrox')
      pause 10 until 'should be ready by now' == bput('look at my ticket', 'should be ready by now', 'Looking at the')
      fput('give catrox')
      store_mining_tool
    end
  end

  def mine_rooms(rooms)
    rooms.each do |room|
      wait_for_script_to_complete('safe-room') if checkbleeding
      check_repair if mine?(room)
    end
  end

  def mine?(room)
    waitrt?
    walk_to(room)
    unless DRRoom.pcs.empty?
      if @skip_populated
        return false
      else
        fput('wave')
      end
    end

    unless @mine_every_room
      bput('prospect', 'Roundtime')
      results = reget(20, 'can be mined here')

      echo(results) if UserVars.mining_debug

      return false unless results.empty?
      return false unless results
                          .each_with_object([]) { |line, array| array << line.match(/You are certain that (.*) can be mined here/i)[1] }
                          .reject(&:nil?)
                          .map(&:downcase)
                          .any? { |vein| @vein_list.map(&:downcase).include?(vein) }
    end

    waitrt?

    wait_for_script_to_complete('mine')
    true
  end
end

MiningBuddy.new
