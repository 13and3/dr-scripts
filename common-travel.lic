# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  A large set of helper functions for common actions shared by many scripts.
=end

custom_require(%w(common drinfomon))

module DRCT
  def walk_to(target_room, restart_on_fail = true)
    return if target_room.nil?
    room_num = target_room.to_i
    return if room_num == Room.current.id.to_i
    DRC.fix_standing

    if Room.current.id.nil?
      echo "In an unknown room, manually attempting to navigate to #{room_num}"
      rooms = Map.list.select { |room| room.description.include?(XMLData.room_description.strip) && room.title.include?(XMLData.room_title) }
      if rooms.empty? || rooms.length > 1
        echo 'failed to find a matching room'
        return
      end
      room = rooms.first
      return if room_num == room.id
      if room.wayto[room_num.to_s]
        move room.wayto[room_num.to_s]
        return
      end
      path = Map.findpath(room, Map[room_num])
      move room.wayto[path.first.to_s]
      walk_to(room_num)
      return
    end

    retreat
    start_script 'go2', [room_num.to_s]

    timer = Time.now
    prev_room = XMLData.room_description + XMLData.room_title
    while Script.running?('go2')
      if (Time.now - timer) > 90
        kill_script('go2')
        pause 0.5 while Script.running?('go2')
        timer = Time.now

        break unless restart_on_fail

        retreat
        start_script('go2', [room_num.to_s])
      end
      if Script.running?('escort') || Script.running?('bescort') || (XMLData.room_description + XMLData.room_title) != prev_room
        timer = Time.now
      end
      prev_room = XMLData.room_description + XMLData.room_title
      pause 0.5
    end

    # Consider just returning this boolean and letting callers decide what to do on a failed move.
    if room_num != Room.current.id.to_i && restart_on_fail
      echo "Failed to navigate to room #{room_num}, attempting again"
      walk_to room_num
    end
    room_num == Room.current.id.to_i
  end
  module_function :walk_to

  def retreat
    return if DRRoom.npcs.empty?

    escape_messages = ['You are already as far away as you can get', 'You retreat from combat', 'You sneak back out of combat']
    until escape_messages.include?(DRC.bput('retreat', *(escape_messages + ['retreat', 'You try to back ', 'sneak', 'grip remains solid', 'You must stand first', 'grip on you', 'You stop advancing'])))
      DRC.fix_standing
    end
  end
  module_function :retreat

  def find_empty_room(search_rooms, idle_room, predicate = proc { true })
    loop do
      search_rooms.each do |room_id|
        walk_to(room_id)
        return true if DRRoom.pcs.empty? && predicate.call
      end

      if idle_room
        walk_to(idle_room)
        echo '***Failed to find an empty room, pausing***'
        pause 30
      else
        echo '***Failed to find an empty room, stopping the search***'
        return false
      end
    end
  end
  module_function :find_empty_room
end
