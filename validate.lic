
class DRYamlValidator
  def initialize
    arg_definitions = [[
      { name: 'verbose', regex: /verbose/i, optional: true }
    ]]

    args = parse_args(arg_definitions, true)

    settings = get_settings(args.flex)

    setup_data

    assertions = DRYamlValidator.instance_methods.select { |x| x.to_s =~ /^assert_that_/ && DRYamlValidator.instance_method(x).arity == 1 }

    echo("Checking #{assertions.size} different potential errors")
    assertions.each do |symbol|
      echo(symbol.to_s) if args.verbose
      send(symbol, settings)
    end
    echo('All done!')
  end

  def assert_that_root_keys_exist(settings)
    %w(weapon_training crossing_training hunting_info gear gear_sets).each do |key|
      warn("You are missing a root key that is probably needed: #{key}") unless settings[key]
    end
  end

  def assert_that_weapon_training_has_skills(settings)
    if settings.weapon_training && settings.weapon_training.empty?
      warn('You have no weapons configured in weapon_training: this will likely cause problems.')
    end
  end

  def assert_that_weapon_training_are_skills(settings)
    return unless settings.weapon_training
    settings.weapon_training.keys.each do |skill_name|
      error("Invalid weapon_training: skill name '#{skill_name}'") unless @valid_weapon_skills.include?(skill_name)
    end
  end

  def assert_that_duration_exists_if_not_hunting_priority(settings)
    return if settings.training_manager_hunting_priority
    return unless settings.hunting_info
    settings.hunting_info.each do |info|
      next if info['duration']
      error("No duration: found for '#{info[:zone]}'")
    end
  end

  def assert_that_stop_on_exists_if_hunting_priority(settings)
    return unless settings.training_manager_hunting_priority && settings.hunting_info
    settings.hunting_info.each do |info|
      next if info['stop_on']
      error("No stop_on: skills found for '#{info[:zone]}'")
    end
  end

  def assert_that_stop_on_skills_are_valid(settings)
    return unless settings.hunting_info
    settings.hunting_info.each do |info|
      next unless info['stop_on']
      next if (info['stop_on'] - @all_skills).empty?
      error("stop_on: skills not recognized as valid skills '#{(info['stop_on'] - @all_skills)}'")
    end
  end

  def assert_that_gear_sets_not_nil(settings)
    return unless settings.gear_sets
    settings.gear_sets.each do |name, items|
      next if items
      error("gear_set: '#{name}' is nil, an empty gear set should be #{name}: []")
    end
  end

  def assert_that_gear_sets_has_standard(settings)
    return unless settings.gear_sets
    unless settings.gear_sets['standard']
      warn('a \'standard\' gear_set: entry is required for combat-trainer to function.')
    end
  end

  def assert_that_gear_sets_has_stealing_if_training_thievery(settings)
    return unless settings.gear_sets
    return unless settings.crossing_training.include?('Thievery')
    unless settings.gear_sets['stealing']
      warn('a \'stealing\' gear_set: entry is required when training Thievery.')
    end
  end

  def assert_that_not_feinting_with_offhand(settings)
    return unless settings.dance_skill == 'Offhand Weapon'
    if (settings.dance_actions || []).grep(/feint/i) ||
       (settings.dance_actions_stealth || []).grep(/feint/i)
      error('Feint in your actions list will cause an error when Offhand Weapon is your dance skill')
    end
  end

  def assert_that_no_research_only_skills_if_research_is_off(settings)
    return if settings.use_research
    return unless settings.crossing_training
    research_only = settings.crossing_training.select { |skill| ['Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic'].include?(skill) }
    research_only.each { |skill| error("You have a research only skill '#{skill}' listed in crossing_training but research is disabled") }
  end

  def assert_that_crossing_training_skills_are_valid(settings)
    return unless settings.crossing_training
    settings.crossing_training.each do |skill|
      error("Invalid crossing_training: skill name '#{skill_name}'") unless @all_skills.include?(skill)
    end
  end

  def assert_that_gear_sets_contain_described_items(settings)
    return unless settings.gear_sets
    settings.gear_sets.values.flatten.uniq.each do |item|
      next if settings.gear.find { |data| item =~ /#{data[:adjective]}\s*#{data[:name]}/i }
      error("Item in gear_set could not be found in gear listings. '#{item}'")
    end
  end

  private

  def warn(message)
    echo("WARNING:< #{message}  >")
  end

  def error(message)
    echo("ERROR:< #{message}  >")
  end

  def setup_data
    @valid_weapon_skills = ['Offhand Weapon', 'Brawling', 'Crossbow', 'Slings', 'Polearms', 'Bow', 'Large Blunt',
                            'Twohanded Blunt', 'Heavy Thrown', 'Light Thrown', 'Staves', 'Small Blunt', 'Small Edged',
                            'Large Edged', 'Twohanded Edged']

    @all_skills = ['Scouting', 'Evasion', 'Athletics', 'Stealth', 'Perception', 'Locksmithing', 'First Aid', 'Skinning',
                   'Outdoorsmanship', 'Thievery', 'Backstab', 'Thanatology', 'Forging', 'Outfitting', 'Engineering',
                   'Alchemy', 'Scholarship', 'Appraisal', 'Tactics', 'Mechanical Lore', 'Performance', 'Empathy',
                   'Enchanting', 'Trading', 'Attunement', 'Arcana', 'Targeted Magic', 'Debilitation', 'Warding',
                   'Augmentation', 'Utility', 'Sorcery', 'Summoning', 'Astrology', 'Theurgy', 'Inner Magic',
                   'Inner Fire', 'Melee Mastery', 'Missile Mastery', 'Parry Ability', 'Small Edged', 'Large Edged',
                   'Twohanded Edged', 'Twohanded Blunt', 'Small Blunt', 'Large Blunt', 'Bow', 'Slings', 'Crossbow',
                   'Polearms', 'Heavy Thrown', 'Offhand Weapon', 'Brawling', 'Light Thrown', 'Staves', 'Expertise',
                   'Defending', 'Shield Usage', 'Light Armor', 'Chain Armor', 'Brigandine', 'Plate Armor',
                   'Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic']
  end
end

DRYamlValidator.new
