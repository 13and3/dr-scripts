=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#new-character
=end

custom_require.call(%w(common common-items common-travel equipmanager))

class NewCharacter
  include DRC
  include DRCI
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'store', regex: /store/i, optional: true, description: 'Set up reasonable \'store\' values' }
      ]
    ]

    args = parse_args(arg_definitions)

    settings = get_settings

    check_skinning(settings)
    check_gem_pouches(settings)
    configure_store(settings) if args.store
    # check_locksmithing(settings)
    check_scholarship(settings)
    check_cambrinth(settings)
    # check_crafting(settings)
    check_gear(settings)

    # TODO: Adjust items to be in the right slot (e.g. shield, bundle)?
    # TODO: toggle expbrief ?
  end

  def check_gear(_settings)
    EquipmentManager.instance.refresh
    missing = EquipmentManager.instance.items

    echo '***ARMOR***'
    missing.reject! { |item| exists?(item.short_name) }
    missing.each do |item|
      buy_item(7904, item.short_name)
      EquipmentManager.instance.empty_hands
    end

    echo '***WEAPONS***'
    missing.reject! { |item| exists?(item.short_name) }
    missing.each do |item|
      buy_item(8263, item.short_name)
      EquipmentManager.instance.empty_hands
    end

    missing.reject! { |item| exists?(item.short_name) }
    missing.each { |item| echo "***Failed to purchase #{item.short_name}***" }
  end

  def configure_store(settings)
    fput('store gems in my pouch')
    fput('store default in my pack')
    fput("store boxes in my #{settings.picking_box_source}") if settings.picking_box_source
  end

  # def buy(item, room)
  #   # TODO: Tap item to check for existence

  #   echo "  #{item} (;go2 #{room})"
  # end

  def check_skinning(settings)
    echo '***SKINNING***'
    return unless settings.skinning
    return unless settings.skinning['skin']

    description = 'skinning knife'
    unless exists?(description)
      buy_item(6206, description)
      bput("wear my #{description}", 'You attach')
    end

    description = 'bundling rope'
    unless exists?(description)
      walk_to(8266)
      bput("ask falken for #{description}", 'hands you')
      bput("stow my #{description}", 'You put')
    end
  end

  def check_gem_pouches(settings)
    echo '***GEM POUCHES***'

    description = "#{settings.gem_pouch_adjective} pouch"
    unless wearing?(description)
      walk_to(4652)
      bput("ask appraiser for #{description}", 'hands you')
      bput("wear my #{description}", 'You attach')
    end

    container = settings.spare_gem_pouch_container
    return if container.nil?

    unless inside?(description, container)
      walk_to(4652)
      bput("ask appraiser for #{description}", 'hands you')
      bput("put my #{description} in my #{container}", 'You put')
    end
  end

  def wearing?(description)
    result = bput("tap my #{description}", 'You tap .*', 'I could not find')
    result =~ /wearing/
  end

  def inside?(description, container)
    result = bput("tap my #{description} in my #{container}", 'You tap .*', 'I could not find')
    result =~ /inside/
  end

  def exists?(description)
    # You tap
    result = bput("tap my #{description}", 'You tap .*', 'I could not find')
    result =~ /You tap/
  end

  # def check_locksmithing(settings)
  #   return unless settings.crossing_training.include?('Locksmithing')
  #   return unless settings.use_lockpick_ring

  #   buy('lockpick ring and lockpicks', 19_125)
  # end

  def check_scholarship(settings)
    echo '***SCHOLARSHIP***'
    return unless settings.crossing_training.include?('Scholarship')

    description = 'black book'
    unless exists?(description)
      order_item(8771, 1)
      bput("stow my #{description}", 'You put')
    end
  end

  def check_cambrinth(settings)
    echo '***CAMBRINTH***'
    return if DRStats.barbarian? || DRStats.thief? || DRStats.commoner? || DRStats.trader?

    description = settings.cambrinth
    return if description.nil?

    unless exists?(description)
      buy_item(19_152, description)

      if settings.stored_cambrinth
        bput("stow my #{description}", 'You put')
      else
        bput("wear my #{description}", 'You ')
      end
    end
  end

  # def check_crafting(settings)
  #   if settings.crossing_training.include?('Engineering')
  #     # Uses Shaping
  #     buy('carving knife', 'TODO')
  #     buy('shaper', 'TODO')
  #     buy('drawknife', 'TODO')
  #     buy('rasp', 'TODO')

  #     buy('engineering logbook', 'TODO')
  #     buy('apprentice shaping book', 'TODO')
  #   end

  #   if settings.crossing_training.include?('Forging')
  #     # Uses Blacksmithing
  #     buy('ball-peen hammer', 'TODO')
  #     buy('tongs', 'TODO')
  #     buy('bellows', 'TODO')
  #     buy('shovel', 'TODO')

  #     if settings.train_workorders.include?('Blacksmithing')
  #       buy('forging logbook', 'TODO')
  #       buy('apprentice blacksmithing book', 'TODO')
  #     end
  #   end

  #   if settings.crossing_training.include?('Outfitting')
  #     # Uses Tailoring
  #     buy('knitting needle', 'TODO')

  #     if settings.train_workorders.include?('Tailoring')
  #       buy('outfitting logbook', 'TODO')
  #       buy('apprentice tailoring book', 'TODO')
  #     end
  #   end
  # end
end

NewCharacter.new
