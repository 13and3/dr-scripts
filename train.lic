=begin
    Authored by Sheltim. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will train a given attribute. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download script "common"

    Arguments are the name of the attribute to train:
    * ;train # No arguments: nothing happens
    * ;train st # "st" is ambiguious between stamina and strength: nothing happens
    * ;train sta w w # Trains stamina once and wisdom twice
=end

class CrossingTrain
  include DRC

  def main
    setup

    to_train = parse_args(variable[0])
    echo "to_train: #{to_train}"
    return unless to_train.count > 0
    return unless can_train?(to_train)

    start_room = Room.current.id
    echo "Starting room: #{start_room}"

    copper = determine_cost(to_train)
    withdraw(copper)

    to_train.each do |attribute, count|
      train(@attributes[attribute], count)
    end

    echo "Returning to start room: #{start_room}"
    walk_to start_room
  end

  def withdraw(copper)
    walk_to 1900

    convert2plats(copper)
      .split(',')
      .collect(&:strip)
      .each { |amount| fput "withdraw #{amount}" }
  end

  def determine_cost(to_train)
    # The cost is 6 copper per starting point in the attribute
    # For example, to go from 21->22 = 21 * 6 = 126 copper
    # Using the triangular number formula, the sum of integers from X to Y is: (Y+X)(Y-X+1)/2
    # However, the copper cost is exclusive of the final value so calculate the sum from X to (Y-1) 

    copper_cost = 0
    to_train.each do |attribute, count|
      current = @attributes[attribute]['current']
      target = current + count - 1

      sum = (target + current) * (target - current + 1) / 2
      copper_cost += sum * 6
    end

    copper_cost
  end

  def can_train?(to_train)
    tdp_cost = 0
    to_train.each do |attribute, count|
      target = @attributes[attribute]['current'] + count
      project_result = bput("tdp project #{attribute} #{target}", 'It will cost you .* TDPs to reach')
      tdp_cost += project_result.match(/It will cost you (.*) TDPs to reach/).to_a[1].to_i
    end

    DRStats.tdps >= tdp_cost
  end

  def train(info, count)
    walk_to info['outer_room']
    fput "go #{info['inner_room']}" unless info['inner_room'].empty?
    count.times do
      fput 'train'
      fput 'train'
    end
    fput 'out'
  end

  def parse_args(args)
    return[] unless args

    args
      .split(' ')
      .map(&:downcase)
      .map { |i| determine_matches(i) }
      .flatten
      .each_with_object(Hash.new(0)) { |name, counts| counts[name] += 1 }
  end

  def determine_matches(input)
    matches = @attributes.keys.select { |a| a =~ /^#{input}/ }

    return matches if matches.count == 1

    echo "Unable to match '#{input}' to a single attribute (candidates are #{matches})"
    []
  end

  def setup
    # Run helper scripts
    %w(common).each do |script_name|
      unless running?(script_name)
        start_script script_name
        pause 0.5
      end
    end

    @attributes = { 'strength' => { 'outer_room' => 7903, 'inner_room' => 'room', 'current' => DRStats.strength },
                    'agility' => { 'outer_room' => 891, 'inner_room' => 'agility', 'current' => DRStats.agility },
                    'discipline' => { 'outer_room' => 7902, 'inner_room' => 'hovel', 'current' => DRStats.discipline },
                    'intelligence' => { 'outer_room' => 977, 'inner_room' => '', 'current' => DRStats.intelligence },
                    'reflex' => { 'outer_room' => 954, 'inner_room' => 'academy', 'current' => DRStats.reflex },
                    'charisma' => { 'outer_room' => 902, 'inner_room' => 'cottage', 'current' => DRStats.charisma },
                    'wisdom' => { 'outer_room' => 978, 'inner_room' => '', 'current' => DRStats.wisdom },
                    'stamina' => { 'outer_room' => 766, 'inner_room' => 'structure', 'current' => DRStats.stamina }
    }
  end
end

# Call this last to avoid the need for forward declarations
CrossingTrain.new.main
