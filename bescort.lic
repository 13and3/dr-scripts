
custom_require(%w(drinfomon))

class Bescort
  include DRC

  def initialize(area, mode)
    case area
    when /wilds/i
      wilds(mode)
    when /northern_trade/i
      northern_trade(mode)
    when /faldesu/i
      faldesu(mode)
    end
  end

  private

  def manual_go2(goal_room)
    path = Map.findpath(Room.current.id, Map[goal_room])
    path.each { |step| move Room.current.wayto[step.to_s] }
  end

  def search_path(pathname, visible = true, movetype = 'go')
    if visible
      until DRRoom.room_objs.find { |obj| obj.include?(pathname) }
        fput('search')
        pause
        waitrt?
      end
      move "#{movetype} #{pathname}"
    else
      fput('search')
      pause
      waitrt?
      until move "#{movetype} #{pathname}"
        fput('search')
        pause
        waitrt?
      end
    end
  end

  def move_direction?(dir_priority)
    if choice = dir_priority.find { |dir| XMLData.room_exits.include?(dir) }
      retreat unless DRRoom.npcs.empty?
      move choice
      true
    else
      false
    end
  end

  def find_room_maze(valid_move = proc { |_| true }, error_rooms = {})
    loop do
      error_rooms[Room.current.id].call if error_rooms[Room.current.id]
      return if DRRoom.pcs.empty? && DRRoom.npcs.empty?
      exits = XMLData.room_exits.dup.shuffle
      exits.rotate! until valid_move.call(exits.first)
      retreat unless DRRoom.npcs.empty?
      move exits.first
    end
  end

  def find_room_list(moves)
    moves.each do |dir|
      break if DRRoom.pcs.empty? && DRRoom.npcs.empty?
      retreat unless DRRoom.npcs.empty?
      move dir
    end
  end

  def wilds(mode)
    if mode !~ /exit/i && Room.current.id != 1176
      echo('Wilds script must be started from 1176')
      exit
    end
    case mode
    when /exit/i
      retreat
      wilds_leave
    when /leucro1/i
      wilds_enter
      find_room_maze(proc { |dir| !(XMLData.room_exits == %w(east south northwest) && dir == 'northwest') }, 7958 => proc { search_path('spot') })
    when /leucro2/i
      wilds_enter
      wilds_leucro_maze(true)
      find_room_list(%w(se s se sw sw sw w w w w s se))
    when /geni/i
      wilds_enter
      wilds_leucro_maze(true)
      wilds_leucro_walk
      find_room_maze
    end
  end

  def wilds_enter
    move 'go path'
    search_path('trail')
    search_path('trail')
    search_path('trail')
    search_path('spot')
  end

  def wilds_leucro_walk
    attempts = 0
    until XMLData.room_description.include?('small creatures still lurk beneath its surface -- perhaps following the remnant of an old, long unused trail.')
      move_direction?(%w(southeast south southwest west))
      pause 0.5
      attempts += 1
      if attempts == 50
        echo 'Train your perception!'
        exit
      end
    end
    search_path('trail', false)
  end

  def wilds_leucro_maze(entering)
    if entering
      pause 0.5 while move_direction?(%w(northeast east north southeast))
      move 'go dead'
    else
      pause 0.5 while move_direction?(%w(northwest west north))
    end
  end

  def wilds_leave_trail
    pause 0.5 while move_direction?(%w(northeast north northwest east south))
    move 'go dead'
  end

  def wilds_leave
    if XMLData.room_exits.length <= 2 || XMLData.room_exits == %w(east southeast northwest)
      wilds_leave_trail
    end
    pause 0.5 while move_direction?(%w(northwest west north))
    unless Room.current.id == 7958
      search_path('trail', false)
      wilds_leave_trail
      pause 0.5 while move_direction?(%w(northwest west north))
    end
    search_path('trail')
    move 'n'
    move 'n'
    search_path('path')
  end

  def northern_trade(mode)
    if mode !~ /exit/i && Room.current.id != 1176
      echo('Northern trade route script must be started from 1176')
      exit
    end
    case mode
    when /exit/i
      retreat
      northern_trade_leave
    when /rock_guardians/i
      northern_trade_enter
      wait_for_script_to_complete('go2', ['19154'])
      find_room_list(['climb fall', 'nw', 'nw', 'w', 'sw', 's', 'se', 'se'])
    end
  end

  def northern_trade_enter
    move 'go path'
    search_path('trail')
    search_path('trail')
    search_path('trail')
    search_path('tracks', false)
  end

  def northern_trade_leave
    loop do
      case Room.current.id
      when 6830
        break
      when 1386 # Handle broken room
        retreat
        ['nw', 'nw', 'n', 'ne', 'e', 'se', 'se', 'climb fall'].each { |dir| move dir }
      end
      retreat
      wait_for_script_to_complete('go2', ['6830'])
    end
    search_path('tracks', false)
    search_path('trail')
    move 'n'
    move 'n'
    search_path('path')
  end

  def faldesu(mode)
    unless mode =~ /haven|crossing/i
      echo 'You must specify haven or crossing for traversing the faldesu river'
      exit
    end

    if DRSkill.getrank('Athletics').to_i >= 120
      swim_faldesu(mode =~ /haven/i)
    else
      take_rh_ferry(mode =~ /haven/i)
    end
  end

  def swim(dir)
    move dir
    pause
    waitrt?
  end

  def swim_faldesu(north)
    start = north ? 1375 : 473
    manual_go2(start)
    moveset = north ? %w(north northwest northeast) : %w(south southwest southeast)
    move 'dive river'
    swim(moveset[0]) while XMLData.room_exits.include?(moveset[0])

    swim(moveset[1]) while XMLData.room_exits.include?('east')

    swim(moveset[2]) while XMLData.room_exits.include?(moveset[0])

    move 'climb bridge'
  end

  def take_rh_ferry(north)
    if north
      manual_go2(1385)
    else
      manual_go2(470)
    end
    case bput('go ferry', 'You .* climb aboard', 'Come back when you can afford the fare', 'not here')
    when /not here/
      waitfor 'pulls into the dock'
      take_rh_ferry(north)
    when /climb aboard/
      waitfor 'reaches the dock and its crew ties the ferry off'
      fput('go dock')
    end
  end
end

unless variable.length == 3
  echo('Invalid arguments, please provide an area and a mode')
  exit
end

Bescort.new(variable[1], variable[2])
