=begin
    Before running this script for the first time, you MUST add a method for each of your characters which sets the following CombatVars (change the values to match your needs):
        CombatVars.weapon_training = {
            "Brawling" => "",
            "Bow" => "bow",
            "Large Edged" => "sword",
            "Twohanded Edged" => "sword",
        }

    Use the single noun for an item, "sword" not "bastard sword"

    Your new method MAY also need to override any CombatVars set in baseline_setup.
    * Be sure not to change baseline_setup itself, as this is common to all characters.
    * See below for some example methods for various guilds.
    * Be aware of the difference in overwriting something that was set in baseline_setup vs updating it.
        * This will insert a new key or replace the key if it exists in a hash: CombatVars.buff_spells["See the Wind"] = { ... }
        * This will overwrite a hash: CombatVars.buff_spells = {"See the Wind" => { ... } }
        * This will append to an array: CombatVars.offensive_spells << { ... }
        * This will overwrite an array: CombatVars.offensive_spells = [ ... ]
    * You can turn on debug mode by setting CombatVars.combat_trainer_debug = true
=end

class CombatTrainerSetup
  include DRC

  def main(args:[])
    baseline_setup

    case checkname
    when 'Etreu' # Ranger
      etreu
      etreu_backtrain if args.include? 'back'
    when 'Menacra' # Cleric
      menacra
      menacra_undead if args.include? 'undead'
      menacra_defend if args.include? 'defend'
    when 'Selanas' # Empath
      selanas
    when 'Sarikis' # Moon Mage
      sarikis
    when 'Sheltim' # Barbarian
      sheltim
      app
      debug
    else
      echo "***DON'T USE THE BASELINE PROFILE***"
      echo 'Open and edit combat-trainer-setup.lic'
    end
    debug if args.include? 'debug'
    darg = args.find { |arg| arg =~ /d\d+/ }
    dance(darg) if darg
    app if args.include? 'app'

    start_script('combat-trainer')
    pause 0.25 while running?('combat-trainer')

    trainer = CombatTrainer.new
    trainer.main(CombatVars)
    loop do
      script.gets
    end
  end

  def baseline_setup
    # Actions to fill aiming time with
    CombatVars.aim_fillers = {
      'Crossbow' => %w(bob bob),
      'Bow' => %w(bob bob)
    }

    # If this exists it will use these actions while stealth exp is not capped
    CombatVars.aim_fillers_stealth = {
      'Bow' => %w(bob hide)
    }

    CombatVars.lootables = %w(
      bolt
      arrow
      coin)

    # The names of weapons which are worn, not stowed
    CombatVars.worn_weapons = %w(crossbow bow)

    # Leave a skill undefined to allow the script to balance defenses for learning
    # For skills that must use a certain defense arrangement you can specify the ordering of defenses with an array.
    # ["parry", "evasion"] = 100 parry 80 evasion
    # ["evasion", "parry"] = 100 evasion 80 parry
    CombatVars.stances = {
      'Bow' => %w(evasion shield),
      'Crossbow' => %w(evasion shield),
      'Slings' => %w(evasion shield),
      'Offhand Weapon' => %w(evasion shield)
    }

    CombatVars.offensive_spells = []
    CombatVars.buff_spells = {}
    CombatVars.buff_nonspells = {}

    CombatVars.skinning = {
      'skin' => true, # Set this to false to disable all skinning
      'arrange_all' => false, # Do you have the ability to arrange all?
      'arrange_count' => 5 # Number of times to arrange, anything over max arranges is treated as max.
    }

    # Worn chargable cambrinth
    CombatVars.cambrinth = 'armband'

    # Which charged maneuvers to use - this will be ignored for weapon skills that are not trained
    # https://elanthipedia.play.net/mediawiki/index.php/Combat_Maneuvers#Charged_Maneuvers
    CombatVars.charged_maneuvers = {
      'Brawling' => 'palmstrike',
      'Bow' => 'powershot',
      'Crossbow' => 'powershot',
      'Slings' => 'powershot',
      'Small Edged' => 'cleave',
      'Large Edged' => 'cleave',
      'Twohanded Edged' => 'cleave',
      'Small Blunt' => 'crash',
      'Large Blunt' => 'crash',
      'Twohanded Blunt' => 'crash',
      'Staves' => 'twirl',
      'Polearms' => 'impale'
    }

    # The number of enemies to always keep in the room, no offensive actions are taken until there are more creatures then this.
    CombatVars.dance_threshold = 1

    # The skill to use when dancing, preferrably something that can block or parry as needed.
    CombatVars.dance_skill = 'Large Edged'

    CombatVars.dance_actions = ['bob']

    # If this exists it will use these actions while stealth exp is not capped
    CombatVars.dance_actions_stealth = []

    CombatVars.training_abilities = { 'Hunt' => { check: 'Perception', cooldown: 80} }

    # The messages you receive when casting spells without roundtimes. (buffs, etc.)
    CombatVars.cast_messages = ['^You gesture', 'You reach with both', 'You close your eyes', 'You close yours eyes', 'Your target pattern dissipates', 'You make a holy gesture', 'You raise your left hand skyward', 'Flickering shadows tear away', 'You sense a Malediction']

    CombatVars.prep_messages = ['You begin chanting a psalm', 'With meditative movements you', 'You raise your head skyward', 'With tense movements']

    # The fatigue threshold at which the script will stop attacking and regain fatigue
    CombatVars.fatigue_regen_threshold = 90

    # See https://elanthipedia.play.net/mediawiki/index.php/Combat_maneuvers for actions that are good candidates
    # For example, "bob" trains Tactics, but does no damage, whereas "feint" does damage, but without training an additional skill
    CombatVars.fatigue_regen_action = 'bob'
  end

  def app
    CombatVars.training_abilities['App'] = { check: 'Appraisal', cooldown: 45 }
  end

  def etreu
    CombatVars.weapon_training = {
      'Bow' => 'bow',
      'Small Edged' => 'scimitar'
    }

    CombatVars.aim_fillers['Bow'] = %w(bob bob bob)
    CombatVars.aim_fillers_stealth = {
      'Bow' => %w(bob hide bob)
    }

    CombatVars.skinning['arrange_all'] = true
    CombatVars.skinning['arrange_count'] = 1

    CombatVars.dual_load = true
    CombatVars.charged_maneuvers.delete('Bow')

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }

    CombatVars.dance_actions_stealth = %w(hide stalk bob bob)

    CombatVars.buff_spells = {
      'See the Wind' => { 'abbrev' => 'STW', 'recast' => 1, 'mana' => 10, 'cambrinth' => [10, 10] },
      'Instinct' => { 'abbrev' => 'inst', 'recast' => 1, 'mana' => 10, 'cambrinth' => [10, 10] },
      'Hands of Lirisa' => { 'abbrev' => 'hol', 'recast' => 1, 'mana' => 10, 'cambrinth' => [10, 10] },
      'Sense of the Tiger' => { 'abbrev' => 'sott', 'recast' => 1, 'mana' => 10, 'cambrinth' => [10, 10] },
      'Skein of Shadows' => { 'abbrev' => 'sks', 'recast' => 1, 'mana' => 15, 'cambrinth' => [10, 5] },
      'Earth Meld' => { 'abbrev' => 'em', 'recast' => 1, 'mana' => 20, 'cambrinth' => [8, 7] },
      'Claws of the Cougar' => { 'abbrev' => 'cotc', 'recast' => -1, 'mana' => 15, 'cambrinth' => [8,8] }
    }

    CombatVars.offensive_spells = [
      # { 'skill' => 'Targeted Magic', 'name' => "Eagle's Cry", 'abbrev' => 'ec', 'mana' => 10 },
      { 'skill' => 'Debilitation', 'name' => 'Devolve', 'abbrev' => 'de', 'mana' => 14, 'expire' => 'which evaporate quickly into the air' }
    ]

    CombatVars.dance_actions = %w(bob bob bob bob)

    CombatVars.dance_skill = 'Small Edged'

    CombatVars.fatigue_regen_threshold = 85

    CombatVars.worn_items = [
      Item.new(name: 'mask', leather: true, hinders_locks: true, description: 'an insulated wool mask'),
      Item.new(name: 'gloves', leather: false, hinders_locks: true, description: 'some lumium mail gloves'),
      Item.new(name: 'shield', leather: false, hinders_locks: true, description: 'a metal target shield'),
      Item.new(name: 'mantle', leather: true, description: 'a padded wool mantle'),
      Item.new(name: 'tasset', leather: true, description: 'a padded wool tasset'),
      Item.new(name: 'vambraces', leather: true, description: 'some rugged vambraces'),
      Item.new(name: 'greaves', leather: false, description: 'some metal chain greaves'),
      Item.new(name: 'cap', leather: true, description: 'an insulated wool cap'),
      Item.new(name: 'parry stick', leather: false, description: 'a polished steel parry stick'),
      Item.new(name: 'knuckles', leather: false, hinders_locks: true, description: 'some brass knuckles'),
      Item.new(name: 'spikes', leather: false, description: 'some silver-chased elbow spikes'),
      Item.new(name: 'bow', leather: false, description: 'a Nisha short bow')
    ]
  end

  def etreu_backtrain
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Large Edged' => 'sword',
      'Small Blunt' => 'bola',
      'Light Thrown' => 'bola',
      'Twohanded Edged' => 'sword',
      'Offhand Weapon' => 'bola'
    }

    CombatVars.dance_skill = 'Large Edged'

    CombatVars.skinning['skin'] = false

    CombatVars.buff_spells = {}
    CombatVars.offensive_spells = {}
    CombatVars.buff_spells['Instinct'] = { 'abbrev' => 'inst', 'recast' => 1, 'mana' => 6, 'cambrinth' => [14] }
    CombatVars.buff_spells['Claws of the Cougar'] = { 'abbrev' => 'cotc', 'recast' => -1, 'mana' => 15, 'cambrinth' => [6] }

    CombatVars.dance_threshold = 0
  end

  def menacra
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Crossbow' => 'crossbow',
      'Large Edged' => 'sword',
      'Large Blunt' => 'hammer',
      'Heavy Thrown' => 'hammer'
    }

    CombatVars.skinning['arrange_count'] = 0

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }

    CombatVars.buff_spells['Shield of Light'] = { 'abbrev' => 'sol', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5, 5], 'after' => proc { bput('wear shield', 'your shield dissolves', 'you are already wearing') } }
    CombatVars.buff_spells['Benediction'] = { 'abbrev' => 'benediction', 'recast' => 1, 'mana' => 10, 'cambrinth' => [5, 5] }
    CombatVars.buff_spells['Major Physical Protection'] = { 'abbrev' => 'MAPP', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
    CombatVars.buff_spells['Minor Physical Protection'] = { 'abbrev' => 'MPP', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
    CombatVars.buff_spells['Centering'] = { 'abbrev' => 'Centering', 'recast' => 1, 'mana' => 15, 'cambrinth' => [8, 7] }

    CombatVars.cambrinth = 'armband'

    CombatVars.dance_actions = %w(bob bob bob bob)

    CombatVars.offensive_spells = [
      { 'skill' => 'Targeted Magic', 'name' => 'Fists of Faenella', 'abbrev' => 'ff', 'mana' => 12 },
      { 'skill' => 'Debilitation', 'name' => 'Malediction', 'abbrev' => 'maled', 'mana' => 12, 'expire' => 'The swirling confines of malevolent darkness' }
    ]

    CombatVars.dance_threshold = 0
  end

  def sarikis
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Small Blunt' => 'club',
      'Small Edged' => 'dagger',
      'Offhand Weapon' => 'dagger',
      'Light Thrown' => 'club'
    }

    CombatVars.skinning['arrange_count'] = 0

    CombatVars.dance_actions = %w(bob bob bob bob)

    CombatVars.dance_actions_stealth = %w(bob hide stalk bob)

    CombatVars.dance_skill = 'Small Edged'

    CombatVars.training_abilities['PercMana'] = { check: 'Attunement', cooldown: 60 * 2 }
    CombatVars.training_abilities['Astro'] = { chec: 'Astrology', cooldown: 60 * 4 }

    CombatVars.offensive_spells = [
      { 'skill' => 'Targeted Magic', 'name' => 'Dinazen Olkar', 'abbrev' => 'DO', 'mana' => 5 },
      { 'skill' => 'Debilitation', 'name' => 'Calm', 'abbrev' => 'calm', 'mana' => 3 }
    ]

    CombatVars.buff_spells['Shadows'] = { 'abbrev' => 'shadows', 'recast' => 1, 'mana' => 5 }
    CombatVars.buff_spells['Psychic Shield'] = { 'abbrev' => 'psy', 'recast' => 1, 'mana' => 5 }

    CombatVars.dance_threshold = 2

    CombatVars.lootables = %w(
      arrow
      coin)
  end

  def dance(message)
    message =~ /d(\d+)/
    CombatVars.dance_threshold = Regexp.last_match(1).to_i
  end

  def menacra_undead
    CombatVars.buff_spells['Bless'] = { 'abbrev' => 'bless', 'recast' => 1, 'mana' => 25, 'cambrinth' => [5] }
    CombatVars.buff_spells['Protection from Evil'] = { 'abbrev' => 'pfe', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
  end

  def menacra_defend
    CombatVars.offensive_spells = []
    CombatVars.dance_skill = 'Large Edged'
    CombatVars.dance_threshold = 3
  end

  def selanas
    CombatVars.lootables = [
      'coin'
    ]

    CombatVars.weapon_training = {
      'Brawling' => ''
    }

    CombatVars.stances = {
      'Brawling' => %w(evasion shield)
    }

    CombatVars.buff_spells['Iron Constitution'] = { 'abbrev' => 'IC', 'recast' => 1, 'mana' => 15, 'cambrinth' => [4] }
    CombatVars.buff_spells['Refresh'] = { 'abbrev' => 'refresh', 'recast' => 1, 'mana' => 15, 'cambrinth' => [4]  }

    CombatVars.offensive_spells = [
      { 'skill' => 'Debilitation', 'name' => 'Lethargy', 'abbrev' => 'Lethargy', 'mana' => 9 },
      { 'skill' => 'Targeted Magic', 'name' => 'Paralysis', 'abbrev' => 'Paralysis', 'mana' => 7 },
    ]

    CombatVars.skinning = {
      'skin' => true, # Set this to false to disable all skinning
      'arrange_all' => false, # Do you have the ability to arrange all?
      'arrange_count' => 0 # Number of times to arrange, anything over max arranges is treated as max.
    }

    CombatVars.empath = {manipulate:true}

    CombatVars.cambrinth = 'ear'

    CombatVars.charged_maneuvers = {}

    CombatVars.dance_threshold = 100

    CombatVars.dance_skill = 'Brawling'

    CombatVars.dance_actions = %w(bob circle bob)

    CombatVars.dance_actions_stealth = %w(bob hide stalk bob)
  end

  def sheltim
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Bow' => 'bow',
      'Large Edged' => 'sword',
      'Large Blunt' => 'hammer',
      'Heavy Thrown' => 'hammer',
      'Twohanded Blunt' => 'flail',
      'Twohanded Edged' => 'sword'
    }

    CombatVars.dance_actions_stealth = %w(hide stalk bob bob)

    CombatVars.worn_weapons = []

    CombatVars.buff_nonspells['form python'] = 60 * 5
    CombatVars.buff_nonspells['berserk earthquake'] = 60 * 1
    CombatVars.buff_nonspells['form badger'] = 60 * 5

    CombatVars.dance_threshold = 1
  end

  def debug
    CombatVars.combat_trainer_debug = true
  end

  module CombatVars
    @@vars = {}
    def self.[](name)
      @@vars[name]
    end

    def self.reset
      @@vars = {}
    end

    def self.[]=(name, val)
      if val.nil?
        @@vars.delete(name)
      else
        @@vars[name] = val
      end
    end

    def self.list
      @@vars.dup
    end

    def self.method_missing(arg1, arg2 = '')
      if arg1[-1, 1] == '='
        if arg2.nil?
          @@vars.delete(arg1.to_s.chop)
        else
          @@vars[arg1.to_s.chop] = arg2
        end
      else
        @@vars[arg1.to_s]
      end
    end
  end
end

CombatTrainerSetup.new.main(args: variable.drop(1))
