=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Before running this script for the first time, you MUST add a method for each of your characters which sets the following CombatVars and UserVars (change the values to match your needs):
    CombatVars.weapon_training = { ... }
    UserVars.gear = [ ... ]
    UserVars.gear_sets = { ... }
    CombatVars.worn_items = '...'

  Use the description for an item, "a steel bastard sword" not "bastard sword" or "sword". You can see this by glancing at the item in your hand.

  Your new method MAY also need to override any CombatVars set in baseline_setup.
  * Be sure not to change baseline_setup itself, as this is common to all characters.
  * See below for some example methods for various guilds.
  * Be aware of the difference in overwriting something that was set in baseline_setup vs updating it.
    * This will insert a new key or replace the key if it exists in a hash: CombatVars.buff_spells["See the Wind"] = { ... }
    * This will overwrite a hash: CombatVars.buff_spells = { "See the Wind" => { ... } }
    * This will append to an array: CombatVars.offensive_spells << { ... }
    * This will overwrite an array: CombatVars.offensive_spells = [ ... ]
  * You can turn on debug mode by setting CombatVars.combat_trainer_debug = true
=end

custom_require(%w(combat-trainer common))

class CombatTrainerSetup
  include DRC

  def main(args:[])

    should_debug = args.delete('debug')
    should_app = args.delete('app')
    darg = args.find { |arg| arg =~ /d\d+/ }
    args.delete(darg) if darg
    rarg = args.find { |arg| arg =~ /r\d+/ }
    args.delete(rarg) if rarg

    CombatVars.set(get_settings(args))

    debug if should_debug
    set_dance(darg) if darg
    set_retreat(rarg) if rarg
    app if should_app

    $COMBAT_TRAINER = CombatTrainer.new
    $COMBAT_TRAINER.main(CombatVars)
  end

  def app
    CombatVars.training_abilities['App'] = { check: 'Appraisal', cooldown: 60 }
  end

  def set_dance(message)
    message =~ /d(\d+)/
    CombatVars.dance_threshold = Regexp.last_match(1).to_i
  end

  def set_retreat(message)
    message =~ /r(\d+)/
    CombatVars.retreat_threshold = Regexp.last_match(1).to_i
  end

  def debug
    CombatVars.combat_trainer_debug = true
  end

  module CombatVars
    @@vars = {}
    def self.[](name)
      @@vars[name]
    end

    def self.set(val)
      @@vars = val
    end

    def self.reset
      @@vars = {}
    end

    def self.[]=(name, val)
      if val.nil?
        @@vars.delete(name)
      else
        @@vars[name] = val
      end
    end

    def self.list
      @@vars.dup
    end

    def self.method_missing(arg1, arg2 = '')
      if arg1[-1, 1] == '='
        if arg2.nil?
          @@vars.delete(arg1.to_s.chop)
        else
          @@vars[arg1.to_s.chop] = arg2
        end
      else
        @@vars[arg1.to_s]
      end
    end
  end
end

CombatTrainerSetup.new.main(args: variable.drop(1))
