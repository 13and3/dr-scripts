# quiet
=begin

  Dependency manager for seped and sheltims scripts stored on https://github.com/rpherbig/dr-scripts. Should eventually allow any accesible script to be stored.

  This script requires trust

=end

require 'json'
require 'net/http'

debug = variable.include?('debug')

class ScriptManager
  def initialize(debug)
    @debug = debug
    @git_token = 'b1aacd5d194c5a3163393ae99384805ab30b004d'
    # ?access_token=
    @status_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/trees/master'
    @item_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/blobs/'

    UserVars.script_versions = {} unless UserVars.script_versions
  end

  def check_script(filename, force = false)
    echo("checking:#{filename} force:#{force}") if @debug
    download_script(filename) if UserVars.script_versions[filename].nil? || force || file_outdated?(filename)
  end

  def file_outdated?(filename)
    echo("file_outdated?:#{filename}") if @debug
    local_version = UserVars.script_versions[filename]
    echo("local:#{local_version}") if @debug
    echo(get_status['tree'].find { |element| element['path'] == filename })
  end

  def get_status
    return @status if @status && Time.now - @status_time <= 30 # prevent flooding
    @status_time = Time.now
    @status = make_request(@status_url)
  end

  def make_request(raw_uri)
    uri = URI.parse(raw_uri)
    args = { access_token: @git_token }
    uri.query = URI.encode_www_form(args)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Get.new(uri.request_uri)

    response = http.request(request)
    JSON.parse(response.body)
  end
end

manager = ScriptManager.new(debug)

def custom_require(script_names)
end

# manager.check_script('common.lic')
manager.file_outdated?('common.lic')

while line = script.gets
  clear
  begin
  rescue Exception
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue ThreadError
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  end
end
