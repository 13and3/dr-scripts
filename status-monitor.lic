

unless HAVE_GTK
  respond
  respond 'error: ruby-gtk bindings are not installed or failed to load'
  respond
  exit
end


window = nil
window_done = false
load_window_position = Settings['window_position'] || []
load_window_width    = Settings['window_width'] || 300
load_window_height   = Settings['window_height'] || 100
window_title = "#{checkname} Status"
save_window_position = nil
save_window_width    = nil
save_window_height   = nil
sort_ascending = true
begin
  Gtk.queue {
    messages_tv = Gtk::TextView.new
    messages_sw = Gtk::ScrolledWindow.new
    messages_sw.add(messages_tv)

    vbox = Gtk::VBox.new
    vbox.pack_start(messages_sw)

    window              = Gtk::Window.new
    window.title        = window_title
    window.border_width = 1
    window.resize(load_window_width, load_window_height)
    unless load_window_position.empty?
      window.move(load_window_position[0], load_window_position[1])
    end
    window.add(vbox)

    window.signal_connect('delete_event') {
      save_window_position = window.position
      save_window_width    = window.allocation.width
      save_window_height   = window.allocation.height
      window_done = true
    }
    window.show_all
  }
  sleep 0.1
  wait_until { window_done }
ensure
  Settings['window_position'] = save_window_position if (save_window_position.class == Array) and (save_window_position[0].to_i >= 0) and (save_window_position[1].to_i >= 0)
  Settings['window_width']    = save_window_width    if (save_window_width.class == Fixnum) and (save_window_width > 100)
  Settings['window_height']   = save_window_height   if (save_window_height.class == Fixnum) and (save_window_height > 100)
  Gtk.queue { window.destroy }
end

# loop do
#   line = script.gets?
#   case line
#   when /^(Katamba|Xibar|Yavash) sets/
#     moon_change(Regexp.last_match(1).downcase, false)
#   when /^(Katamba|Xibar|Yavash) slowly rises/
#     moon_change(Regexp.last_match(1).downcase, true)
#   end

#   %w(katamba yavash xibar).each do |moon|
#     next unless Flags["mw-#{moon}"]
#     process_moon_meesage(moon, Flags["mw-#{moon}"].first)
#     Flags.reset("mw-#{moon}")
#   end

#   update_moon_info(true)
#   pause 0.1 unless line
# end
