=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts
=end

custom_require.call(%w(common common-crafting))

class Shape
  include DRC
  include DRCC

  def initialize
    settings = get_settings
    @bag = settings.crafting_container('backpack')
    @belt = settings.engineering_belt(nil)

    arg_definitions = [
      [
        { name: 'finish', options: %w(log stow trash), description: 'What to do with the finished item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @finish = args.finish
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @noun = args.noun

    shape_item
  end

  def get_item(name)
    get_crafting_item(name, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def shape_item
    get_item('shaping book')
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('drawknife')
    get_item("#{@material} lumber")
    shape('scrape my lumber with my drawknife')
  end

  def shape(command)
    waitrt?
    case bput(command,
              'a wood shaper is needed',
              'carved with a carving knife',
              'rubbed out with a rasp',
              'Applying the final touches',
              'That tool does not seem suitable for that task.')
    when 'a wood shaper is needed'
      waitrt?
      stow_item(checkright)
      get_item('shaper')
      command = "shape my #{@noun} with my shaper"
    when 'carved with a carving knife'
      waitrt?
      stow_item(checkright)
      get_item('carving knife')
      command = "carve my #{@noun} with my knife"
    when 'rubbed out with a rasp'
      waitrt?
      stow_item(checkright)
      get_item('rasp')
      command = "rub my #{@noun} with my rasp"
    when 'Applying the final touches'
      finish
    when 'That tool does not seem suitable for that task.'
      case bput("analyze my #{@noun}", 'appears ready for shaping with a wood shaper.', 'free of defects that would impede further carving with a knife.', 'A cluster of small knots')
      when 'appears ready for shaping with a wood shaper.'
        stow_item(checkright)
        get_item('shaper')
        command = "shape my #{@noun} with my shaper"
      when 'free of defects that would impede further carving with a knife.'
        stow_item(checkright)
        get_item('carving knife')
        command = "carve my #{@noun} with my knife"
      when 'A cluster of small knots'
        stow_item(checkright)
        get_item('rasp')
        command = "rub my #{@noun} with my rasp"
      end
    end
    waitrt?
    shape(command)
  end

  def finish
    waitrt?
    stow_item(checkright)
    case @finish
    when /log/
      logbook_item
    when /stow/
      stow_item(@noun)
    when /trash/
      dispose_trash(@noun)
    end
    fput("get my #{@material} lumber")
    fput("put my #{@material} lumber in my #{@bag}")
    exit
  end

  def logbook_item
    get_item('engineering logbook')
    if /requires items of/ =~ bput("bundle my #{@noun} with my logbook", 'You notate the', 'This work order has expired', 'The work order requires items of a higher quality')
      dispose_trash(@noun)
    end
    stow_item('engineering logbook')
  end
end

Shape.new
