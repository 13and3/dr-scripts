
custom_require(%w(common))

class Shape
  include DRC

  def initialize(args:[])
    settings = get_settings
    @bag = settings.crafting_container('backpack')
    @finish, @type, @chapter, @recipe_name, @material, @noun = args

    case @type
    when /shaping/
      shape_item
    else
      echo('Shape does not yet support that form of shaping.')
    end
  end

  def get_or_fail(item)
    waitrt?
    case bput("get my #{item}", '^You get', '^You are already', '^You pick up', '^What do you', '^What were you')
    when 'What do you', 'What were you'
      echo("You seem to be missing: #{item}")
      exit
    end
  end

  def store_thing(item)
    waitrt?
    bput("put my #{item} in my #{@bag}", 'You put your', 'What were you referring to')
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def shape_item
    get_or_fail('shaping book')
    turn_to("chapter #{@chapter}")
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    store_thing('book')
    get_or_fail('drawknife')
    get_or_fail("#{@material} lumber")
    shape('scrape my lumber with my drawknife')
  end

  def shape(command)
    waitrt?
    case bput(command,
              'a wood shaper is needed',
              'carved with a carving knife',
              'rubbed out with a rasp',
              'Applying the final touches'
             )
    when 'a wood shaper is needed'
      waitrt?
      store_thing(checkright)
      get_or_fail('shaper')
      command = "shape my #{@noun} with my shaper"
    when 'carved with a carving knife'
      waitrt?
      store_thing(checkright)
      get_or_fail('carving knife')
      command = "carve my #{@noun} with my knife"
    when 'rubbed out with a rasp'
      waitrt?
      store_thing(checkright)
      get_or_fail('rasp')
      command = "rub my #{@noun} with my rasp"
    when 'Applying the final touches'
      finish
    end
    waitrt?
    shape(command)
  end

  def finish
    waitrt?
    store_thing(checkright)
    case @finish
    when /log/
      logbook_item
    when /stow/
      store_thing(@noun)
    when /trash/
      dispose_trash(@noun)
    end
    fput("get my #{@material} lumber")
    fput("put my #{@material} lumber in my #{@bag}")
    exit
  end

  def logbook_item
    get_or_fail('engineering logbook')
    if /requires items of/ =~ bput("bundle my #{@noun} with my logbook", 'You notate the', 'This work order has expired', 'The work order requires items of a higher quality')
      dispose_trash(@noun)
    end
    store_thing('engineering logbook')
  end
end

Shape.new(args: variable.drop(1))
