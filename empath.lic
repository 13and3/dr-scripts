
custom_require.call(%w[drinfomon equipmanager events spellmonitor common common-arcana common-crafting common-healing common-items common-money common-travel common-summoning common-kg])


class Empath
  include DRC
  include DRCI
  include DRCA
  include DRCT
  include MY_COMMON

  def initialize
    exit unless DRStats.empath?

    UserVars.magic_skills = ['Warding', 'Augmentation', 'Utility']

    settings = get_settings
    @settings = settings
    @equipment_manager = EquipmentManager.new
    #@equipment_manager.wear_equipment_set?('casual')
    chart_data = get_data('anatomy-charts').first_aid_charts
    @booktype = 'compendium'
    @spells = settings.waggle_sets['empathy']
    @spell_index = -1
    @perception_timer = nil
    @appraisal_timer = nil
    @power_timer = nil
    @empathy_timer = nil
    @song_list = get_data('perform').perform_options
    @training_room = (settings.training_rooms || [settings.safe_room]).sample
    @ingot_container = settings.ingot_container
    @athletics_options = get_data('athletics').athletics_options
    @times_out_hunting = 0
    timers = {
        perception_timer: nil,
        appraisal_timer: nil,
        power_timer: nil
    }
    lesson_state = {}
    @magic_state = {
        spells: settings.waggle_sets['empathy'],
        settings: settings,
        prepare_time: 0,
        spell_index: -1,
        timers: timers,
        casting_room: 8246,
        chart_data: chart_data,
        chart_state: {},
        max_concentration: DRStats.concentration
    }
    magic_state = @magic_state


    cycle = [
      'First Aid',
      'Forging',
      'Outdoorsmanship',
      'Engineering',
      'Athletics',
      'Outfitting',
      'Mechanical Lore',
      'Forging',
      'Defending'
    ]
    get_crafting(settings)
    idx = 0 #UserVars.cycle_index || -1
    while true
      pause 1
      fput "remove #{settings.hand_armor}"
      fput "stow #{settings.hand_armor}"
      pause 1
      idx = (idx + 1) % cycle.length
      case cycle[idx]
      when 'Magic'
        get_ingots
        walk_to(@magic_state[:casting_room])
        train_magic(@magic_state)
        train_appraisal(timers)
      when 'Empathy'
        get_ingots
        train_empathy(settings)
        train_appraisal(timers)
      when 'Athletics'
        get_ingots
        train_athletics(settings)
        train_appraisal(timers)
      when 'Outdoorsmanship'
        get_ingots
        walk_to(@training_room)
        check_listening(lesson_state, settings)
        check_teaching(lesson_state, settings)
        train_outdoorsmanship(magic_state)
        train_appraisal(timers)
      when 'Mechanical Lore'
        sanowret
        get_ingots
        echo 'walk to...'
        echo @training_room
        walk_to(@training_room)
        train_mechanical_lore(magic_state)
        train_appraisal(timers)
      when 'Forging'
        vol = deed_ingot_volume
        if(vol < 18)
          echo 'need more ingot!'
          exit
        end
        get_crafting(settings)
        train_appraisal(timers)
        train_forging(timers, 'weaponsmithing')
      when 'Outfitting'
        get_ingots
        get_crafting(settings)
        train_outfitting(timers)
      when 'Engineering'
        get_ingots
        get_crafting(settings)
        train_appraisal(timers)
        train_engineering(timers)
      when 'Scholarship'
        sanowret
        get_ingots
        train_scholarship unless DRSkill.getxp('Scholarship') > 15
        train_appraisal(timers)
      when 'Defending'
        if(DRSkill.getxp('Defending') < 12)
          get_ingots
          train_appraisal(timers)
          train_defending(settings)
          wait_for_script_to_complete('crossing-repair')
          train_appraisal(timers)
        end
      when 'First Aid'
        sanowret
        get_ingots
        walk_to(@training_room)
        check_listening(lesson_state, settings)
        check_teaching(lesson_state, settings)
        train_appraisal(timers)
        train_first_aid(magic_state, chart_data)
        train_appraisal(timers)
      else
        count = 0
        while(count < 10)
          echo 'nothing to train?'
          pause 12
          count = count + 1
        end
      end

      UserVars.cycle_index = idx
    end
  end



  def deed_ingot_volume
    res = bput('read my deed', 'Volume:\s*\d+')
    res.scan(/\d+/).first.to_i
  end



  def train_defending(settings)
    echo 'maybe train defending??'
    return unless DRSkill.getxp('Defending') < 10
    @times_out_hunting = @times_out_hunting + 1 % 5
    store_crafting(settings)
    wait_for_script_to_complete('hunting-buddy')
    wait_for_script_to_complete('crossing-repair') if @times_out_hunting == 0
    get_crafting(settings)
  end

  def train_empathy(settings)
    return unless DRSkill.getxp('Empathy') <= 30
    room_list = get_data('town')['Crossing']['perceive_health_rooms']
    echo 'room list'
    echo room_list
    room_list.push(8776)#forging clerk
    room_list.push(16659)#outfitting clerk
    room_list.push(19209)#engineer repairman
    room_list.push(8860)#alchemy clerk


    room_list.each do |room_id|
      echo "room is #{room_id}"
      maybe_prepare(@magic_state)
      walk_to(room_id)
      waitrt?
      if(DRSkill.getxp("Attunement") < 32)
        bput('power', 'You reach out')
        waitrt?
      elsif(DRSkill.getxp("Perception") < 32)
        bput('hunt', 'Roundtime')
        waitrt?
      end
      5.times do
        break if bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet') == 'You sense:'
        pause 1
        rt = waitrt?
        pause 5 if rt.nil? || rt.zero?
      end
      waitrt?

      cast_next_spell_without_filler_in_room(@magic_state)


      break if DRSkill.getxp('Empathy') >= 30
    end
  end



  def crossing_athletics(settings, end_exp)
    play_song?
    until DRSkill.getxp('Athletics') >= end_exp
      @athletics_options
        .reject { |data| settings.avoid_athletics_in_justice && data['justice'] }
        .each do |data|
        break unless climb?(settings, data['room'], data['targets'], end_exp)
      end
    end
  end

  def climb?(settings, room, targets, end_exp)
    maybe_prepare(@magic_state)
    targets.each do |target|
      walk_to(room)
      return true if DRRoom.npcs.length >= 3

      bput("climb #{target}", '.*')
      pause
      waitrt?
      return false if DRSkill.getxp('Athletics') >= end_exp
    end
    cast_next_spell_without_filler_in_room(@magic_state) if checkcastrt < 2
    true
  end

  def get_ingots
    return
    walk_to(8773)

    found_ingot = false
    until(bput('get ing from bucket', 'You get', 'What were').include?('What were'))
      bput("stow my ing in my #{@ingot_container}", 'You put')
      found_ingot = true
    end
    return unless found_ingot
    bput("stow my ing in my #{@ingot_container}", 'You put', 'Stow what?')

    walk_to(8285)
    go_in_vault
    until(bput("get ing from #{@ingot_container}", 'You get', 'What were').include?('What were'))
      bput('put ingot on large shelf in vault', 'You put')
    end

    leave_vault
  end

  def can_train_emapthy
    return  @epath_timer.nil? || (Time.now - @empathy_timer) > 80 && DRSkill.getxp("Empathy") < 32
  end

  def stop_play
    return unless @did_play
    return if @no_instrument
    @did_play = false
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
    Flags['ct-song'] = true
  end
  def play_song?(blocking = false)
    return true if @researching
    return false if @no_instrument
    return true if DRSkill.getxp('Performance') >= 28

    UserVars.song = @song_list.first.first unless UserVars.song
    @did_play = true
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument', 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play')
    when 'Play on what instrument'
      @no_instrument = true
      return false
    when 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play'
      return true
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
    when 'dirtiness may affect your performance'
      if DRSkill.getrank('Performance') < 20
        echo "Skipping cleaning of zills due to low rank of Performance: #{DRSkill.getrank('Performance')}" if UserVars.crossing_trainer_debug
        return true
      end
      stop_play
      clean_zills
      return play_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      stop_play
      UserVars.song = @song_list[UserVars.song] || @song_list.first.first
      return play_song?
    when 'You struggle to begin'
      if UserVars.song != @song_list.first.first
        stop_play
        UserVars.song = @song_list.first.first
        return play_song?
      end
    end

    return true unless blocking

    Flags.reset('ct-song')
    pause 1 until Flags['ct-song']
    true
  end
  def clean_zills
    cloth = @settings.cleaning_cloth

    case bput("get my #{cloth}", 'You get', 'What were you')
    when 'What were you'
      echo('You have no chamois cloth, removing Performance from training')
      @settings.crossing_training.delete('Performance')
      return
    end

    bput('remove my zills', 'You slide')

    loop do
      case bput("wipe my zills with my #{cloth}", 'Roundtime', 'not in need of drying', 'You should be sitting up')
      when 'not in need of drying'
        break
      when 'You should be sitting up'
        fix_standing
        next
      end
      pause 1
      waitrt?

      until /you wring a dry/i =~ bput("wring my #{cloth}", 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /not in need of cleaning/i =~ bput("clean my zills with my #{cloth}", 'Roundtime', 'not in need of cleaning')
      pause 1
      waitrt?
    end

    bput('wear my zills', 'You slide')
    bput("stow my #{cloth}", 'You put')
  end

  def train_athletics(settings)
    start_exp = DRSkill.getxp('Athletics')
    end_exp = [start_exp + 15, 29].min
    crossing_athletics(settings, end_exp)
  end

end


Empath.new