=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script sell gems (from your pouch), sells your worn bundle, and then deposits your money. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

  An optional argument can be provided for money to keep on hand. If no argument is provided, the YAML settings will be used. If not configured in your YAML settings file, the default is 3 silver: the maximum amount that cannot be stolen by a Thief.
  * ;sell-loot # Uses the default: keeps 3 silver
  * ;sell-loot 12 # Uses one argument: keeps 12 silver, which is withdrawn as 1 gold and 2 silver
  * ;sell-loot 4 g # Uses two arguments: keeps 4 gold
=end

custom_require.call(%w(common common-money common-travel drinfomon equipmanager))
pause 0.05

class SellLoot
  include DRC
  include DRCM
  include DRCT

  def initialize(args)
    EquipmentManager.instance.empty_hands

    settings = get_settings
    keep_amount, keep_type = parse(args, settings.sell_loot_money_on_hand(nil).split(' '))

    sell_gems('pouch') if settings.sell_loot_pouch(true)

    sell_bundle if settings.sell_loot_bundle(true)

    withdrawals = convert_input(keep_amount, keep_type)
    deposit_coins(withdrawals)
  end

  def parse(args, setting)
    keep_amount = args[0] || setting[0] || 3
    keep_type = args[1] || setting[1] || 'silver'

    [keep_amount, keep_type]
  end

  def convert_input(keep_amount, keep_type)
    copper = convert_to_copper(keep_amount, keep_type)
    minimize_coins(copper)
  end

  def deposit_coins(withdrawals)
    walk_to 1902
    fput 'exchange all lir for kro'
    fput 'exchange all dok for kro'

    walk_to 1900
    fput 'deposit all'
    withdrawals.each { |amount| fput "withdraw #{amount}" }
    fput 'check balance'
    move 'out'
    move 'out'
  end

  def sell_bundle
    case bput('tap bundle', 'You tap', 'I could not find')
    when 'I could not find'
      return
    end

    walk_to 8266

    bput('remove my bundle', 'You remove')
    bput('sell my bundle', 'ponders over the bundle')
    bput('stow rope', 'You put')
  end

  def sell_gems(container)
    case bput("open my #{container}", 'You open your', 'has been tied off', 'What were you referring to', 'That is already open')
    when 'has been tied off', 'What were you referring to'
      return
    end

    gems = get_gems(container)
    unless gems.empty?
      walk_to 4652

      gems.each do |gem|
        fput "get my #{gem}"
        fput "sell my #{gem} to appraiser"
      end
    end

    fput "close my #{container}"
  end
end

SellLoot.new(variable.drop(1))
