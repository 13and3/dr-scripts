=begin
    Authored by Sheltim. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script sell gems (from your pouch), sells your worn bundle, and then deposits your money. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download scripts "common" and "drinfomon".
    * ;trust each of the above scripts.
    * You can turn on debug mode with ;e UserVars.sell_loot_debug = true
    
    Optional arguments are a number and a coin type keep on hand. The default is 3 silver: the maximum amount that cannot be stolen by a Thief.
    * ;sell-loot # Uses the default: keeps 3 silver
    * ;sell-loot 12 # Uses one argument: keeps 12 silver
    * ;sell-loot 4 gold # Uses two arguments: keeps 4 gold
=end

# TODO: Handle case in which the character does not have a pouch or bundle?

# TODO: Capture "check balance" output and echo it after returning to the safe room (so it is more visible)

# TODO: Convert the optional parameter to as few coins as possible (e.g. ;sell-loot 10 would withdraw 1 gold, not 10 silver)

def main
    keep_amount = variable[1] || 3
    keep_type = variable[2] || "silver"
    
    # Run helper scripts
    %w(common drinfomon).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    empty_hands
    
    start_room = Room.current.id
    echo "Starting room: #{start_room}" if UserVars.sell_loot_debug

    sell_gems("pouch")
    
    sell_bundle
    
    deposit_coins(keep_amount, keep_type)
    
    echo "Returning to start room: #{start_room}" if UserVars.sell_loot_debug
    walk_to start_room
end

def deposit_coins(keep_amount, keep_type)
    walk_to 1902
    fput "exchange all lir for kro"
    fput "exchange all dok for kro"

    walk_to 1900
    fput "deposit all"
    fput "withdraw #{keep_amount} #{keep_type}"
    fput "check balance"
end

def rummage(parameter, container)
    result = bput("rummage /#{parameter} my #{container}", 'but there is nothing in there like that\.', 'looking for .* and see .*')
    
    if result == 'but there is nothing in there like that.'
        echo "Found no items while rummaging /#{parameter} in #{container}" if UserVars.sell_loot_debug
        return []
    end

    text = extract_rummage_text(result)

    list_to_nouns(text)
end

def extract_rummage_text(raw)
    raw.match(/looking for (.*) and see (.*)\.$/).to_a[2]
end

def sell_bundle
    skins = rummage("S", "bundle")
    
    if skins.count == 1
        echo "Skipping selling bundle" if UserVars.sell_loot_debug
        return
    end
    
    walk_to 8266
 
    skin = skins.first    
    fput "get my #{skin} from bundle"
    # Do not stow
    fput "drop my #{skin}"
    fput "remove my bundle"
    fput "sell my bundle"
    fput "get #{skin}"
    fput "bundle my #{skin}"
    fput "wear my bundle"
end

def sell_gems(container)
    fput "open my #{container}"
    gems = rummage("G", "#{container}")
    
    if gems.count < 1
        echo "Skipping selling gems" if UserVars.sell_loot_debug
    else
        walk_to 4652
        
        gems.each do |gem|
            fput "get my #{gem}"
            fput "sell my #{gem} to appraiser"
        end
    end
    
    fput "close my #{container}"
end

# Call this last to avoid the need for forward declarations
main
