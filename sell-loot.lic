=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#sell-loot
=end

custom_require.call(%w(common common-money common-travel drinfomon equipmanager))

class SellLoot
  include DRC
  include DRCM
  include DRCT

  def initialize
    EquipmentManager.instance.empty_hands

    settings = get_settings
    keep_amount, keep_type = parse(settings.sell_loot_money_on_hand(nil).split(' '))

    sell_gems("#{settings.gem_pouch_adjective} pouch") if settings.sell_loot_pouch(true)

    check_spare_pouch(settings.spare_gem_pouch_container, settings.gem_pouch_adjective) if settings.spare_gem_pouch_container

    sell_bundle if settings.sell_loot_bundle(true)

    withdrawals = convert_input(keep_amount, keep_type)
    deposit_coins(withdrawals)
  end

  def parse(setting)
    arg_definitions = [
      [
        { name: 'amount', regex: /\d+/i, variable: true, description: 'Number of coins to keep' },
        { name: 'type', regex: /\w+/i, variable: true, description: 'Type of coins to keep' }
      ],
      []
    ]

    args = parse_args(arg_definitions)

    keep_amount = args.amount || setting[0] || 3
    keep_type = args.type || setting[1] || 'silver'

    [keep_amount, keep_type]
  end

  def convert_input(keep_amount, keep_type)
    copper = convert_to_copper(keep_amount, keep_type)
    minimize_coins(copper)
  end

  def deposit_coins(withdrawals)
    walk_to 1902
    fput 'exchange all lir for kro'
    fput 'exchange all dok for kro'

    walk_to 1900
    fput 'deposit all'
    withdrawals.each { |amount| fput "withdraw #{amount}" }
    fput 'check balance'
    move 'out'
    move 'out'
  end

  def sell_bundle
    case bput('tap bundle', 'You tap', 'I could not find')
    when 'I could not find'
      return
    end

    walk_to 8266

    bput('remove my bundle', 'You remove', 'You sling')
    bput('sell my bundle', 'ponders over the bundle')
    bput('stow rope', 'You put')
  end

  def check_spare_pouch(container, adj)
    return if 'You tap a' == bput("tap my #{adj} pouch in my #{container}", 'You tap a', 'I could not')
    walk_to 4652
    fput("ask app for #{adj} pouch")
    fput("put my pouch in my #{container}")
  end

  def sell_gems(container)
    case bput("open my #{container}", 'You open your', 'has been tied off', 'What were you referring to', 'That is already open')
    when 'has been tied off', 'What were you referring to'
      return
    end

    gems = get_gems(container)
    unless gems.empty?
      walk_to 4652

      gems.each do |gem|
        fput "get my #{gem}"
        fput "sell my #{gem} to appraiser"
      end
    end

    fput "close my #{container}"
  end
end

SellLoot.new
