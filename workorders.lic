# quiet

custom_require(%w(common drinfomon))

class WorkOrders
  include DRC

  def initialize(args)
    ensure_copper_on_hand(5000)
    work_order(args.first)
  end

  def work_order(discipline)
    settings = get_settings(['crafting'])
    @bag = settings.crafting_container('backpack')
    info = settings[discipline]

    item, quantity = request_work_order(info['npc-rooms'], info['npc'], info['npc_last_name'], discipline, info['logbook'], info['recipes'])

    tools = []

    if %w(Blacksmithing Weaponsmithing Armorsmithing).include?(discipline)
      tools = settings.forging_tools([])
      forge_items(info, item, quantity)
    elsif 'Tailoring' == discipline
      tools = settings.knitting_tools([])
      sew_items(info, item, quantity)
    elsif 'Shaping' == discipline
      tools = settings.shaping_tools([])
      shape_items(info, item, quantity)
    end

    find_npc(info['npc-rooms'], info['npc_last_name'])
    bput("get my #{info['logbook']} logbook", 'You get')
    fput("give log to #{info['npc']}")
    fput('stow logbook')

    repair_items(info, tools)
  end

  def repair_items(info, tools)
    walk_to info['repair-room']

    need_to_repair = tools.find do |tool_name|
      fput("get my #{tool_name}")
      result = bput("anal my #{tool_name}", 'practically in mint', 'pristine condition', 'Roundtime')
      waitrt?
      bput("put my #{tool_name} in my #{@bag}", 'You put')
      /roundtime/i =~ result
    end

    return unless need_to_repair

    tools.each do |tool_name|
      fput("get my #{tool_name}")
      case bput("give #{info['repair-npc']}", "There isn't a scratch on that", 'Just give it to me again')
      when /scratch/
        bput("put my #{tool_name} in my #{@bag}", 'You put')
      when /give/
        fput("give #{info['repair-npc']}")
        fput('stow ticket')
      end
    end

    while 'You get' == bput('get my ticket', 'You get', 'What were')
      pause 30 until 'should be ready by now' == bput('look at my ticket', 'should be ready by now', 'Looking at the')
      fput("give #{info['repair-npc']}")
      pause 1
      bput("put my #{checkright} in my #{@bag}", 'You put') if checkright
      bput("put my #{checkleft} in my #{@bag}", 'You put') if checkleft
    end
  end

  def shape_items(info, item, quantity)
    recipe = info['recipes'][item]

    items_per_stock = info['stock-volume'] / recipe['volume']
    spare_stock = info['stock-volume'] % recipe['volume'] != 0
    scrap = spare_stock || items_per_stock > quantity

    quantity.times do |count|
      if count % items_per_stock == 0
        if count > 0 && spare_stock
          fput("get my #{info['stock-name']} lumber")
          dispose_trash("#{info['stock-name']} lumber")
        end
        if count > 0
          fput('open door')
          fput('go door')
          pause 0.5 until Room.current.id
        end
        walk_to info['stock-room']
        fput("order #{info['stock-number']}")
        fput("order #{info['stock-number']}")
        find_shaping_room
        fput('stow right') if checkright
        fput('stow left') if checkleft
      end

      wait_for_script_to_complete('shape', ['log', info['pattern-book'], recipe['chapter'], item, info['stock-name'], recipe['noun']])
    end

    if scrap
      fput("get my #{info['stock-name']} lumber")
      dispose_trash("#{info['stock-name']} lumber")
    end
    if XMLData.room_title.include?('Workshop')
      fput('open door')
      fput('go door')
    end
  end

  def order_stock(number)
    fput("order #{number}")
    fput("order #{number}")
  end

  def combine_yarn
    pause
    if checkleft =~ /yarn/ && checkright =~ /yarn/
      fput('combine yarn with yarn')
    end
  end

  def sew_items(info, item, quantity)
    recipe = info['recipes'][item]

    stock_needed = (quantity * recipe['volume'] / 100.0).ceil

    if 'What were' == bput('get yarn', 'What were', 'You get')
      walk_to info['stock-room']

      stock_needed.times do |_|
        order_stock(info['stock-number'])
        combine_yarn
      end
    else
      length = bput('count my yarn', 'You count out \d+ yards').scan(/\d+/).first.to_i
      if length < recipe['volume'] * quantity
        walk_to info['stock-room']
        stock_needed.times do |_|
          order_stock(info['stock-number'])
          combine_yarn
        end
      end
    end
    pause
    fput('stow right') if checkright
    fput('stow left') if checkleft

    find_sewing_room

    quantity.times do
      wait_for_script_to_complete('sew', ['log', 'knitting', recipe['chapter'], item, recipe['noun']])
    end
  end

  def forge_items(info, item, quantity)
    recipe = info['recipes'][item]

    if recipe['part']
      walk_to info['part-room']
      quantity.times do
        fput("buy #{recipe['part']}")
        fput("stow #{recipe['part']}")
      end
    end

    items_per_stock = info['stock-volume'] / recipe['volume']
    spare_stock = info['stock-volume'] % recipe['volume'] != 0
    scrap = spare_stock || items_per_stock > quantity

    quantity.times do |count|
      if count % items_per_stock == 0
        if count > 0 && spare_stock
          fput("get my #{info['stock-name']}")
          walk_to(info['trash-room'])
          dispose_trash(info['stock-name'])
        end
        walk_to info['stock-room']
        fput("order #{info['stock-number']}")
        fput("order #{info['stock-number']}")
        fput('stow right') if checkright
        fput('stow left') if checkleft
      end
      if 'You can' == bput("inv search #{info['finisher-full']}", '^You can', 'Your .* is in')
        walk_to info['finisher-room']
        fput("order #{info['finisher-number']}")
        fput("order #{info['finisher-number']}")
        fput('stow right') if checkright
        fput('stow left') if checkleft
      end

      find_anvil(8775)
      args = ['log', info['pattern-book'], recipe['chapter'], item, 'bronze', recipe['noun']]
      args << recipe['part'] if recipe['part']
      wait_for_script_to_complete('forge', args)
    end

    if scrap
      fput("get my #{info['stock-name']}")
      walk_to(info['trash-room'])
      dispose_trash(info['stock-name'])
    end
  end

  def request_work_order(npc_rooms, npc, npc_last_name, discipline, logbook, recipes)
    find_npc(npc_rooms, npc_last_name)
    bput("get my #{logbook} logbook", 'You get')

    loop do
      case bput("ask #{npc} for challenging #{discipline} work", '^To whom', 'order for .* I need \d+ of .* quality', 'You realize you have items bundled with the logbook')
      when 'To whom'
        find_npc(npc_rooms, npc_last_name)
      when /order for (.*)\. I need (\d+) of .* quality/
        item = Regexp.last_match(1)
        quantity = Regexp.last_match(2).to_i
        if quantity <= 3 && recipes[item]
          fput('stow logbook')
          return [item, quantity]
        end
      when 'You realize you have items bundled with the logbook'
        fput('untie my logbook')
        if checkleft.include?('logbook')
          fput("drop my #{checkright}")
        else
          fput("drop my #{checkleft}")
        end
        fput('get logbook') unless checkleft.include?('logbook') || checkright.include?('logbook')
      end
    end
  end

  def find_npc(room_list, npc)
    room_list.each do |room_id|
      walk_to(room_id)
      break if DRRoom.npcs.include?(npc)
    end
  end

  def find_shaping_room
    loop do
      walk_to(8867)
      break if found_room?
      pause 60
    end
  end

  def found_room?
    %w(oak maple birch).each do |wood|
      fput("open #{wood} door")
      fput("go #{wood} door")
      pause 1
      return true if DRRoom.pcs.empty?
      fput('go door')
    end

    false
  end
end

WorkOrders.new(variable.drop(1))
