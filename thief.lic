
custom_require.call(%w[drinfomon equipmanager events spellmonitor common common-arcana common-crafting common-healing common-items common-money common-travel common-summoning common-kg])


class Thief
  include DRC
  include DRCI
  include DRCA
  include DRCT
  include MY_COMMON

  def initialize
    exit unless DRStats.thief?


    settings = get_settings
    @settings = settings
    @equipment_manager = EquipmentManager.new
    chart_data = get_data('anatomy-charts').first_aid_charts
    @booktype = 'compendium'
    @spell_index = -1
    @perception_timer = nil
    @appraisal_timer = nil
    @power_timer = nil
    @empathy_timer = nil
    @song_list = get_data('perform').perform_options
    @training_room = (settings.training_rooms || [settings.safe_room]).sample
    @ingot_container = settings.ingot_container
    @athletics_options = get_data('athletics').athletics_options
    @times_out_hunting = 0
    timers = {
        perception_timer: nil,
        appraisal_timer: nil,
        power_timer: nil
    }

    lesson_state = {}
    @state = {
        settings: settings,
        prepare_time: 0,
        spell_index: -1,
        timers: timers,
        casting_room: 8246,
        chart_data: chart_data,
        chart_state: {},
        max_concentration: DRStats.concentration
    }
    state = @state


    cycle = [
        'Outdoorsmanship',
        'Scholarship',
        'Thievery',
        'Athletics',
        'Forging',
        'Melee Mastery',
        'Outdoorsmanship',
        'Thievery',
        'Engineering',
        'Mechanical Lore',
        'Melee Mastery',
        'Thievery'
    ]
    idx = UserVars.cycle_index || -1
    while true
      pause 1
      fput "remove #{settings.hand_armor}"
      fput "stow #{settings.hand_armor}"
      pause 1
      idx = (idx + 1) % cycle.length
      walk_to(@training_room)
      case cycle[idx]
      when 'Thievery'
        wait_for_script_to_complete('steal')
        train_appraisal(timers)
      when 'Athletics'
        train_athletics(settings)
        train_appraisal(timers)
      when 'Outdoorsmanship'
        walk_to(@training_room)
        check_listening(lesson_state, settings)
        check_teaching(lesson_state, settings)
        train_outdoorsmanship(state)
        train_appraisal(timers)
      when 'Mechanical Lore'
        walk_to(@training_room)
        check_listening(lesson_state, settings)
        check_teaching(lesson_state, settings)
        train_mechanical_lore(state)
        train_appraisal(timers)
      when 'Forging'
        get_crafting(settings)
        train_appraisal(timers)
        train_forging(timers, 'blacksmithing')
      when 'Engineering'
        get_crafting(settings)
        train_appraisal(timers)
        train_engineering(timers, 'carving')
      when 'Scholarship'
        train_scholarship unless DRSkill.getxp('Scholarship') > 15
        train_appraisal(timers)
      when 'Melee Mastery'
        walk_to(settings.lockpick_room_id)
        wait_for_script_to_complete('pick')
        train_appraisal(timers)
        train_defending(settings)
        walk_to(settings.lockpick_room_id)
        wait_for_script_to_complete('pick')
        wait_for_script_to_complete('crossing-repair')
        train_appraisal(timers)
      when 'First Aid'
        walk_to(@training_room)
        train_appraisal(timers)
        check_listening(lesson_state, settings)
        check_teaching(lesson_state, settings)
        train_first_aid(state, chart_data)
        train_appraisal(timers)
      else
        count = 0
        while(count < 10)
          echo 'nothing to train?'
          pause 12
          count = count + 1
        end
      end

      UserVars.cycle_index = idx
    end
  end



  def deed_ingot_volume
    res = bput('read my deed', 'Volume:\s*\d+')
    res.scan(/\d+/).first.to_i
  end



  def train_defending(settings)
    return unless DRSkill.getxp('Melee Mastery') < 10
    @times_out_hunting = @times_out_hunting + 1 % 5
    store_crafting(settings)
    wait_for_script_to_complete('hunting-buddy')
    wait_for_script_to_complete('crossing-repair') if @times_out_hunting == 0
    get_crafting(settings)
  end


  def crossing_athletics(settings, end_exp)
    play_song?
    until DRSkill.getxp('Athletics') >= end_exp
      @athletics_options
        .reject { |data| settings.avoid_athletics_in_justice && data['justice'] }
        .each do |data|
        break unless climb?(settings, data['room'], data['targets'], end_exp)
      end
    end
  end

  def climb?(settings, room, targets, end_exp)
    maybe_prepare(@magic_state)
    targets.each do |target|
      walk_to(room)
      return true if DRRoom.npcs.length >= 3

      bput("climb #{target}", '.*')
      pause
      waitrt?
      return false if DRSkill.getxp('Athletics') >= end_exp
    end
    cast_next_spell_without_filler_in_room(@magic_state) if checkcastrt < 2
    true
  end

  def stop_play
    return unless @did_play
    return if @no_instrument
    @did_play = false
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
    Flags['ct-song'] = true
  end
  def play_song?(blocking = false)
    return true if @researching
    return false if @no_instrument
    return true if DRSkill.getxp('Performance') >= 28

    UserVars.song = @song_list.first.first unless UserVars.song
    @did_play = true
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument', 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play')
    when 'Play on what instrument'
      @no_instrument = true
      return false
    when 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play'
      return true
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
    when 'dirtiness may affect your performance'
      if DRSkill.getrank('Performance') < 20
        echo "Skipping cleaning of zills due to low rank of Performance: #{DRSkill.getrank('Performance')}" if UserVars.crossing_trainer_debug
        return true
      end
      stop_play
      clean_zills
      return play_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      stop_play
      UserVars.song = @song_list[UserVars.song] || @song_list.first.first
      return play_song?
    when 'You struggle to begin'
      if UserVars.song != @song_list.first.first
        stop_play
        UserVars.song = @song_list.first.first
        return play_song?
      end
    end

    return true unless blocking

    Flags.reset('ct-song')
    pause 1 until Flags['ct-song']
    true
  end
  def clean_zills
    cloth = @settings.cleaning_cloth

    case bput("get my #{cloth}", 'You get', 'What were you')
    when 'What were you'
      echo('You have no chamois cloth, removing Performance from training')
      @settings.crossing_training.delete('Performance')
      return
    end

    bput('remove my zills', 'You slide')

    loop do
      case bput("wipe my zills with my #{cloth}", 'Roundtime', 'not in need of drying', 'You should be sitting up')
      when 'not in need of drying'
        break
      when 'You should be sitting up'
        fix_standing
        next
      end
      pause 1
      waitrt?

      until /you wring a dry/i =~ bput("wring my #{cloth}", 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /not in need of cleaning/i =~ bput("clean my zills with my #{cloth}", 'Roundtime', 'not in need of cleaning')
      pause 1
      waitrt?
    end

    bput('wear my zills', 'You slide')
    bput("stow my #{cloth}", 'You put')
  end

  def train_athletics(settings)
    start_exp = DRSkill.getxp('Athletics')
    end_exp = [start_exp + 15, 29].min
    crossing_athletics(settings, end_exp)
  end

end


Thief.new