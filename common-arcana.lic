# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-arcana
=end

custom_require.call(%w(common common-travel))

module DRCA
  module_function

  def infuse_om(harness, amount)
    return unless amount

    success = ['having reached its full capacity', 'a sense of fullness']
    failure = ['as if it hungers for more', 'Your infusion fails completely', 'You don\'t have enough harnessed mana to infuse that much', 'You have no harnessed']

    loop do
      pause 5 while checkmana <= amount
      DRC.bput("harness #{amount}", 'You tap into', 'Strain though you may') if harness
      pause 0.5
      waitrt?
      break if success.include?(DRC.bput("infuse om #{amount}", success + failure))
      pause 0.5
      waitrt?
    end
  end

  def activate_khri?(kneel, preps, ability)
    return false if DRSpells.active_spells[ability]
    DRCT.retreat if kneel
    DRC.bput('kneel', 'You kneel', 'You are already', 'You rise') if kneel && !kneeling?
    result = DRC.bput(ability, preps)
    waitrt?
    DRC.fix_standing

    ['Your body is willing', 'You have not recovered'].include?(result)
  end

  def buff(spell, settings)
    DRC.bput("pre #{spell['abbrev']} #{spell['mana']}", settings.prep_messages)
    if spell['cambrinth']
      find_cambrinth(settings)

      charge_and_invoke(settings, spell['cambrinth'])

      stow_cambrinth(settings)
    end
    waitcastrt?
    DRC.bput('cast', settings.cast_messages)
  end

  def find_cambrinth(settings)
    find_cambrinth4(settings.held_cambrinth, settings.cambrinth, settings.stored_cambrinth, settings.cambrinth_cap)
  end

  def find_cambrinth4(held_cambrinth, cambrinth, stored_cambrinth, cambrinth_cap)
    if held_cambrinth && DRSkill.getrank('Arcana').to_i < cambrinth_cap * 2 + 100
      fput("remove my #{cambrinth}")
    elsif stored_cambrinth
      fput("get my #{cambrinth}")
    end
  end

  def stow_cambrinth(settings)
    stow_cambrinth5(settings.cambrinth, settings.held_cambrinth, settings.stored_cambrinth, settings.cambrinth_cap)
  end

  def stow_cambrinth5(cambrinth, held_cambrinth, stored_cambrinth, cambrinth_cap)
    if held_cambrinth && DRSkill.getrank('Arcana').to_i < cambrinth_cap * 2 + 100
      fput("wear my #{cambrinth}")
    elsif stored_cambrinth
      fput("stow my #{cambrinth}")
    end
  end

  def charge_and_invoke(settings, charges)
    charge_and_invoke2(charges, settings.cambrinth, settings.charge_messages, settings.invoke_messages)
  end

  def charge_and_invoke2(charges, cambrinth, charge_messages, invoke_messages)
    charges.each do |mana|
      charge(cambrinth, mana, charge_messages)
    end

    invoke(cambrinth, invoke_messages)
  end

  def invoke(cambrinth, invoke_messages)
    DRC.bput("invoke my #{cambrinth}", invoke_messages)
    pause
    waitrt?
  end

  def charge(cambrinth, mana, charge_messages)
    DRC.bput("charge my #{cambrinth} #{mana}", charge_messages)
    pause
    waitrt?
  end
end
