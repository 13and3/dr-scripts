# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  A large set of helper functions for common actions related to crafting.
=end

custom_require.call(%w(common common-travel))

module DRCC
  def empty_crucible?
    ['nothing in there'].include?(DRC.bput('look in cruc', 'nothing in there', 'you see'))
  end
  module_function :empty_crucible?

  def find_empty_crucible
    DRCT.find_empty_room(
      [8774, 19_030, 8773, 8777, 8779], 8775, proc { empty_crucible? })
  end
  module_function :find_empty_crucible

  def clean_anvil?
    ['surface looks clean and ready'].include?(DRC.bput('look on anvil', 'surface looks clean and ready', 'anvil you see'))
  end
  module_function :clean_anvil?

  def find_anvil(idle_room = nil)
    DRCT.find_empty_room([8909, 8910, 8911, 8777, 8778, 760], idle_room, proc { clean_anvil? })
  end
  module_function :find_anvil

  def find_sewing_room
    DRCT.find_empty_room([19_037, 19_036, 16_670, 19_063, 19_064, 19_065], 16_661)
  end
  module_function :find_sewing_room

  def recipe_lookup(recipes, item_name)
    match_names = recipes.map { |x| x['name'] }.select { |x| x =~ /#{item_name}/i }
    case match_names.length
    when 0
      echo("No recipe in base-crafting.yaml matches #{item_name}")
      nil
    when 1
      recipes.find { |x| x['name'] =~ /#{item_name}/i }
    else
      echo('Please select desired recipe ;send #')
      match_names.each_with_index { |x, i| respond "    #{i + 1}: #{x}" }
      line = get until line.strip =~ /^([0-9]+)$/
      item_name = match_names[Regexp.last_match(1).to_i - 1]
      recipes.find { |x| x['name'] =~ /#{item_name}/i }
    end
  end
  module_function :recipe_lookup

  def find_recipe(chapter, match_string)
    fput("turn my book to chapter #{chapter}")
    recipe = DRC.bput('read my book', "Page \\d+.*#{match_string}").split('Page').find { |x| x =~ /#{match_string}/i }
    recipe =~ /(\d+):/
    Regexp.last_match(1)
  end
  module_function :find_recipe

  def get_crafting_item(name, belt = nil)
    waitrt?
    if belt && belt['items'].find { |item| /\b#{name}/i =~ item || /\b#{item}/i =~ name }
      if 'untie what' == DRC.bput("untie my #{name} from my #{belt['name']}", 'you remove', 'untie what')
        echo("You seem to be missing: #{name} from your #{belt['name']}")
        exit
      end
    else
      case DRC.bput("get my #{name}", '^You get', '^You are already', '^What do you', '^What were you')
      when 'What do you', 'What were you'
        echo("You seem to be missing: #{name}")
        exit
      end
    end
  end
  module_function :get_crafting_item

  def stow_crafting_item(name, bag, belt = nil)
    waitrt?
    if belt && belt['items'].find { |item| /\b#{name}/i =~ item || /\b#{item}/i =~ name }
      DRC.bput("tie my #{name} to my #{belt['name']}", 'you attach')
    else
      if /is too \w+ to fit/ =~ DRC.bput("put my #{name} in my #{bag}", 'You put your', 'What were you referring to', 'is too \w+ to fit')
        fput("stow my #{name}")
      end
    end
  end
  module_function :stow_crafting_item
end
