=begin
    Adapted by Seped, original source from Mallitek. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    USAGE:

    ;forge <log or stow> <chapter> <page> <ingot type> <item noun> <assemble item noun>

    ;forge log 2 1 steel sword hilt

    arg1: wether to add the item to your logbook or just stow it
    arg2: chapter of weapon book
    arg3: page of book
    arg4: metal type of the ingot in your bag
    arg5: item noun to make
    arg6: item component noun

    Edit the @bag = "backpack" line in this script if you don't use a backpack.

    >The Following is the header from original source

    this script was written for my own personal use feel free to costumize as you wish, thanks. ~THIS SCRIPT IS A 5 VARIABLE SCRIPT ALL MUST BE USED~
        Usage

        This script was my first script and was written to help me make basic crafting of all weaponsmithing products currently. Script usage is .forge <book chapter number> <book page number> <type of metal ingot> <what your making> <what to assemble> Example .forge 4 19 bronze mallet haft
        would make a bronze mallet with a woodfinished haft

        The script uses a backpack so please make sure you are wearing a backpack containing tools and assembles and ingots.
        set-up ideas from Caraamon.
        At the end of making a weapon you may eaither "blink" to make another or goto the grindstone and "glance" to finish grinding what you have made and turn in. ENJOY!!!!!

        Script weaponsmithing by Mallitek
        Please report any bugs found to SkotyDawg2@gmail.com and ill fix and supply you with a new version thanks!
=end

if variable.length < 7
    echo('\nINVALID ARGUMENTS\nUSAGE: \n;forge <log or stow> <chapter> <page> <ingot type> <item noun> <assemble item noun>')
    exit
end

def main
    @bag = "backpack"

    @finish = variable[1]
    @chapter = variable[2]
    @page = variable[3]
    @metal = variable[4]
    @item = variable[5]
    @part = variable[6]

    %w(common).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    smith
end

def get_or_fail(item)
    waitrt?
    case bput("get my #{item} from my backpack", '^You get', '^You are already', '^What do you')
    when 'What do you'
        echo("You seem to be missing a #{item}")
        exit
    end
end

def store_thing(item)
    waitrt?
    bput("put my #{item} in my #{@bag}", 'You put your', 'What were you referring to')
end

def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
end

def smith
    get_or_fail("weapon book")
    turn_to("chapter #{@chapter}")
    turn_to("page #{@page}")
    bput("study my book", 'Roundtime')
    store_thing("book")
    get_or_fail("#{@metal} ingot")
    bput("put my ingot on anvil", 'You put your')
    get_or_fail("hammer")
    get_or_fail("tongs")
    pound("ingot")
end

def pound(item=@item)
    waitrt?
    case bput("pound #{item} on anvil with my hammer",
        'You must be holding',
        'needs more fuel', 'need some more fuel',
        'As you finish working the fire dims and produces less heat',
        'Roundtime',
        'slack tub',
        'straightening along the horn of the anvil', 'would benefit from some soft reworking.' #typo?
        )
    when 'You must be holding'
        get_or_fail("hammer")
        pound(item)
    when 'needs more fuel', 'need some more fuel'
        add_fuel
    when 'As you finish working the fire dims and produces less heat'
        bellows
    when 'slack tub'
        slack
    when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.'
        turn_item
    else
        pound
    end
end

def add_fuel
    store_thing("tongs")
    get_or_fail("shovel")
    bput("push fuel with my shovel", 'Roundtime')
    waitrt?
    store_thing("shovel")
    get_or_fail("tongs")
    pound
end

def bellows
    store_thing("hammer")
    get_or_fail("bellows")
    bput("push my bellows", 'Roundtime')
    waitrt?
    store_thing("bellows")
    get_or_fail("hammer")
    pound
end

def turn_item
    waitrt?
    case bput("turn #{@item} on anvil with my tongs", 'slack tub', 'Roundtime')
    when 'slack tub'
        slack
    else
        pound
    end
end

def slack
    store_thing("hammer")
    store_thing("tongs")
    #dead code here for getting and storing an ingot I think
    bput("push tub", 'Roundtime')
    waitrt?
    bput("get #{@item} from anvil", 'You get')
    get_or_fail(@part)
    bput("assemble my #{@item} with my #{@part}", 'affix it securely in place', 'and tighten the pommel to secure it')
    waitrt?
    grind_item
end

def find_empty_room
    [8909,8910,8911].each do |room_id|
        walk_to(room_id)
        return true if checkpcs.nil?
    end
    return false
end

def grind_item
    until find_empty_room
        echo("sleeping until grindstone opens")
        pause 30
    end

    4.times{ bput("turn grind", 'Roundtime'); waitrt? }
    bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
    waitrt?
    add_oil
end

def add_oil
    waitrt?
    get_or_fail("oil")
    bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches')
    case @finish
    when /log/
        waitrt?
        logbook_item
    when /stow/
        waitrt?
        store_thing("oil")
        store_thing(@item)
    end
end

def logbook_item
    store_thing("oil")
    get_or_fail("logbook")
    bput("bundle my #{@item} with my logbook", 'You notate the', 'This work order has expired') #need the failure case for low quality.
    store_thing("logbook")
end

main