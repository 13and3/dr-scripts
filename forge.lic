=begin
    Adapted by Seped, original source from Mallitek. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    USAGE:

    ;forge <log or stow> <book type> <chapter> <page> <ingot type> <item noun> <assemble item noun>

    ;forge log weaponsmithing 2 1 steel sword hilt

    arg1: whether to add the item to your logbook or just stow it
    arg2: type of book (blacksmithing, armorsmithing, weaponsmithing)
    arg3: chapter of book
    arg4: page of book
    arg5: metal type of the ingot in your bag
    arg6: item noun to make
    arg7: item component noun (optional)

    Edit the @bag = 'backpack' line in this script if you don't use a backpack.
    Edit the @hammer = 'diagonal-peen hammer' line in this script if you use a different forging hammer.
=end

if variable.length < 7
  echo('\nINVALID ARGUMENTS\nUSAGE: \n;forge <log or stow> <chapter> <page> <ingot type> <item noun> <assemble item noun>')
  exit
end

def main
  @bag = 'backpack'
  @hammer = 'diagonal-peen hammer'

  _, @finish, @book_type, @chapter, @page, @metal, @item, @part = variable

  %w(common).each do |script_name|
    unless running?(script_name)
      start_script script_name
      pause 0.5
    end
  end

  smith
end

def get_or_fail(item)
  waitrt?
  case DRC.bput("get my #{item} from my #{@bag}", '^You get', '^You are already', '^What do you')
  when 'What do you'
    echo("You seem to be missing a #{item}")
    exit
  end
end

def store_thing(item)
  waitrt?
  DRC.bput("put my #{item} in my #{@bag}", 'You put your', 'What were you referring to')
end

def turn_to(section)
  DRC.bput("turn my book to #{section}", 'You turn your', 'The book is already')
end

def smith
  get_or_fail("#{@book_type} book")
  turn_to("chapter #{@chapter}")
  turn_to("page #{@page}")
  DRC.bput('study my book', 'Roundtime')
  store_thing('book')
  get_or_fail("#{@metal} ingot")
  DRC.bput('put my ingot on anvil', 'You put your')
  get_or_fail(@hammer)
  get_or_fail('tongs')
  pound('ingot')
end

def pound(item = @item)
  waitrt?
  case DRC.bput("pound #{item} on anvil with my hammer",
                'You must be holding',
                'needs more fuel', 'need some more fuel',
                'As you finish working the fire dims and produces less heat',
                'Roundtime',
                'slack tub',
                'straightening along the horn of the anvil', 'would benefit from some soft reworking.' # typo?
               )
  when 'You must be holding'
    get_or_fail(@hammer)
    pound(item)
  when 'needs more fuel', 'need some more fuel'
    add_fuel
  when 'As you finish working the fire dims and produces less heat'
    bellows
  when 'slack tub'
    slack
  when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.'
    turn_item
  else
    pound
  end
end

def add_fuel
  store_thing('tongs')
  get_or_fail('shovel')
  DRC.bput('push fuel with my shovel', 'Roundtime')
  waitrt?
  store_thing('shovel')
  get_or_fail('tongs')
  pound
end

def bellows
  store_thing(@hammer)
  get_or_fail('bellows')
  DRC.bput('push my bellows', 'Roundtime')
  waitrt?
  store_thing('bellows')
  get_or_fail(@hammer)
  pound
end

def turn_item
  waitrt?
  case DRC.bput("turn #{@item} on anvil with my tongs", 'slack tub', 'Roundtime')
  when 'slack tub'
    slack
  else
    pound
  end
end

def slack
  store_thing(@hammer)
  store_thing('tongs')
  # dead code here for getting and storing an ingot I think
  DRC.bput('push tub', 'Roundtime')
  waitrt?
  DRC.bput("get #{@item} from anvil", 'You get')

  if 'blacksmithing'.include? @book_type
    get_or_fail('oil')
    fput("pour oil on my #{@item}")
    store_thing('oil')
  elsif 'armorsmithing'.include? @book_type
    echo('*** NOT YET IMPLEMENTED ***')
    # For armor, you will need to purchase a set of pliers. Rather than using a grindstone, the various pieces of armor must be woven together by using PULL <armor> WITH MY PLIERS. This may take multiple steps of pulling, each with a variety of messaging, but continue to pull. In addition, during these pulls, you may need to ASSEMBLE additional pieces, but this is normal.
  elsif 'weaponsmithing'.include? @book_type
    get_or_fail(@part)
    DRC.bput("assemble my #{@item} with my #{@part}", 'affix it securely in place', 'and tighten the pommel to secure it')
    waitrt?
    grind_item
  end
end

def find_empty_grindstone_room?
  [8909, 8910, 8911].each do |room_id|
    DRC.walk_to(room_id)
    return true if checkpcs.nil?
  end
  false
end

def grind_item
  until find_empty_grindstone_room?
    echo('sleeping until grindstone opens')
    pause 30
  end

  4.times { DRC.bput('turn grind', 'Roundtime'); waitrt? }
  DRC.bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
  waitrt?
  add_oil
end

def add_oil
  waitrt?
  get_or_fail('oil')
  DRC.bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches')
  case @finish
  when /log/
    waitrt?
    logbook_item
  when /stow/
    waitrt?
    store_thing('oil')
    store_thing(@item)
  end
end

def logbook_item
  store_thing('oil')
  get_or_fail('logbook')
  DRC.bput("bundle my #{@item} with my logbook", 'You notate the', 'This work order has expired') # need the failure case for low quality.
  store_thing('logbook')
end

main
