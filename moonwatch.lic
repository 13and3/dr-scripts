=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#moonwatch
=end

custom_require.call(%w(common events))

arg_definitions = [
  [
    { name: 'debug', regex: /debug/i, optional: true }
    { name: 'install', regex: /install/i, optional: true , description: 'Add an alias for the command moon that will display moon status.'}
  ]
]

args = parse_args(arg_definitions)

$debug_mode_mm = UserVars.moon_debug || args.debug

if args.install
  UpstreamHook.run("<c>;alias add --global moon = ;eq respond(\"#{UserVars.moons['katamba']['pretty']} : #{UserVars.moons['yavash']['pretty']} : #{UserVars.moons['xibar']['pretty']}\")")
end

UserVars.moons = { 'katamba' => {}, 'yavash' => {}, 'xibar' => {}, 'visible' => [] }
UserVars.sun = {}

Settings['xibar'] ||= Time.now
Settings['yavash'] ||= Time.now
Settings['katamba'] ||= Time.now

Settings['rise'] = {}

Settings['rise']['yavash'] = 175 * 60
Settings['rise']['xibar'] = 172 * 60
Settings['rise']['katamba'] = 174 * 60

#Time until moon sets after rising

Settings['set'] = {}

Settings['set']['yavash'] = 177 * 60
Settings['set']['xibar'] = 174 * 60
Settings['set']['katamba'] = 177 * 60

def moon_change(moon, is_up)
  echo("moon_change #{moon}:#{is_up}") if $debug_mode_mm
  snapshot = Time.now
  snapshot = (snapshot - snapshot.sec).utc.to_s
  update_moon_data(moon, {'time'=> snapshot, 'event'=> is_up ? 'rise' : 'set'  })
end

def update_moon_info(latest_data)
  %w(katamba yavash xibar).each do |moon|
    data = latest_data[moon]
    return unless data
    event = data['event']
    coming_event = (['rise', 'set'] - [event]).first
    snapshot = Time.parse(data['time']).localtime

    if UserVars.moons[moon][event] || UserVars.moons[moon][coming_event].nil?
      UserVars.moons[moon].delete(event)
      UserVars.moons[moon][coming_event] = snapshot + Settings[coming_event][moon]
    end

    if event == 'rise'
      UserVars.moons[moon]['pretty'] = "#{moon} is up for #{((UserVars.moons[moon][coming_event] - Time.now) / 60).to_i} minutes"
      UserVars.moons['visible'].push(moon) unless UserVars.moons['visible'].include?(moon)
    else
      UserVars.moons[moon]['pretty'] = "#{moon} will rise in #{((UserVars.moons[moon][coming_event] - Time.now) / 60).to_i} minutes"
      UserVars.moons['visible'].delete(moon) if UserVars.moons['visible'].include?(moon)
    end
  end
end

loop do
  line = script.gets?
  case line
  when /^(Katamba|Xibar|Yavash) sets/
    moon_change(Regexp.last_match(1).downcase, false)
  when /^(Katamba|Xibar|Yavash) slowly rises/
    moon_change(Regexp.last_match(1).downcase, true)
  # when /heralding another fine day|rises to create the new day|as the sun rises, hidden|as the sun rises behind it|faintest hint of the rising sun|The rising sun slowly/

  # when /The sun sinks below the horizon|night slowly drapes its starry banner|sun slowly sinks behind the scattered clouds and vanishes|grey light fades into a heavy mantle of black/

  end
  update_moon_info(get_all_moon_data)
  pause 0.1 unless line
end
