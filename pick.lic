=begin
    Authored by Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script requires two arguments, with a third optional

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open, this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.

    The script will look for suitable disposal sources in the room, or drop refuse on the ground

    Before running this script for the first time:
    * Download scripts "common", "events", and "drinfomon"
    * ;trust each of the above scripts.

    * You can turn on debug mode with ;e UserVars.lockpick_debug = true


    #TODO Maintain spells or buffs for lockpicking
    #TODO Open closed containers
=end

if variable.length < 3 || variable.length > 4
    echo '******
    This script requires two arguments, with a third optional

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open,
    this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.'
    exit
end

UserVars.box_source = variable[1]
UserVars.box_storage = variable[2]
UserVars.stop_on_ml = variable.length == 4

def main
    # Run helper scripts
    %w(common drinfomon events).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    empty_hands
    remove_armor
    fput "remove knuckle"
    fput "sit"

    boxes = get_boxes(UserVars.box_source)

    boxes.each{|box| attempt_open(box)}

    fput "wear knuckle"
    wear_armor
    fput "stand"
end

def get_boxes(container)
    result = bput("rummage /B my #{container}", 'but there is nothing in there like that\.', 'looking for boxes and see .*')
    return [] if result == 'but there is nothing in there like that.'

    boxes_text = extract_boxes_text(result)

    list_to_nouns(boxes_text)
end

def extract_boxes_text(raw)
    raw.match(/looking for boxes and see (.*)\.$/).to_a[1]
end

def attempt_open(box)
    echo "attempt_open(#{box})" if UserVars.lockpick_debug
    bput("get my #{box} from my #{UserVars.box_source}", 'You get a .* from inside your ')

    unless disarm(box)
        bput("put my #{box} in my #{UserVars.box_storage}", 'You put your .* in your ')
        return
    end

    attempt_pick(box)

    #TODO loot(box)

end

def attempt_pick(box)
    get_lockpick
    until pick(box)
end

def pick(box)
    case bput("pick my #{box} ident", *(pick_careful+pick_quick+pick_blind+pick_retry))
    when *pick_careful
        pick(box, 'careful')
    when *pick_quick
        pick(box, 'quick')
    when *pick_blind
        pick(box, 'blind')
    when *pick_retry
        pick(box)
    end
end

def pick(box, speed)
    Flags.add('pick-more', 'You discover another')
    until "Roundtime" == bput("pick my #{box} speed", 'You are unable to make any progress towards opening the lock', roundtime[0] )
        get_lockpick
    end
    return Flags['pick-more']
end

def get_lockpick
    unless checkleft
        case bput("get my lockpick", 'referring to\?', '^You get a ')
        when 'referring to?'
            echo "OUT OF LOCKPICKS"
            beep
            exit
        end
    end
end

def disarm(box)
    echo "disarm(#{box})" if UserVars.lockpick_debug
    case bput("disarm my #{box} identify", *disarm_ident_responses)
    when *failed_ident
        disarm_box(box)
    when *too_hard
        return false
    when *(careful+roundtime)
        disarm(box, 'careful')
    when *quick
        disarm(box, 'quick')
    when *normal
        disarm(box, 'normal')
    end
end

def disarm(box, speed)
    echo "disarm(#{box}, #{speed})" if UserVars.lockpick_debug
    Flags.add('disarm-more', 'not yet fully disarmed')

    case bput("disarm my #{box} #{speed}", *(failed_disarm+repeat_disarm+repeat_with_care+roundtime))
    when *failed_disarm
        beep
        beep
        echo("**SPRUNG TRAP**")
        exit
    when *repeat_disarm
        disarm(box,speed)
    when *repeat_with_care
        disarm(box, 'careful')
    end

    analyze(box)

    disarm(box) if Flags['disarm-more']
end

def analyze(box)
    case bput("disarm #{box} analyze", /You've already analyzed/, /You are unable to determine a proper method/, roundtime[0] )
    when /You are unable to determine a proper method/
        analyze(box)
        return
    end
    harvest(box)
end

def harvest(box)
    case bput("disarm #{box} harvest",
        /You fumble around with the trap apparatus/,
        /much for it to be successfully harvested/,
        /completely unsuitable for harvesting/,
        /previous trap have already been completely harvested/,
        roundtime[0])
    when *roundtime
        dispose_trash(checkleft)
    else
        harvest(box)
        return
    end
end

def pick_careful
    [
        /lock has the edge on you, but you've got a good shot at/,
        /You have some chance of being able to/,
        /odds are against you/,
        /would be a longshot/,
        /You have an amazingly minimal chance/,
    ]
end

def pick_quick
    [
        /trivially constructed piece of junk barely worth your time/,
        /will be a simple matter for you to unlock/,
        /should not take long with your skills/,
        /You think this lock is precisely at your skill level/,
        /with only minor troubles/,
    ]
end

def pick_blind
    [
        /trivially constructed gadget which you can take down any time/,
        /An aged grandmother could/,
        /you could do it blindfolded/,
        /You really don't have any chance/,
        /Prayer would be a good start for any/,
        /You could just jump off a cliff and save/,
        /You probably have the same shot as a snowball/,
        /A pitiful snowball encased in the Flames/,
    ]
end

def pick_retry
    [
        /fails to teach you anything about the lock guarding it/
    ]
end

def disarm_ident_responses
    failed_ident+too_hard+careful+quick+normal+roundtime
end

def failed_disarm
    [
        /lock springs out and stabs you painfully in the finger./,
        /An acrid stream of sulfurous air hisses quietly/,
        /A stream of corrosive acid sprays out from the/,
        /With a sinister swishing noise, a deadly sharp scythe blade whips out the front of the/,
        /There is a sudden flash of greenish light, and a huge electrical charge sends you flying/,
        /A stoppered vial opens with a pop and cloud of thick green vapor begins to pour out of the/,
        /breaks in half. A glass sphere on the seal begins to glow with an eerie black light/,
        /Just as your ears register the sound of a sharp snap/,
        /Looking at the needle, you notice with horror the rust colored coating on the tip./,
        /You barely have time to register a faint click before a blinding flash explodes around you/,
        /Moving with the grace of a pregnant goat, you carelessly flick at the piece of metal causing/,
        /You make a small hole in the side of the box and take deep breath to blow the powder free but a/,
        /With a cautious hand, you attempt to undo the string tying the bladder to the locking mechanism/,
        /The dart flies though your fingers and plants itself solidly in your forehead\!/,
        /Almost casually, you press on the tiny hammer set to break the tube. The hammer slips from its locked/,
        /Nothing happened. Maybe it was a dud./,
        /You get a feeling that something isn't right. Before you have time to think what it might be you find.../,
        /and emits a sound like tormented souls being freed, then fades away suddenly./,
        /has gotten much bigger\!/,
        /and clumsily shred the fatty bladder behind it in the process./,
        /liquid shadows/,
        /You wiggle the milky-white tube back and forth for a few moments in an attempt to remove it from/,
        /With a nasty look and a liberal amount of hurled, unladylike epithets, she wiggles back inside and slams/,
        /Not sure where to start, you begin by prying off the body of the crusty scarab, hoping to break it free/,
        /You feel like you've done a good job of blocking up the pinholes, until you peer closely to examine/,
    ]
end

def repeat_disarm
    [
        /You work with the trap for a while but are unable to make any progress/
    ]
end

def repeat_with_care
    [
        /something to shift/
    ]
end

def failed_ident
    [
        /fails to reveal to you what type of trap protects it/,
        /something to shift/
    ]
end

def too_hard
    [
        /would be a longshot/,
        /You have an amazingly minimal chance/,
        /You really don't have any chance/,
        /Prayer would be a good start for any/,
        /You could just jump off a cliff and save/,
        /You probably have the same shot as a snowball/,
        /A pitiful snowball encased in the Flames/,
    ]
end

def careful
    [
        /covered black scarab of some unidentifiable substance clings to the/,
        /are covered with a thin metal circle that has been lacquered with/,
        /with only minor troubles/,
        /should not take long with your skills/,
        /trap has the edge on you, but you've got a good shot at disarming/,
        /You have some chance of being able to disarm/,
        /odds are against you/,
    ]
end

def quick
    [
        /trivially constructed gadget which you can take down any time/,
        /This trap is a laughable matter, you could do it blindfolded/,
        /An aged grandmother could defeat this trap in her sleep/,
    ]
end


def normal
    [
        /will be a simple matter for you to disarm/,
        /You think this trap is precisely at your skill level/,
    ]
end

def roundtime
    [
        /Roundtime/
    ]
end



main




# goto pick.quick

# pick.careful:

# var picktype careful
# goto pick.anal

# pick.unknown:

# echo *** Unknown Lock Difficulty -- using normal.

# pick.normal:
# var picktype

# goto pick.anal

# pick.quick:
# var picktype quick

# goto pick.anal

# pick.blind:

# var picktype blind

# pick.anal:
# var location pick.anal
# match pick.anal You are unable to determine anything useful about the lock
# match pick.lock This lock has already helpfully been analyzed...
# match pick.lock Roundtime

# put pick my %box anal
# goto retry

# pick.lock:
# var location pick.lock
# match pick.lock You are unable to make any progress towards opening the lock.
# match pick.broke just broke
# match pick.broke Find a more appropriate tool and try again!
# match pick.ident You discover another
# match pick.open Roundtime

# put pick my %box %picktype
# goto retry


# pick.broke:

# var location pick.broke
# match pick.lock you get a
# match pick.nopick referring to?
# put get lockpick from from my $lockpicks
# goto retry


# pick.open:
# store.pick:
# var location store.pick
# match open.loot You put
# match open.loot What were
# put put lockp in my $lockpicks

# open.loot:
# action var loot $1 when ^In the .+ you see (.*)\.
# put open %box
# waitfor In the

# gosub Base.ListExtract loot loot_items void

# open.item:
# jscall item doShift("loot_items")
# if %item <> 0 then goto loot.loot
# else goto disarm.break

# loot.loot:
# pause 1
# if contains("%coins", "%item") then {
# put get coin
# goto open.item
# }
# if contains("%keep", "%item") then {
#     put get %item
#     put stow %item
#     goto open.item
# }
# if contains("%trash", "%item") then {
#     put get %item
#     if %trashbag <> 0 then put put %item in %trashbag
#     else put drop %item
#     goto open.item
# }

# echo ***New Item***
# put get %item
# put stow %item
# goto open.item


# disarm.break:
# var location disarm.break
# match disarm.loop Roundtime
# PUT dismantle %box
# goto retry
# goto disarm.loop
# disarm.done: