=begin
    Authored by Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script requires two arguments, with a third optional

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open, this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.

    The script will look for suitable disposal sources in the room, or drop refuse on the ground

    Before running this script for the first time:
    * Download scripts "common", and "drinfomon"
    * ;trust each of the above scripts.

    * You can turn on debug mode with ;e UserVars.lockpick_debug = true


    #TODO Maintain spells or buffs for lockpicking
    #TODO Open closed containers
=end

if variable.length < 3 || variable.length > 4
    echo '******
    This script requires two arguments, with a third optional

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open,
    this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.'
    exit
end

UserVars.box_source = variable[1]
UserVars.box_storage = variable[2]
UserVars.stop_on_ml = variable.length == 4

def main

    # Run helper scripts
    %w(common drinfomon ).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    boxes = get_boxes(UserVars.box_source)

    echo "#{boxes}"
end

def get_boxes(container)
    result = bput("rummage /B my #{container}", 'but there is nothing in there like that\.', 'looking for boxes and see .*')
    return [] if result == 'but there is nothing in there like that.'

    boxes_text = extract_boxes_text(result)

    boxes = list_to_nouns(boxes_text)
end

def extract_boxes_text(raw)
    raw.match(/looking for boxes and see (.*)\.$/).to_a[1]
end

main

# var coins coin|coins
# var keep nugget|tsavorite|zircon|quartz|chalc|diop|coral|moonstone|onyx|topaz|amber|pearl|chryso|lazuli|turquoise|bloodstone|hematite|morganite|sapphire|agate|bar|carnelian|diamond|crystal|emerald|ruby|tourmaline|tanzanite|jade|ivory|sunstone|iolite|beryl|garnet|alexandrite|amethyst|citrine|aquamarine|star-stone|crystal|kunzite|stones
# var trash leaf|pestle|mortar|label|runestone|flower

# gosub get.contents %boxbag

# disarm.loop:
# jscall box doShift("contents_n")
# if %box <> 0 then {
# put get %box from my %boxbag
# goto disarm.ident
# }
# else goto disarm.done

# disarm.ident:
# var location disarm.ident
# match disarm.ident fails to reveal to you what type of trap protects it
# match disarm.ident something to shift
# match disarm.stop would be a longshot
# match disarm.stop You have an amazingly minimal chance
# match disarm.stop You really don't have any chance
# match disarm.stop Prayer would be a good start for any
# match disarm.stop You could just jump off a cliff and save
# match disarm.stop You probably have the same shot as a snowball
# match disarm.stop A pitiful snowball encased in the Flames
# match disarm.careful covered black scarab of some unidentifiable substance clings to the
# match disarm.careful are covered with a thin metal circle that has been lacquered with
# match disarm.quick trivially constructed gadget which you can take down any time
# match disarm.quick This trap is a laughable matter, you could do it blindfolded
# match disarm.quick An aged grandmother could defeat this trap in her sleep
# match disarm.normal will be a simple matter for you to disarm
# match disarm.normal You think this trap is precisely at your skill level
# match disarm.careful with only minor troubles
# match disarm.careful should not take long with your skills
# match disarm.careful trap has the edge on you, but you've got a good shot at disarming
# match disarm.careful You have some chance of being able to disarm
# match disarm.careful odds are against you
# match disarm.unknown Roundtime

# put disarm my %box identify
# goto retry

# disarm.stop:

# echo *** Too Hard to Disarm!

# put put %box in %stowbag
# goto disarm.loop

# disarm.unknown:
# echo *** Unknown Trap Difficulty -- using CAREFUL!
# disarm.careful:
# var disarmtype careful
# goto disarm.disarm

# disarm.normal:
# var disarmtype
# goto disarm.disarm

# disarm.quick:
# var disarmtype quick
# goto disarm.disarm

# disarm.disarm:
# var location disarm.disarm
# match disarm.more not yet fully disarmed.
# match disarm.careful something to shift
# match disarm.fail lock springs out and stabs you painfully in the finger.
# match disarm.fail An acrid stream of sulfurous air hisses quietly
# match disarm.fail A stream of corrosive acid sprays out from the
# match disarm.fail With a sinister swishing noise, a deadly sharp scythe blade whips out the front of the
# match disarm.fail There is a sudden flash of greenish light, and a huge electrical charge sends you flying
# match disarm.fail A stoppered vial opens with a pop and cloud of thick green vapor begins to pour out of the
# match disarm.fail breaks in half. A glass sphere on the seal begins to glow with an eerie black light
# match disarm.fail Just as your ears register the sound of a sharp snap
# match disarm.fail Looking at the needle, you notice with horror the rust colored coating on the tip.
# match disarm.fail You barely have time to register a faint click before a blinding flash explodes around you
# match disarm.fail Moving with the grace of a pregnant goat, you carelessly flick at the piece of metal causing
# match disarm.fail You make a small hole in the side of the box and take deep breath to blow the powder free but a
# match disarm.fail With a cautious hand, you attempt to undo the string tying the bladder to the locking mechanism
# match disarm.fail The dart flies though your fingers and plants itself solidly in your forehead!
# match disarm.fail Almost casually, you press on the tiny hammer set to break the tube. The hammer slips from its locked
# match disarm.fail Nothing happened. Maybe it was a dud.
# match disarm.fail You get a feeling that something isn't right. Before you have time to think what it might be you find...
# match disarm.fail and emits a sound like tormented souls being freed, then fades away suddenly.
# match disarm.fail has gotten much bigger!
# match disarm.fail and clumsily shred the fatty bladder behind it in the process.
# match disarm.fail "liquid shadows"
# match disarm.fail You wiggle the milky-white tube back and forth for a few moments in an attempt to remove it from
# match disarm.fail With a nasty look and a liberal amount of hurled, unladylike epithets, she wiggles back inside and slams
# match disarm.fail Not sure where to start, you begin by prying off the body of the crusty scarab, hoping to break it free
# match disarm.fail You feel like you've done a good job of blocking up the pinholes, until you peer closely to examine
# match disarm.disarm You work with the trap for a while but are unable to make any progress.
# match disarm.pick Roundtime

# put disarm my %box %disarmtype
# goto retry

# disarm.more:

# var followup disarm.ident
# goto disarm.anal

# disarm.pick:

# var followup pick.getpick
# goto disarm.anal

# disarm.fail:
# echo ***FAILED DISARM***
# goto disarm.done


# disarm.anal:
# var location disarm.anal
# match disarm.harvest You've already analyzed
# match disarm.anal You are unable to determine a proper method
# match disarm.harvest Roundtime
# put disarm my %box anal
# goto retry

# disarm.harvest:

# match disarm.harvest You fumble around with the trap apparatus
# match %followup much for it to be successfully harvested.
# match %followup completely unsuitable for harvesting.
# match %followup previous trap have already been completely harvested.
# match disarm.empty.left Roundtime

# put disarm my %box harv
# goto retry

# disarm.empty.left:
# if %trashbag <> 0 then put put $lefthandnoun in %trashbag
# else put drop $lefthandnoun
# goto %followup

# pick.getpick:
# var location pick.getpick
# match pick.ident You get a
# match pick.nopick referring to?
# put get lockpick from my $lockpicks
# goto retry

# pick.nopick:

# echo *** No more lockpicks, or try a different container.
# goto disarm.done

# pick.ident:
# var location pick.ident
# match pick.getpick Find a more appropriate tool and try again!
# match pick.open It's not even locked, why bother?
# match pick.ident fails to teach you anything about the lock guarding it.
# match pick.blind trivially constructed gadget which you can take down any time
# match pick.blind An aged grandmother could
# match pick.blind you could do it blindfolded
# match pick.quick trivially constructed piece of junk barely worth your time
# match pick.quick will be a simple matter for you to unlock
# match pick.quick should not take long with your skills
# match pick.quick You think this lock is precisely at your skill level
# match pick.quick with only minor troubles
# match pick.careful lock has the edge on you, but you've got a good shot at
# match pick.careful You have some chance of being able to
# match pick.careful odds are against you
# match pick.careful would be a longshot
# match pick.careful You have an amazingly minimal chance
# match pick.hard You really don't have any chance
# match pick.hard Prayer would be a good start for any
# match pick.hard You could just jump off a cliff and save
# match pick.hard You probably have the same shot as a snowball
# match pick.hard A pitiful snowball encased in the Flames
# match pick.unknown Roundtime

# put pick my %box identify
# goto retry

# pick.hard:

# echo *** You have no chance to open this lock!
# echo *** Proceeding to Pick Quick Anyway

# goto pick.quick

# pick.careful:

# var picktype careful
# goto pick.anal

# pick.unknown:

# echo *** Unknown Lock Difficulty -- using normal.

# pick.normal:
# var picktype

# goto pick.anal

# pick.quick:
# var picktype quick

# goto pick.anal

# pick.blind:

# var picktype blind

# pick.anal:
# var location pick.anal
# match pick.anal You are unable to determine anything useful about the lock
# match pick.lock This lock has already helpfully been analyzed...
# match pick.lock Roundtime

# put pick my %box anal
# goto retry

# pick.lock:
# var location pick.lock
# match pick.lock You are unable to make any progress towards opening the lock.
# match pick.broke just broke
# match pick.broke Find a more appropriate tool and try again!
# match pick.ident You discover another
# match pick.open Roundtime

# put pick my %box %picktype
# goto retry


# pick.broke:

# var location pick.broke
# match pick.lock you get a
# match pick.nopick referring to?
# put get lockpick from from my $lockpicks
# goto retry


# pick.open:
# store.pick:
# var location store.pick
# match open.loot You put
# match open.loot What were
# put put lockp in my $lockpicks

# open.loot:
# action var loot $1 when ^In the .+ you see (.*)\.
# put open %box
# waitfor In the

# gosub Base.ListExtract loot loot_items void

# open.item:
# jscall item doShift("loot_items")
# if %item <> 0 then goto loot.loot
# else goto disarm.break

# loot.loot:
# pause 1
# if contains("%coins", "%item") then {
# put get coin
# goto open.item
# }
# if contains("%keep", "%item") then {
#     put get %item
#     put stow %item
#     goto open.item
# }
# if contains("%trash", "%item") then {
#     put get %item
#     if %trashbag <> 0 then put put %item in %trashbag
#     else put drop %item
#     goto open.item
# }

# echo ***New Item***
# put get %item
# put stow %item
# goto open.item


# disarm.break:
# var location disarm.break
# match disarm.loop Roundtime
# PUT dismantle %box
# goto retry
# goto disarm.loop
# disarm.done: