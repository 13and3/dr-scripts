=begin
    Authored by Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script requires two arguments, with a third optional

    This script assumes you have a lockpick ring, if you don't find the line

    UserVars.lockpick_ring = true

    and change it to false.

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open, this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.

    The script will look for suitable disposal sources in the room, or drop refuse on the ground

    Before running this script for the first time:
    * Download scripts "common", "events", and "drinfomon"
    * ;trust each of the above scripts.

    * You can turn on debug mode with ;e UserVars.lockpick_debug = true
=end

# TODO: Maintain spells or buffs for lockpicking

# TODO: Open closed containers

# TODO: Put armor back on when out of lockpicks

if variable.length < 3 || variable.length > 4
    echo '******
    This script requires two arguments, with a third optional

    box source, box storage, exp limit

    ;pick "duffel bag" backpack true

    Box source is a container holding the boxes that have not been attempted yet.

    Box storage is a place to put boxes that have a trap too dificult to open,
    this should be a different container from the previous

    Exp Limit will stop lockpicking when you hit mindlocked if you provide any argument.'
    exit
end

UserVars.box_source = variable[1]
UserVars.box_storage = variable[2]
UserVars.stop_on_ml = variable.length == 4
UserVars.lockpick_ring = true
UserVars.harvest_traps = true

UserVars.lockpicking_armor = ['knuckles', 'mask', 'gloves', 'shield']

def main
    # Run helper scripts
    %w(common drinfomon events).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 0.5
        end
    end

    Flags.add('pick-more', 'You discover another lock protecting')
    Flags.add('disarm-more', 'not yet fully disarmed')

    empty_hands
    remove_armor UserVars.lockpicking_armor
    fput "sit"

    boxes = get_boxes(UserVars.box_source)

    boxes.each do |box|
        break if UserVars.stop_on_ml && DRSkill.getxp('Locksmithing').to_i >= 34
        attempt_open(box)
    end
    waitrt?

    wear_armor UserVars.lockpicking_armor
    fput "stand"
end

def attempt_open(box)
    waitrt?
    echo "attempt_open(#{box})" if UserVars.lockpick_debug
    bput("get my #{box} from my #{UserVars.box_source}", 'You get a .* from inside your ')

    unless disarm(box)
        bput("put my #{box} in my #{UserVars.box_storage}", 'You put your .* in your ')
        return
    end

    attempt_pick(box)

    waitrt?
    fput("stow left") unless UserVars.lockpick_ring

    waitrt?
    loot(box)

    case bput("dismantle my #{box}", 'repeat this request in the next 15 seconds', 'Roundtime')
    when 'repeat this request in the next 15 seconds'
        bput("dismantle my #{box}", 'repeat this request in the next 15 seconds', 'Roundtime')
    end
end

def loot(box)
    waitrt?
    raw_contents = bput("open my #{box}", /^In the .* you see .*\./)
    echo "raw: #{raw_contents}" if UserVars.lockpick_debug
    loot = list_to_nouns(raw_contents.match(/^In the .* you see (.*)\./).to_a[1])
    echo "loot: #{loot}" if UserVars.lockpick_debug
    loot.each{|item| loot_item(item, box) }
end

def loot_item(item, box)
    return if item =~ /fragment/i
    return if 'You pick up' == bput("get #{item} from my #{box}", 'You get .* from inside your .*', 'You pick up')
    if UserVars.trash_nouns.find{|thing| item.include?(thing) }
        dispose_trash(item)
    elsif UserVars.loot_nouns.find{|thing| item.include?(thing) }
        fput("stow my #{item}")
    else
        beep
        echo("***Unrecognized Item! Stowing it.***")
        fput("stow my #{item}")
    end
end

def attempt_pick(box)
    get_lockpick unless UserVars.lockpick_ring
    while pick(box)
        pause 0.5
    end
end

def pick(box)
    Flags.reset('pick-more')
    waitrt?
    case bput("pick my #{box} ident", *(pick_careful+pick_quick+pick_blind+pick_retry+[/Find a more appropriate tool and try again/]))
    when *pick_careful
        pick_speed(box, 'careful')
    when *pick_quick
        pick_speed(box, 'quick')
    when *pick_blind
        pick_speed(box, 'blind')
    when *pick_retry
        pick(box)
    when /Find a more appropriate tool and try again/
        get_lockpick
        pick(box)
    end
end

def pick_speed(box, speed)
    waitrt?
    case bput("pick my #{box} #{speed}", 'You are unable to make any progress towards opening the lock', roundtime[0], /Find a more appropriate tool and try again/ )
    when "Roundtime"
    when /Find a more appropriate tool and try again/
        get_lockpick
    else
        return pick_speed(box, speed)
    end
    pause 0.2
    waitrt?
    echo("opened: #{Flags['pick-more']}") if UserVars.lockpick_debug
    return Flags['pick-more']
end

def get_lockpick
    waitrt?
    unless checkleft
        case bput("get my lockpick", 'referring to\?', '^You get a ')
        when 'referring to?'
            echo "OUT OF LOCKPICKS"
            beep
            exit
        end
    end
end

def disarm(box)
    waitrt?
    echo "disarm(#{box})" if UserVars.lockpick_debug
    case bput("disarm my #{box} identify", *disarm_ident_responses)
    when *failed_ident
        disarm(box)
    when *too_hard
        return false
    when *(careful+roundtime)
        disarm_speed(box, 'careful')
    when *quick
        disarm_speed(box, 'quick')
    when *normal
        disarm_speed(box, 'normal')
    end
end

def disarm_speed(box, speed)
    waitrt?
    echo "disarm(#{box}, #{speed})" if UserVars.lockpick_debug
    Flags.reset('disarm-more')

    case bput("disarm my #{box} #{speed}", *(failed_disarm+repeat_disarm+repeat_with_care+roundtime))
    when *failed_disarm
        beep
        beep
        echo("**SPRUNG TRAP**")
        exit
    when *repeat_disarm
        disarm_speed(box,speed)
    when *repeat_with_care
        disarm_speed(box, 'careful')
    end

    result = UserVars.harvest_traps ? analyze(box) : true

    result = disarm(box) if Flags['disarm-more']

    result
end

def analyze(box)
    waitrt?
    case bput("disarm my #{box} analyze", /You've already analyzed/, /You are unable to determine a proper method/, roundtime[0] )
    when /You are unable to determine a proper method/
        analyze(box)
        return
    end
    harvest(box)
end

def harvest(box)
    waitrt?
    case bput("disarm my #{box} harvest",
        /You fumble around with the trap apparatus/,
        /much for it to be successfully harvested/,
        /completely unsuitable for harvesting/,
        /previous trap have already been completely harvested/,
        roundtime[0])
    when *roundtime
        waitrt?
        dispose_trash(checkleft)
        while checkleft
        end
    when /You fumble around with the trap apparatus/
        harvest(box)
    end
    true
end

def pick_careful
    [
        /lock has the edge on you, but you've got a good shot at/,
        /You have some chance of being able to/,
        /odds are against you/,
        /would be a longshot/,
        /You have an amazingly minimal chance/,
    ]
end

def pick_quick
    [
        /trivially constructed piece of junk barely worth your time/,
        /will be a simple matter for you to unlock/,
        /should not take long with your skills/,
        /You think this lock is precisely at your skill level/,
        /with only minor troubles/,
    ]
end

def pick_blind
    [
        /trivially constructed gadget which you can take down any time/,
        /An aged grandmother could/,
        /you could do it blindfolded/,
        /You really don't have any chance/,
        /Prayer would be a good start for any/,
        /You could just jump off a cliff and save/,
        /You probably have the same shot as a snowball/,
        /A pitiful snowball encased in the Flames/,
    ]
end

def pick_retry
    [
        /fails to teach you anything about the lock guarding it/
    ]
end

def disarm_ident_responses
    failed_ident+too_hard+careful+quick+normal+roundtime
end

def failed_disarm
    [
        /lock springs out and stabs you painfully in the finger./,
        /An acrid stream of sulfurous air hisses quietly/,
        /A stream of corrosive acid sprays out from the/,
        /With a sinister swishing noise, a deadly sharp scythe blade whips out the front of the/,
        /There is a sudden flash of greenish light, and a huge electrical charge sends you flying/,
        /A stoppered vial opens with a pop and cloud of thick green vapor begins to pour out of the/,
        /breaks in half. A glass sphere on the seal begins to glow with an eerie black light/,
        /Just as your ears register the sound of a sharp snap/,
        /Looking at the needle, you notice with horror the rust colored coating on the tip./,
        /You barely have time to register a faint click before a blinding flash explodes around you/,
        /Moving with the grace of a pregnant goat, you carelessly flick at the piece of metal causing/,
        /You make a small hole in the side of the box and take deep breath to blow the powder free but a/,
        /With a cautious hand, you attempt to undo the string tying the bladder to the locking mechanism/,
        /The dart flies though your fingers and plants itself solidly in your forehead\!/,
        /Almost casually, you press on the tiny hammer set to break the tube. The hammer slips from its locked/,
        /Nothing happened. Maybe it was a dud./,
        /You get a feeling that something isn't right. Before you have time to think what it might be you find.../,
        /and emits a sound like tormented souls being freed, then fades away suddenly./,
        /has gotten much bigger\!/,
        /and clumsily shred the fatty bladder behind it in the process./,
        /liquid shadows/,
        /You wiggle the milky-white tube back and forth for a few moments in an attempt to remove it from/,
        /With a nasty look and a liberal amount of hurled, unladylike epithets, she wiggles back inside and slams/,
        /Not sure where to start, you begin by prying off the body of the crusty scarab, hoping to break it free/,
        /You feel like you've done a good job of blocking up the pinholes, until you peer closely to examine/,
    ]
end

def repeat_disarm
    [
        /You work with the trap for a while but are unable to make any progress/
    ]
end

def repeat_with_care
    [
        /something to shift/
    ]
end

def failed_ident
    [
        /fails to reveal to you what type of trap protects it/,
        /something to shift/
    ]
end

def too_hard
    [
        /would be a longshot/,
        /You have an amazingly minimal chance/,
        /You really don't have any chance/,
        /Prayer would be a good start for any/,
        /You could just jump off a cliff and save/,
        /You probably have the same shot as a snowball/,
        /A pitiful snowball encased in the Flames/,
    ]
end

def careful
    [
        /covered black scarab of some unidentifiable substance clings to the/,
        /are covered with a thin metal circle that has been lacquered with/,
        /with only minor troubles/,
        /should not take long with your skills/,
        /trap has the edge on you, but you've got a good shot at disarming/,
        /You have some chance of being able to disarm/,
        /odds are against you/,
    ]
end

def quick
    [
        /trivially constructed gadget which you can take down any time/,
        /This trap is a laughable matter, you could do it blindfolded/,
        /An aged grandmother could defeat this trap in her sleep/,
    ]
end


def normal
    [
        /will be a simple matter for you to disarm/,
        /You think this trap is precisely at your skill level/,
    ]
end

def roundtime
    [
        /Roundtime/
    ]
end

main
