# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  A large set of helper functions for common actions shared by many scripts.
=end

$FAILED_COMMAND = '*FAILED*'
$ORDINALS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth thirteenth)
$TRASH_STORAGE = %w(bin gloop barrel bucket)

# blocking put
# bput is designed to be a more robust version of fput in situations where you know the desired response from the game
# unlike fput which will resend the same command repeatedly until it sees the desired message first from the game, bput only
# sends a given command one time (unless round time or type ahead errors occur) and then waits for the desired response.
# if the desired response isn't seen bput will eventually time out and echo debugging information.

# fput "forage grass", 'Roundtime' < This would never work because the game sends a response line "You search around..." before "Roundtime" is encountered.

# Similarly a command that can only succeed once can cause fput to hang.
# fput "get box", 'you pick up', 'get what?' < You have to deal with the failure case and just spam
# the command until failure in a noisy room with fput.
# bput "get box", 'you pick up', 'get what?' < lets you know with confidence if a box was picked up or if the item was missing.

module DRC
  def bput(message, *matches)
    waitrt?
    timer = Time.now
    log = []
    matches.flatten!
    matches.map! { |item| item.is_a?(Regexp) ? item : /#{item}/i }
    clear
    put message
    while Time.now - timer < 15
      response = get?

      if response.nil?
        pause 0.1
        next
      end

      log += [response]

      case response
      when /(?:\.\.\.wait |Wait |\.\.\. wait )([0-9]+)/
        pause Regexp.last_match(1).to_i
        put message
        timer = Time.now
        next
      when /Sorry, you may only type ahead/
        pause 1
        put message
        timer = Time.now
        next
      when /^You are a bit too busy performing to do that/
        put 'stop play'
        put message
        timer = Time.now
        next
      when /^That would give away your hiding place/
        put 'unhide'
        put message
        timer = Time.now
        next
      when /^You are still stunned/, /^You can't do that while entangled in a web/
        pause 0.5
        put message
        timer = Time.now
        next
      end

      matches.each do |match|
        if (result = response.match(match))
          return result.to_a.first
        end
      end
    end
    echo '*** No match was found after 15 seconds, dumping info'
    echo "messages seen length: #{log.length}"
    log.each { |message| echo "message: #{message}" }
    echo "checked against #{matches}"
    false
  end
  module_function :bput

  def wait_for_script_to_complete(name, args = [])
    verify_script(name)
    success = start_script(name, args.map { |arg| arg =~ /\s/ ? "\"#{arg}\"" : arg })
    if success
      pause 2
      pause 1 while Script.running?(name)
    end
    success
  end
  module_function :wait_for_script_to_complete

  def forage?(item)
    snapshot = "#{checkright}#{checkleft}"
    while "#{checkright}#{checkleft}" == snapshot
      case bput("forage #{item}", 'Roundtime', 'The room is too cluttered to find anything here', 'You really need to have at least one hand free to forage properly')
      when 'The room is too cluttered to find anything here'
        return false unless kick_pile?
      when 'You really need to have at least one hand free to forage properly'
        echo 'WARNING: hands not emptied properly. Stowing...'
        fput('stow right')
      end
      waitrt?
    end
    true
  end
  module_function :forage?

  def kick_pile?
    fix_standing
    'take a step back and run up to' == bput('kick pile', 'I could not find', 'take a step back and run up to')
  end
  module_function :kick_pile?

  def rummage(parameter, container)
    result = DRC.bput("rummage /#{parameter} my #{container}", 'but there is nothing in there like that\.', 'looking for .* and see .*', 'While it\'s closed', 'I don\'t know what you are referring to')

    case result
    when 'but there is nothing in there like that.', 'While it\'s closed', 'I don\'t know what you are referring to'
      return []
    end

    text = result.match(/looking for .* and see (.*)\.$/).to_a[1]

    list_to_nouns(text)
  end
  module_function :rummage

  def get_boxes(container)
    rummage('B', container)
  end
  module_function :get_boxes

  def get_skins(container)
    rummage('S', container)
  end
  module_function :get_skins

  def get_gems(container)
    rummage('G', container)
  end
  module_function :get_gems

  def get_materials(container)
    rummage('M', container)
  end
  module_function :get_materials

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array ["an arrow", "silver coins", "a deobar strongbox"]
  # is this ever useful compared to the list_to_nouns?
  def list_to_array(list)
    list.strip.split(/,|\sand\s/)
  end
  module_function :list_to_array

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array of nouns ["arrow", "coins", "strongbox"]
  def list_to_nouns(list)
    list_to_array(list)
      .map { |long_name| get_noun(long_name) }
      .compact
      .select { |noun| noun != '' }
  end
  module_function :list_to_nouns

  def get_noun(long_name)
    long_name.strip.sub(/ with .*/, '').scan(/[a-z\-]+$/i).first
  end
  module_function :get_noun

  # Items class. Name is the noun of the object. Leather/metal boolean. Is the item worn (defaults to true). Does it hinder lockpicking? (false)
  # Item.new(name:'gloves', leather:true, worn:true, hinders_locks:true, adjective:'ring', bound:true)
  class Item
    attr_accessor :name, :leather, :worn, :hinders_lockpicking, :container, :swappable, :tie_to, :adjective, :bound

    def initialize(name: nil, leather: nil, worn: false, hinders_locks: nil, container: nil, swappable: false, tie_to: nil, adjective: nil, bound: false)
      @name = name
      @leather = leather
      @worn = worn
      @hinders_lockpicking = hinders_locks
      @container = container
      @swappable = swappable
      @tie_to = tie_to
      @adjective = adjective
      @bound = bound
    end

    def short_name
      @adjective ? "#{@adjective}.#{@name}" : @name
    end

    def short_regex
      @adjective ? /#{adjective}.*\b#{@name}/i : /\b#{@name}/i
    end
  end

  class SpellData
    attr_accessor :name, :abbrev, :min_prep, :cyclical, :after, :needs_moon, :cast, :expire, :skill, :cast_message, :before, :prep_message

    def initialize(name: nil, abbrev: nil, min_prep: nil, cyclical: nil, after: nil, needs_moon: nil, cast: nil, expire: nil, skill: nil, cast_message: nil, before: nil, prep_message: nil)
      @name = name
      @abbrev = abbrev
      @min_prep = min_prep
      @cyclical = cyclical
      @after = after
      @needs_moon = needs_moon
      @cast = cast
      @expire = expire
      @skill = skill
      @cast_message = cast_message
      @before = before
      @prep_message = prep_message
    end
  end

  @@Spells = {
    'EY' => SpellData.new(name: 'Essence of Yew')
  }

  class Spell
    attr_accessor :mana, :cambrinth, :snap, :symbiosis

    def initialize(abbrev: nil, spell_data: nil, mana: nil, cambrinth: nil, snap: false, symbiosis: nil)
      @data = if abbrev
                DRC.Spells[abbrev.upcase] || DRC.Spells.find { |key, _val| /^#{abbrev}/i =~ key }.last
              else
                spell_data
              end
      raise(ArgumentError, 'Spell requires a known name or spell data object') unless @data
    end

    def method_missing(method, *args, &block)
      @data.__send__ method, *args, &block
    end
  end

  # windows only I believe.
  def beep
    echo("\a")
  end
  module_function :beep

  def fix_standing
    return if checkstanding
    loop do
      case bput('stand', 'You stand', 'You are so unbalanced', 'As you stand', 'You are already')
      when 'You are so unbalanced'
        next
      else
        break
      end
    end
  end
  module_function :fix_standing

  def dispose_trash(item)
    return if item.nil?
    trashcan = DRRoom.room_objs
                     .map { |long_name| get_noun(long_name) }
                     .find { |obj| $TRASH_STORAGE.include?(obj) }
    if trashcan == 'gloop'
      trashcan = 'bucket' if DRRoom.room_objs.include? 'bucket of viscous gloop'
      trashcan = 'cauldron' if DRRoom.room_objs.include? 'small bubbling cauldron of viscous gloop'
    end

    if trashcan
      bput("put my #{item} in #{trashcan}", '^You drop', '^You put')
    else
      fput "drop my #{item}"
    end
  end
  module_function :dispose_trash

  def stow_hands
    pause 1
    bput('stow right', 'You put') if checkright
    bput('stow left', 'You put') if checkleft
  end
  module_function :stow_hands

  def bind_wound(part, person = 'my')
    snap = [checkleft, checkright]
    if 'You skillfully remove' == bput("tend #{person} #{part}", 'You work carefully at tending', 'That area has already been tended to', 'That area is not bleeding', 'You fumble', 'You skillfully remove', 'You foolishly remove')
      waitrt?
      fput("drop my #{checkleft}") if checkleft != snap.first
      fput("drop my #{checkright}") if checkright != snap.last
    end
    waitrt?
  end
  module_function :bind_wound

  def unwrap_wound(part)
    waitrt?
    case bput("unwrap my #{part}", 'You unwrap your bandages') # Are there other messages?
    when $FAILED_COMMAND
      pause 5
      bind_wound(part)
    end
    waitrt?
  end
  module_function :unwrap_wound

  def listen?(teacher)
    return false if teacher.nil?
    return false if teacher.empty?

    case bput("listen to #{teacher}", 'begin to listen', 'already listening', 'could not find who', 'You have no idea', 'isn\'t teaching a class', 'don\'t have the appropriate training', 'Your teacher appears to have left', 'isn\'t teaching you anymore', 'experience differs too much from your own', 'but you don\'t see any harm in listening', 'invitation if you wish to join this class')
    when 'begin to listen', 'already listening'
      return true
    when 'but you don\'t see any harm in listening'
      bput('stop listening', 'You stop listening')
    end

    false
  end
  module_function :listen?
end
