=begin
    Authored by Sheltim and Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will train a list of skills in order of the lowest amount of field experience. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download scripts "common", "drinfomon", "events", and "spellmonitor".
    * ;trust each of the above scripts.
    * Set up a configuration script named "crossing-training-setup"
        * Download "crossing-training-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

# TODO: Write more in the begin/end doc

# TODO: fix up the FA logic
#it double studies sometimes on the same page, and it needs to retry pages it doesn't succeed on

# TODO: Add clear to the top of the main loop?
# https://gswiki.play.net/mediawiki/index.php/Lich_scripting_reference#clear

# TODO: Hold something in hands during Athletics training if above a certain rank?

# TODO: Hold something in hands during Mechanical Lore training if above a certain rank?

# TODO: Handle "The room is too cluttered to find anything here!" when collecting

# TODO: Start extracting bput success arrays for reuse

# TODO: make a better class listener using events.

# TODO: Might need invasion detection. log if health below 50%?

def main
    # Configure UserVars
    start_script "crossing-training-setup"
    while running?("crossing-training-setup")
    end

    # Run helper scripts
    %w(common drinfomon events spellmonitor).each do |script_name|
        unless running?(script_name)
            start_script script_name
            pause 2
        end
    end
    fput "exp all"
    pause 2
    loop do
        event_loop
    end
end

def event_loop
    walk_to UserVars.safe_room

    # The next skill to train is the one with the lowest field experience
    skill = UserVars.crossing_training
                    .select { |skill| ready_to_use? skill }
                    .sort_by { |skill | DRSkill.getxp(skill).to_i }
                    .first

    if(DRSkill.getxp(skill).to_i >= 28)
        echo "***Skills capped, sleeping***" if UserVars.crossing_trainer_debug
        fput "exit"
        return
    end

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    UserVars.exp_timers[skill]["timer"] = Time.now if UserVars.exp_timers[skill]

    case skill
    when "Outdoorsmanship"
        train_outdoorsmanship
	when "Augmentation", "Warding", "Utility", "Debilitation"
		train_magic skill
	when "First Aid"
        train_first_aid
	when "Mechanical Lore"
        train_mechanical_lore
    when "Athletics"
        train_athletics
    when "Scouting"
        train_scouting
    when "Attunement"
        train_attunement
    when "Stealth"
        train_stealth
    when "Thievery"
        train_thievery
    when "Appraisal"
        train_appraisal
    when "Theurgy"
        train_theurgy
    when "Perception"
        # Please let me know if there's a faster way
        train_outdoorsmanship
    else
    	echo "#{skill} not implemented yet"
        pause 15
    end
end

def train_theurgy
    start_script "theurgy"
    pause 2
    while running? "theurgy"
        pause 1
    end
end

def train_magic(skill)
    UserVars.train_with_spells ? cast_spell(skill) : cast_nonspell(skill)
end

def ready_to_use?(skill)
	if UserVars.exp_timers[skill] && UserVars.exp_timers[skill]["timer"]
        timer = UserVars.exp_timers[skill]["timer"]
        limit = UserVars.exp_timers[skill]["cooldown"]
        if (Time.now - timer).to_i <= limit
            echo "***Timed Skill in cooldown: #{skill}***" if UserVars.crossing_trainer_debug
            return false
        end
    end

	return true
end

def cast_nonspell(skill)
    fput UserVars.training_nonspells[skill]
end

def cast_spell(skill)
    Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')
    data = UserVars.training_spells[skill]
    fput "remove #{UserVars.cambrinth}" if UserVars.held_cambrinth

	bput "prepare #{data["abbrev"]} #{data["mana"]}", '^With meditative movements you', '^You begin chanting a psalm', '^With tense movements '

	if data["cambrinth"]
		data["cambrinth"].each do |mana|
            bput "charge my #{UserVars.cambrinth} #{mana}", '^You harness a'
            waitrt?
        end
		bput "invoke my #{UserVars.cambrinth}", 'You reach for its center'
	end

	until Flags['ct-spellcast']
        pause 0.5
    end

    while DRSpells.prep_spell
        fput( data["cast"] || "cast" )
    end
    fput "wear my #{UserVars.cambrinth}" if UserVars.held_cambrinth
end

def braid_to_fail(item, container)
	forage item
	loop do
		fput "braid my #{item}"
		waitrt?
		if reget 5,"You need to have more"
			braid_to_fail item, container
			return
		else
            message = reget 50,"Roundtime"
			rt = message.last.scan(/\d+/).first.to_i
			break if rt >= 7
		end
	end
	fput "pull my #{item}"
	waitrt?
    while checkright
	   fput "put my #{checkright} in #{container}"
    end
end

def train_outdoorsmanship
    if DRSkill.getrank("Outdoorsmanship").to_i < 30
        bput "forage rock", 'Roundtime'
        waitrt?
        fput "put rock in bin"
    else
        item = DRSkill.getrank("Outdoorsmanship").to_i < 100 ? "grass" : "vine" #When can you collect vines?
        while !reget 5, "You manage to collect"
            fput "collect #{item}"
        end
        waitrt?
        fput "kick pile"
    end
end

def train_first_aid
    fput "play #{UserVars.song}"
    fput "get my compendium"
    start = bput("look compendium", '^The compendium lies open to the section on (.*) physiology')[1]
    loop do
        study = bput "study my compendium", 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying'
        waitrt?
        next if study =~ /^you attempt/i
        match = bput "turn my compendium", '^You turn to the section containing (.*) physiology'
        break if start == match[1]
    end
    empty_hands
    fput "stop play"
end

def train_mechanical_lore
    fput "remove #{UserVars.hand_armor}"
    fput "stow #{UserVars.hand_armor}"
    empty_hands
    braid_to_fail(DRSkill.getrank("Outdoorsmanship").to_i < 90 ? "grass" : "vine", "bin")
    fput "get my #{UserVars.hand_armor}"
    fput "wear my #{UserVars.hand_armor}"
    empty_hands
end

def climb(room_number, climb_target)
    walk_to room_number
    fput "climb #{climb_target}"
    waitrt?
end

def train_athletics
    fput "play #{UserVars.song}"
    empty_hands
    climb 835, "embrasure"
    climb 1035, "wall"
    climb 1039, "wall"
    climb 1040, "wall"
    climb 691, "wall"
    climb 943, "break"
    climb 943, "embrasure"
    climb 939, "embrasure"
    climb 1388, "wall"
    climb 938, "embrasure"
    climb 940, "break"
    climb 940, "embrasure"
    climb 1611, "wall"
    climb 1609, "wall"
    climb 1387, "wall"
    fput "stop play"
end

def train_scouting
    walk_to 991
    bput "scout trail", "You notice a trailmarker"
    bput "go trail", "You set off into the wild", "That would be difficult"
    waitfor "As your journey ends"
    walk_to 1378
    bput "scout trail", "You notice a trailmarker"
    bput "go trail", "You set off into the wild", "That would be difficult"
    waitfor "As your journey ends"
end

def train_attunement
    %w(815 814 802 800 799 801 817 818).each do |roomid|
        walk_to roomid
        fput "perc"
        waitrt?
    end
end

def hide_in(room_number)
    walk_to room_number
    fput "hide"
    waitrt?
    fput "unhide"
    waitrt?
end

def train_stealth
    hide_in 851
    hide_in 850
    hide_in 764
    hide_in 5992
    hide_in 992
end

def train_thievery
    wear_armor
    options = [
        {"room"=> 19078, "item"=>"pick", "min"=>30, "trivial"=> 66, "hide" => true},
        {"room"=> 19076, "item"=>"water", "min"=>0, "trivial"=> 41, "hide" => true},
        {"room"=> 19076, "item"=>"alcohol", "min"=>46, "trivial"=> 78, "hide" => true},
        {"room"=> 8265, "item"=>"bundling rope", "min"=>0, "trivial"=> 41, "hide" => true},
        {"room"=> 8265, "item"=>"coin purse", "min"=>41, "trivial"=> 58, "hide" => true},
        {"room"=> 19073, "item"=>"grey-brown feather", "min"=>32, "trivial"=> 58, "hide" => true},
        {"room"=> 7904, "item"=>"rugged glove", "min"=>41, "trivial"=> 75, "hide" => true}, #unknown trivial
    ]

    thievery_skill = DRSkill.getrank("Thievery").to_i

    targets = options.select{ |data| data["min"] <= thievery_skill && data["trivial"] > thievery_skill }

    targets.each { |target| steal(target) }

    remove_armor
end

def steal(target)
    walk_to target["room"]
    if target["hide"]
        while !checkhidden
            fput "hide"
            waitrt?
        end
    end
    fput "steal #{target["item"]}"
    waitrt?
    move "out"
    while checkright
        fput "drop my #{target["item"]}"
    end
end

def train_appraisal
    while checkright.nil?
        fput "remove zill"
    end
    fput "assess zill"
    waitrt?
    while checkright
        fput "wear my zill"
    end
end

# Call this last to avoid the need for forward declarations
main
