=begin
    Authored by Sheltim and Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will train a list of skills in order of the lowest amount of field experience. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download scripts "common", "drinfomon", "events", and "spellmonitor".
    * Optionally, download scripts "pick" and/or "theurgy" if you will be training those skills.
    * Set up a configuration script named "crossing-training-setup"
        * Download "crossing-training-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

# TODO: Start extracting bput success arrays for reuse

# TODO: Convert "crossing-training" to "crossing-training-engine" and "crossing-training-setup" to "crossing-training". This means what was the setup script will now be the script you run. It would manage UserVars, dependencies, etc. and feed those to the engine script.
class CrossingTraining
  include DRC

  def stop
    @stop = true
  end

  def is_running?
    @running
  end

  def idling?
    @idling
  end

  def initialize
    @stop = false
    @running = true
    @idling = false
    @song_list = {'scales halt'=>'scales', 'scales'=>'arpeggios halt', 'arpeggios halt'=>'arpeggios', 'arpeggios'=>'ditty halt',
     'ditty halt'=>'ditty', 'ditty'=>'folk halt','folk halt'=>'folk', 'folk'=>'ballad halt', 'ballad halt'=>'ballad', 'ballad'=>'waltz halt',
     'waltz halt'=>'waltz', 'waltz'=>'lullaby halt', 'lullaby halt'=>'lullaby', 'lullaby'=>'march halt', 'march halt'=>'march',
     'march'=>'jig halt', 'jig halt'=>'jig', 'jig'=>'lament halt', 'lament halt'=>'lament', 'lament'=>'wedding halt', 'wedding halt'=>'wedding',
     'wedding'=>'hymn halt', 'hymn halt'=>'hymn', 'hymn'=>'rumba halt', 'rumba halt'=>'rumba', 'rumba'=>'polka halt', 'polka halt'=>'polka',
     'polka'=>'battle halt', 'battle halt'=>'battle', 'battle'=>'reel halt', 'reel halt'=>'reel', 'reel'=>'elegy halt', 'elegy halt'=>'elegy',
     'elegy'=>'serenade halt', 'serenade halt'=>'serenade', 'serenade'=>'minuet halt', 'minuet halt'=>'minuet', 'minuet'=>'psalm halt',
     'psalm halt'=>'psalm', 'psalm'=>'dirgehalt', 'dirge halt'=>'dirge', 'dirge'=>'gavotte halt', 'gavotte halt'=>'gavotte',
     'gavotte'=>'tango halt', 'tango halt'=>'tango', 'tango'=>'tarantella halt', 'tarantella halt'=>'tarantella',
     'tarantella'=>'bolero halt', 'bolero halt'=>'bolero', 'bolero'=>'nocturne halt', 'nocturne halt'=>'nocturne',
     'nocturne'=>'requiem halt', 'requiem halt'=>'requiem', 'requiem'=>'fantasia halt', 'fantasia halt'=>'fantasia',
     'fantasia'=>'rondo halt', 'rondo halt'=>'rondo', 'rondo'=>'aria halt', 'aria halt'=>'aria', 'aria'=>'sonataconcerto halt',
     'sonataconcerto halt'=>'sonataconcerto', 'sonataconcerto'=>'sonataconcerto'}
  end

  def main
    # Run helper scripts
    %w(common drinfomon events spellmonitor).each do |script_name|
      unless running?(script_name)
        start_script script_name
        pause 2
      end
    end

    # Configure UserVars
    unless wait_for_script_to_complete('crossing-setup')
      echo '***Please configure your setup script (open this script for instructions).***'
      stop_script 'crossing-training'
    end

    Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')

    fput 'exp all'
    pause 0.5

    fput('info')
    pause 0.5

    loop do
      event_loop
      next unless @stop
      @running = false
      fput('stop play')
      break
    end
  end

  def event_loop
    walk_to UserVars.safe_room
    empty_hands

    # The next skill to train is the one with the lowest field experience
    skill = UserVars.crossing_training
            .select { |s| ready_to_use?(UserVars.exp_timers[s]) }
            .min_by { |s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }

    if skill.empty? || DRSkill.getxp(skill).to_i >= 28
      echo '***Skills capped, sleeping***' if UserVars.crossing_trainer_debug
      fput 'exit' if UserVars.exit_on_skills_capped
      # Output a harmless command to prevent being logged out
      fput 'exp all'
      @idling = true
      play_zill
      pause 30
      return
    end

    fput('stop play')
    @idling = false

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    UserVars.exp_timers[skill]['timer'] = Time.now if UserVars.exp_timers[skill]

    case skill
    when 'Outdoorsmanship'
      train_outdoorsmanship
    when 'Augmentation', 'Warding', 'Utility', 'Debilitation'
      train_magic skill
    when 'First Aid'
      train_first_aid
    when 'Scholarship'
      train_scholarship
    when 'Astrology'
      train_astrology
    when 'Mechanical Lore'
      train_mechanical_lore
    when 'Athletics'
      train_athletics
    when 'Scouting'
      train_scouting
    when 'Attunement'
      train_attunement
    when 'Stealth'
      train_stealth
    when 'Thievery'
      train_thievery
    when 'Forging'
      train_forging
    when 'Appraisal'
      train_appraisal
    when 'Theurgy'
      train_theurgy
    when 'Perception'
      train_outdoorsmanship
    when 'Empathy'
      train_empathy
    when 'Locksmithing'
      train_locksmithing
    when 'Summoning'
      train_summoning
    when 'Performance'
      train_performance
    else
      echo "#{skill} not implemented yet"
      pause 15
    end
  end

  def train_summoning
    fput 'summon admittance'
    waitrt?
    fput 'summon admittance'
    waitrt?
    bput('summon weapon', 'You lack the resolve to summon a weapon', 'you draw out a')
    waitrt?
    dispose_trash(checkright)
  end

  def train_locksmithing
    wait_for_script_to_complete('pick')
    wait_for_script_to_complete('sell-loot')
  end

  def train_theurgy
    wait_for_script_to_complete('theurgy')
  end

  def train_magic(skill)
    UserVars.train_with_spells ? cast_spell(skill) : cast_nonspell(skill)
  end

  def ready_to_use?(exp_timers)
    return true unless exp_timers && exp_timers['timer']
    (Time.now - exp_timers['timer']).to_i > exp_timers['cooldown']
  end

  def cast_nonspell(skill)
    fput UserVars.training_nonspells[skill]
  end

  def cast_spell(skill)
    pause 0.5 while checkmana < 30

    Flags.reset('ct-spellcast')
    data = UserVars.training_spells[skill]
    if data['abbrev'] =~ /^comp/i
      walk_to 991
      fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
    end

    if (data['abbrev'] =~ /locat/i) && (!DRSpells.active_spells['Clear Vision'])
      fput('prep cv')
      pause 5
      fput('cast')
    end

    fput('release gj') if data['cyclic']
    fput('release care') if data['cyclic']

    fput "remove #{UserVars.cambrinth}" if UserVars.held_cambrinth && data['cambrinth']

    bput('prep symb', 'You recall the exact details of the Chaos symbiosis', 'But you\'ve already prepared') if data['symbiosis']

    bput("prepare #{data['abbrev']} #{data['mana']}", '^With meditative movements you', 'You trace an angular sigil in the air', '^You begin chanting a psalm', '^With tense movements ', 'You raise your head skyward', 'With a sharp cut to your voice', 'You trace a careful sigil in the air', 'With a resounding "POP"')

    if data['cambrinth']
      data['cambrinth'].each do |mana|
        bput "charge my #{UserVars.cambrinth} #{mana}", '^You harness a'
        waitrt?
      end
      bput "invoke my #{UserVars.cambrinth}", 'You reach for its center', 'Your link to the'
    end

    pause 0.5 until Flags['ct-spellcast']

    while DRSpells.prep_spell
      data['before'].call if data['before']
      fput(data['cast'] || 'cast')
      data['after'].call if data['after']
    end

    fput "wear my #{UserVars.cambrinth}" if UserVars.held_cambrinth && data['cambrinth']
  end

  def braid_to_fail(item)
    forage(item)
    loop do
      waitrt?
      case bput("braid my #{item}", 'You Need to have more', 'Roundtime', 'You need both hands to do that')
      when 'Roundtime'
        rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
        break if rt >= 8 || DRSkill.getxp('Mechanical Lore').to_i >= 34
      when 'You need both hands to do that'
        waitrt?
        if checkleft == item
          dispose_trash(item)
        else
          fput 'swap'
        end
      else
        forage item
      end
    end
    bput("pull my #{item}", 'You tug and pull')
    waitrt?
    dispose_trash(checkright) while %w(vine rope vines grass).include?(checkright)
    dispose_trash(checkleft) while %w(vine rope vines grass).include?(checkleft)
  end

  def train_performance
    play_zill
    Flags.add('ct-song', 'you finish playing')
    pause 1 until Flags['ct-song']
  end

  def train_outdoorsmanship
    if DRSkill.getrank('Outdoorsmanship').to_i < 30
      forage('rock')
      dispose_trash 'rock'
    else
      item = DRSkill.getrank('Outdoorsmanship').to_i < 200 ? 'rock' : 'vine' # When can you collect vines?
      item = 'georin grass' if DRSkill.getrank('Outdoorsmanship').to_i >= 300
      case bput("collect #{item}", 'You manage to collect', 'The room is too cluttered to find anything here')
      when 'The room is too cluttered to find anything here'
        fput 'kick pile'
        pause 2
      end
      waitrt?
      fput 'kick pile'
    end
  end

  def train_first_aid
    play_zill
    fput 'get my compendium'
    start_text = bput('look compendium', '^The compendium lies open to the section on (.*) physiology')
    start_text =~ /^The compendium lies open to the section on (.*) physiology/i
    start = Regexp.last_match(1)
    attempts = 0
    loop do
      study = bput('study my compendium', 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying')
      waitrt?
      attempts += 1
      break if DRSkill.getrank('Scholarship').to_i < 50
      next if study =~ /^you attempt/i && attempts < 2
      attempts = 0
      match_text = bput 'turn my compendium', '^You turn to the section containing (.*) physiology'
      match_text =~ /^You turn to the section containing (.*) physiology/i
      match = Regexp.last_match(1)
      break if start == match
    end
    empty_hands
    fput 'stop play'
  end

  def train_scholarship
    play_zill
    fput 'get my black book'
    14.times do |count|
      bput("turn book to page #{count + 1}", 'You turn your book to page', 'You are already on')
      bput('study my book', 'roundtime')
      waitrt?
    end
    empty_hands
    fput 'stop play'
  end

  def train_mechanical_lore
    empty_hands
    fput "remove #{UserVars.hand_armor}"
    fput "stow #{UserVars.hand_armor}"
    braid_to_fail(DRSkill.getrank('Outdoorsmanship').to_i < 90 ? 'grass' : 'vine')
    empty_hands
    fput "get my #{UserVars.hand_armor}"
    fput "wear my #{UserVars.hand_armor}"
  end

  def climb(room_number, climb_target)
    walk_to room_number
    fput "climb #{climb_target}" if DRRoom.npcs.length < 3
    waitrt?
  end

  def train_athletics
    play_zill
    empty_hands
    [[835, 'embrasure'], [1035, 'wall'], [1039, 'wall'], [1040, 'wall'], [691, 'wall'], [943, 'break'], [943, 'embrasure'],
     [939, 'embrasure'], [1388, 'wall'], [938, 'embrasure'], [940, 'break'], [940, 'embrasure'], [1611, 'wall'],
     [1609, 'wall'], [1387, 'wall']].each { |room_number, climb_target| break if DRSkill.getxp('Athletics').to_i >= 34; climb(room_number, climb_target) }
    fput 'stop play'
  end

  def train_empathy
    [8266, 850, 7902, 19_077, 815, 793, 8265, 4652, 19_093, 19_078].each do |room_id|
      walk_to(room_id)
      until 'You sense:' == bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet')
        pause 1
        rt = waitrt?
        train_appraisal if rt.nil? || rt == 0
      end
      waitrt?
      break if DRSkill.getxp('Empathy').to_i >= 34
    end
  end

  def train_scouting
    walk_to 991
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
    walk_to 1378
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
  end

  def train_attunement
    if DRStats.guild == 'Moon Mage'
      fput('perc mana')
      pause 15
      waitrt?
      return
    end
    %w(815 814 802 800 799 801 817 818).each do |roomid|
      walk_to roomid
      fput 'perc'
      waitrt?
      break if DRSkill.getxp('Attunement').to_i >= 34 || DRStats.guild == 'Moon Mage'
    end
  end

  def hide_in(room_number)
    walk_to room_number
    fput 'hide'
    waitrt?
    fput 'unhide'
    waitrt?
  end

  def train_stealth
    hide_in 851
    hide_in 850
    hide_in 764
    hide_in 5992
    hide_in 992
  end

  def train_thievery
    remove_armor UserVars.armor

    options = [
      { 'room' => 19_078, 'item' => 'pick', 'min' => 30, 'trivial' => 66, 'hide' => true },
      { 'room' => 19_076, 'item' => 'water', 'min' => 0, 'trivial' => 41, 'hide' => true },
      { 'room' => 19_076, 'item' => 'alcohol', 'min' => 46, 'trivial' => 78, 'hide' => true },
      { 'room' => 8265, 'item' => 'bundling rope', 'min' => 0, 'trivial' => 41, 'hide' => true },
      { 'room' => 8265, 'item' => 'coin purse', 'min' => 41, 'trivial' => 58, 'hide' => true },
      { 'room' => 19_073, 'item' => 'grey-brown feather', 'min' => 32, 'trivial' => 58, 'hide' => true },
      { 'room' => 7904, 'item' => 'rugged glove', 'min' => 41, 'trivial' => 75, 'hide' => true }, # unknown trivial
    ]

    thievery_skill = DRSkill.getrank('Thievery').to_i

    targets = options.select { |data| data['min'] <= thievery_skill && data['trivial'] > thievery_skill }

    targets.each { |target| steal(target) }

    wear_armor UserVars.armor
  end

  def steal(target)
    walk_to target['room']
    if target['hide']
      until checkhidden
        fput 'hide'
        waitrt?
      end
    end
    fput "steal #{target['item']}"
    waitrt?
    move 'out'
    fput "drop my #{target['item']}" while checkright
  end

  def train_appraisal
    empty_hands
    fput 'remove zill' while checkright.nil?
    fput 'assess zill'
    waitrt?
    fput 'wear my zill' while checkright
  end

  def train_astrology
    fput('pre pg 5')
    fput('predict weather')
    pause 2
    waitrt?
    fput('cast')
    [%w(sun survival), %w(yavash magic), %w(xibar lore), %w(katamba defense)].each do |body, skill|
      case bput("observe #{body}", 'Your search for', 'roundtime')
      when /roundtime/i
        pause 2
        waitrt?
        bput("align #{skill}", 'You focus internally')
        waitrt?
        bput('predict future', 'roundtime')
        waitrt?
        bput('predict anal', 'roundtime')
        waitrt?
        return
      end
    end
  end

  def train_forging
    smelt_bronze if DRSkill.getrank('Forging').to_i < 50
  end

  def find_empty_room(rooms)
    rooms.each do |room_id|
      walk_to(room_id)
      return true if checkpcs.nil? && ['nothing in there', 'molten bronze'].include?(bput('look in cruc', 'nothing in there', 'molten bronze', 'you see'))
    end
    false
  end

  def stir
    pause 1
    waitrt?
    case bput('stir crucible with rod', 'You can only mix a crucible', 'clumps of molten metal', 'flickers and is unable to consume', 'down and needs more fuel', 'roundtime')
    when /roundtime/i
      return stir
    when 'You can only mix a crucible'
      return
    when 'clumps of molten metal'
      return turn
    when 'flickers and is unable to consume'
      return bellows
    when 'down and needs more fuel'
      return fuel
    end
  end

  def turn
    pause 1
    waitrt?
    bput('turn crucible', 'roundtime')
    stir
  end

  def bellows
    pause 1
    waitrt?
    bput('get bellow', 'you get')
    bput('push bellow', 'roundtime')
    waitrt?
    bput('stow bellow', 'you put your')
    stir
  end

  def fuel
    pause 1
    waitrt?
    bput('get shovel', 'you get')
    bput('push fuel with shovel', 'roundtime')
    waitrt?
    bput('stow shovel', 'you put your')
    stir
  end

  def smelt_bronze
    ensure_copper_on_hand(700)
    walk_to 8775
    fput('order 11')
    fput('order 11')

    until find_empty_room([8774, 19_030, 8773, 8779])
      walk_to 8775
      pause 30
    end

    fput('tilt cruc')
    fput('tilt cruc')

    fput('put ingot in cruc')
    bput('get rod', 'you get')
    stir
    bput('stow rod', 'you put your')
    fput('put ingot in bucket')
  end

  def play_zill
    UserVars.song = "scale halt" unless UserVars.song
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty','You begin a')
    when 'dirtiness may affect your performance'
      bput('stop play', 'You stop playing your song')
      clean_zills
      play_zill
    when 'You begin a'
      bput('stop play', 'You stop playing your song')
      adjust_difficulty
      play_zill
    end
  end

  def adjust_difficulty
    UserVars.song = @song_list[UserVars.song] || 'scales halt'
  end

  def clean_zills
    bput('remove zill', 'You slide a pair')
    bput('get my cloth', 'You get a')

    until /a pair of/i =~ bput('wipe zill with cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
      until /you wring a dry/i =~ bput('wring cloth', 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /a pair of/i =~ bput('clean zill with cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
    end

    bput('wear zill', 'You slide a')
    bput('stow my cloth', 'You put your')
  end


end

# Call this last to avoid the need for forward declarations
$CROSSING_TRAINER = CrossingTraining.new
$CROSSING_TRAINER.main
