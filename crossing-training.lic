=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script will train a list of skills in order of the lowest amount of field experience. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

  You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

custom_require(%w(common drinfomon events spellmonitor equipmanager))

class CrossingTraining
  include DRC

  attr_reader :running, :idling

  def stop
    @stop = true
  end

  def initialize
    @stop = false
    @running = true
    @idling = false
    @settings = get_settings(variable.drop(1) + %w(art athletics perform stealing))
    @settings.outdoor_room ||= 793
    @song_list = @settings.perform_options
    @settings.storage_containers([]).each { |container| fput("open my #{container}") }
    @disciplines_to_skill = {
      'Blacksmithing' => 'Forging',
      'Weaponsmithing' => 'Forging',
      'Armorsmithing' => 'Forging',
      'Tailoring' => 'Outfitting',
      'Shaping' => 'Engineering'
    }
  end

  def main
    setup

    loop do
      event_loop
      if @stop
        @running = false
        stop_play
        break
      end
      pause 30 if @idling
    end
  end

  def setup
    # Configure UserVars

    EquipmentManager.instance.refresh

    UserVars.crossing_timers ||= {}
    UserVars.stealing_timers ||= {}

    fput('release aewo') if DRSpells.active_spells['Aether Wolves']

    Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')
    Flags.add('ct-song', 'you finish playing')
    Flags.add('ct-spell-fail', 'Currently lacking the skill to complete the pattern', 'backfires')
  end

  def event_loop
    EquipmentManager.instance.empty_hands

    # The next skill to train is the one with the lowest field experience
    skill = @settings.crossing_training
                     .select { |s| ready_to_use?(s) }
                     .min_by { |s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }

    unless requires_movement?(skill)
      walk_to(@settings.safe_room)

      # TODO: Your teacher is not here, so you are no longer learning anything.
      check_listening
    end

    if skill.empty? || DRSkill.getxp(skill).to_i >= 28
      echo '***Skills capped, sleeping***' if UserVars.crossing_trainer_debug
      fput 'exit' if @settings.exit_on_skills_capped
      # Output a harmless command to prevent being logged out
      fput 'tdp'
      @idling = true
      play_song?
      return
    end

    stop_play
    @idling = false

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    update_timer(skill)

    case skill
    when 'Outdoorsmanship'
      train_outdoorsmanship
    when 'Augmentation', 'Warding', 'Utility', 'Debilitation'
      train_magic skill
    when 'First Aid'
      train_first_aid
    when 'Scholarship'
      train_scholarship
    when 'Astrology'
      train_astrology
    when 'Mechanical Lore'
      train_mechanical_lore
    when 'Athletics'
      train_athletics
    when 'Scouting'
      train_scouting
    when 'Attunement'
      train_attunement
    when 'Stealth'
      train_stealth
    when 'Thievery'
      train_thievery
    when 'Forging'
      train_forging
    when 'Appraisal'
      train_appraisal
    when 'Theurgy'
      train_theurgy
    when 'Perception'
      train_outdoorsmanship
    when 'Empathy'
      train_empathy
    when 'Locksmithing'
      train_locksmithing
    when 'Summoning'
      train_summoning
    when 'Performance'
      train_performance
    when 'Sorcery'
      train_sorcery
    when 'Trading'
      train_trading
    when 'Outfitting'
      train_outfitting
    when 'Engineering'
      train_engineering
    else
      echo "#{skill} not implemented yet"
      pause 15
    end
  end

  def train_sorcery
    # TODO: Generalize this once we have more data points
    walk_to 1137

    if DRSkill.getrank('Sorcery').to_i < 70
      focus_runestone
    else
      spell = @settings.crossing_training_sorcery(nil)
      return if spell.nil? || spell.empty?

      Flags.reset('ct-spellcast')
      fput "prep #{spell}"
      pause 0.5 until Flags['ct-spellcast']
      fput 'cast'
    end
  end

  def focus_runestone
    bput('get runestone', 'You get')
    until DRSkill.getxp('Sorcery').to_i >= 32
      bput('focus runestone', 'You focus your magical senses')
      waitrt?
    end
    bput('stow runestone', 'You put your')
  end

  def requires_movement?(skill)
    %w(Athletics Scouting Attunement Stealth Thievery Forging Appraisal Theurgy Empathy Sorcery Trading Outfitting Engineering).include? skill
  end

  def check_listening
    return unless @settings.listen
    return if listen?(@last_teacher)
    return unless @listen_timer.nil? || Time.now - @listen_timer > 300

    case bput('assess teach', 'is teaching a class', 'No one seems to be teaching')
    when 'No one seems to be teaching'
      @listen_timer = Time.now
      @last_teacher = nil
      return
    else
      @listen_timer = nil
    end
    results = reget(20, 'is teaching a class')
    waitrt?

    classes = results.each_with_object({}) do |line, hash|
      matches = line.match(/(.*) is teaching a class on .* \(compared to what you already know\) (.*) which is still open to new students/)
      teacher = matches[1]
      skill = matches[2]
      hash[teacher] = skill
    end

    @last_teacher = classes
                    .delete_if { |t, s| t.nil? || s.nil? }
                    .delete_if { |_t, s| %w(Thievery Sorcery).include? s }
                    .delete_if { |_t, s| DRStats.guild == 'Barbarian' && s == 'Arcana' }
                    .delete_if { |_t, s| DRStats.guild == 'Trader' && s =~ /Arcana|Magic|Attunement|Utility|Debilitation|Warding/ }
                    .delete_if { |_t, s| DRStats.guild == 'Paladin' && s == 'Thievery' }
                    .sort_by { |_t, s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }
                    .find { |t, _s| listen?(t) }
                    .first
  end

  def listen?(teacher)
    return false if teacher.nil? || teacher.empty?

    case DRC.bput("listen to #{teacher}", 'begin to listen', 'already listening', 'could not find who', 'You have no idea', 'isn\'t teaching a class', 'don\'t have the appropriate training', 'Your teacher appears to have left', 'isn\'t teaching you anymore', 'experience differs too much from your own', 'but you don\'t see any harm in listening')
    when 'begin to listen', 'already listening'
      return true
    when 'but you don\'t see any harm in listening'
      bput('stop listening', 'You stop listening')
    end

    false
  end

  def train_summoning
    summon_weapon
    EquipmentManager.instance.empty_hands unless break_summoned_weapon?(checkright) && break_summoned_weapon?(checkleft)
    fput 'pathway focus damage'
  end

  def train_locksmithing
    start_time = Time.now
    wait_for_script_to_complete('pick')
    wait_for_script_to_complete('sell-loot') if Time.now - start_time > 15
  end

  def train_theurgy
    wait_for_script_to_complete('theurgy')
  end

  def train_magic(skill)
    @settings.train_with_spells ? cast_spell(skill) : cast_nonspell(skill)
  end

  def ready_to_use?(skill)
    return true unless UserVars.crossing_timers[skill]
    (Time.now - UserVars.crossing_timers[skill]) > get_skill_timer(skill)
  end

  def get_skill_timer(skill)
    @settings.exp_timers[skill]['cooldown'] || 14
  end

  def update_timer(skill)
    UserVars.crossing_timers[skill] = Time.now
  end

  def cast_nonspell(skill)
    ability = @settings.training_nonspells[skill]
    echo("using ability: #{ability}") if UserVars.crossing_trainer_debug
    if ability.include?('Khri')
      unless DRSpells.active_spells[ability]
        fput('kneel') if @settings.kneel_khri
        bput(ability, *@settings.khri_preps)
        waitrt?
        fput('stand') if @settings.kneel_khri
      end
    else
      fput ability
    end
  end

  def calculate_mana(min, more, discern_data, cyclic)
    total = min + more
    total = (total * @settings.prep_scaling_factor).floor
    discern_data['mana'] = [(total / 4.0).ceil, min].max
    remaining = total - discern_data['mana']
    if remaining > @settings.cambrinth_cap
      discern_data['mana'] = discern_data['mana'] + (remaining - @settings.cambrinth_cap)
      remaining = total - discern_data['mana']
    end
    if cyclic
      discern_data['cambrinth'] = nil
      discern_data['mana'] = discern_data['mana'] + remaining
    elsif remaining > 0
      discern_data['cambrinth'] = []
      step_size = (remaining / 3.0).ceil
      while remaining > 0
        discern_data['cambrinth'] << [remaining, step_size].min
        remaining -= step_size
      end
    else
      discern_data['cambrinth'] = nil
    end
  end

  def check_discern(data)
    UserVars.discerns = {} unless UserVars.discerns
    discern_data = UserVars.discerns[data['abbrev']] || {}
    if data['symbiosis']
      if discern_data.empty? || discern_data['min'].nil?
        /requires at minimum (\d+) mana streams/ =~ bput("discern #{data['abbrev']}", 'requires at minimum \d+ mana streams')
        discern_data['mana'] = Regexp.last_match(1).to_i
        discern_data['cambrinth'] = nil
        discern_data['min'] = Regexp.last_match(1).to_i
        discern_data['more'] = 0
      end
      calculate_mana(discern_data['min'], discern_data['more'], discern_data, false)
    elsif discern_data.empty? || Time.now - discern_data['time_stamp'] > 24 * 60 * 60
      discern_data['time_stamp'] = Time.now
      case discern = bput("discern #{data['abbrev']}", 'The spell requires at minimum \d+ mana streams and you think you can reinforce it with \d+ more', 'You don\'t think you are able to cast this spell')
      when /you don't think you are able/i
        discern_data['mana'] = 1
        discern_data['cambrinth'] = nil
      else
        discern =~ /minimum (\d+) mana streams and you think you can reinforce it with (\d+) more/i
        calculate_mana(Regexp.last_match(1).to_i, Regexp.last_match(2).to_i, discern_data, data['cyclic'])
      end
    end
    pause 1
    waitrt?
    UserVars.discerns[data['abbrev']] = discern_data
    data['mana'] = discern_data['mana']
    data['cambrinth'] = discern_data['cambrinth']
  end

  def cast_spell(skill)
    return if checkmana < 40

    Flags.reset('ct-spellcast')
    data = @settings.training_spells[skill]
    check_discern(data)
    if data['abbrev'] =~ /^comp/i
      walk_to 991
      fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
    end

    if (data['abbrev'] =~ /locat/i) && !DRSpells.active_spells['Clear Vision']
      fput('prep cv')
      pause 5
      fput('cast')
    end

    if data['moon']
      moon = UserVars.moons['visible'].first
      unless moon
        echo "No moon available to cast #{data['abbrev']}"
        unless Script.running? 'moonwatch'
          echo 'moonwatch is not running. Starting it now'
          custom_require 'moonwatch'
          echo "Run `;e autostart('moonwatch')` to avoid this in the future"
        end
        weather = bput('weather', 'inside', 'You glance up at the sky.')
        walk_to @settings.outdoor_room if weather =~ /inside/
        fput('perceive moons')
        unless moon = UserVars.moons['visible'].first
          echo "Couldn't find any moons to cast #{data['abbrev']} with"
          return
        end
      end
      data['cast'] = "cast #{moon}"
    end

    fput('release gj') if data['cyclic'] && DRSpells.active_spells['Glythtide\'s Joy']
    fput('release care') if data['cyclic'] && DRSpells.active_spells['Caress of the Sun']

    if data['cambrinth'] && @settings.held_cambrinth
      command = @settings.stored_cambrinth ? 'get' : 'remove'
      fput "#{command} my #{@settings.cambrinth}"
    end

    bput('prep symb', 'You recall the exact details of the Chaos symbiosis', 'But you\'ve already prepared') if data['symbiosis']

    scaled_prep_mana = data['mana']
    bput("prepare #{data['abbrev']} #{scaled_prep_mana}", *@settings.prep_messages)
    if data['cambrinth']
      data['cambrinth'].each do |mana|
        case bput("charge my #{@settings.cambrinth} #{mana}", '^You harness a', "You'll have to hold it")
        when "You'll have to hold it"
          bput("get my #{@settings.cambrinth}", 'You get', 'What were you referring to')
        end
        waitrt?
      end
      bput "invoke my #{@settings.cambrinth}", 'You reach for its center', 'Your link to the'
    end

    pause 0.5 until Flags['ct-spellcast']

    snapshot = DRSkill.getxp(skill).to_i if data['symbiosis']

    Flags.reset('ct-spell-fail')

    while DRSpells.prep_spell
      data['before'].each { |action| bput(action['message'], action['matches']) }
      fput(data['cast'] || 'cast')
      data['after'].each { |action| bput(action['message'], action['matches']) }
    end

    if data['cambrinth'] && @settings.held_cambrinth
      command = @settings.stored_cambrinth ? 'stow' : 'wear'
      fput "#{command} my #{@settings.cambrinth}"
    end

    return unless data['symbiosis']

    start = Time.now
    until snapshot != DRSkill.getxp(skill).to_i || Time.now - start > 10
      pause 0.5
    end
    if Flags['ct-spell-fail']
      fput('rel symb')
      wait_for_script_to_complete('safe-room')
    elsif DRSkill.getxp(skill).to_i - snapshot <= 1
      UserVars.discerns[data['abbrev']]['more'] = UserVars.discerns[data['abbrev']]['more'] + 1
    end
  end

  def braid_to_fail(item)
    forage(item)
    loop do
      waitrt?
      case bput("braid my #{item}", 'You Need to have more', 'Roundtime', 'You need both hands to do that', 'You can\'t braid the .* into your braided')
      when 'Roundtime'
        rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
        break if rt >= 8 || DRSkill.getxp('Mechanical Lore').to_i >= 30
      when 'You need both hands to do that'
        waitrt?
        if checkleft == item
          dispose_trash(item)
        else
          fput 'swap'
        end
      when /into your braided/
        dispose_trash(checkleft)
        dispose_trash(checkright)
      else
        forage item
      end
    end
    pause 1
    waitrt?
    bput("pull my #{item}", 'You tug and pull')
    pause 1
    waitrt?
    dispose_trash(checkright) while %w(vine rope vines grass).include?(checkright)
    dispose_trash(checkleft) while %w(vine rope vines grass).include?(checkleft)
  end

  def train_performance
    unless play_song?
      @settings.crossing_training.delete('Performance')
      return
    end
    Flags.reset('ct-song')
    pause 1 until Flags['ct-song']
  end

  def train_outdoorsmanship
    if DRSkill.getrank('Outdoorsmanship').to_i < 30
      forage('rock')
      dispose_trash 'rock'
    else
      item = DRSkill.getrank('Outdoorsmanship').to_i < 100 ? 'rock' : 'vine' # When can you collect vines?
      item = 'georin grass' if DRSkill.getrank('Outdoorsmanship').to_i >= 300
      case bput("collect #{item}", 'You manage to collect', 'The room is too cluttered to find anything here')
      when 'The room is too cluttered to find anything here'
        kick_pile
      end
      waitrt?
      kick_pile
    end
  end

  def kick_pile
    case bput('kick pile', 'kick while sitting', 'I could not find', 'take a step back and run up to')
    when 'kick while sitting'
      fput('stand')
      kick_pile
    end
  end

  def train_first_aid
    return if DRSkill.getrank('Scholarship').to_i < 40
    play_song?
    fput 'get my compendium'
    start_text = bput('look compendium', '^The compendium lies open to the section on (.*) physiology')
    start_text =~ /^The compendium lies open to the section on (.*) physiology/i
    start = Regexp.last_match(1)
    attempts = 0
    loop do
      study = bput('study my compendium', 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying')
      waitrt?
      attempts += 1
      break if DRSkill.getrank('Scholarship').to_i < 50
      next if study =~ /^you attempt/i && attempts < 2
      attempts = 0
      match_text = bput 'turn my compendium', '^You turn to the section containing (.*) physiology'
      match_text =~ /^You turn to the section containing (.*) physiology/i
      match = Regexp.last_match(1)
      break if start == match || DRSkill.getxp('First Aid').to_i >= 30
    end
    EquipmentManager.instance.empty_hands
    stop_play
  end

  def train_scholarship
    play_song?
    fput 'get my black book'
    fput('turn my book to chapter 6')
    14.times do |count|
      bput("turn book to page #{count + 1}", 'You turn your book to page', 'You are already on')
      bput('study my book', 'roundtime')
      waitrt?
    end
    fput 'stow my book'
    stop_play
  end

  def train_mechanical_lore
    EquipmentManager.instance.empty_hands
    fput "remove #{@settings.hand_armor}"
    fput "stow #{@settings.hand_armor}"
    braid_to_fail(DRSkill.getrank('Outdoorsmanship').to_i < 110 ? 'grass' : 'vine')
    EquipmentManager.instance.empty_hands
    fput "get my #{@settings.hand_armor}"
    fput "wear my #{@settings.hand_armor}"
  end

  def climb?(room, targets)
    walk_to(room)
    return true if DRRoom.npcs.length >= 3

    targets.each do |target|
      fput "climb #{target}"
      waitrt?
      return false if DRSkill.getxp('Athletics').to_i >= 30
    end
    true
  end

  def train_athletics
    if DRSkill.getrank('Athletics').to_i >= 400
      swim_segoltha
    else
      @settings.athletics_options.each do |data|
        break unless climb?(data['room'], data['targets'])
      end
    end
  end

  def swim_segoltha
    walk_to(1894)
    fput('search')
    pause 2
    waitrt?
    fput('go trail')
    move 'se'
    fput('climb trail')
    pause 2
    loop do
      waitrt?
      if XMLData.room_exits.length == 2
        move 'w'
      elsif XMLData.room_exits.include?('south')
        move 's'
      else
        break
      end
    end
    loop do
      waitrt?
      if XMLData.room_exits.length == 2
        move 'w'
      elsif XMLData.room_exits.include?('north')
        move 'n'
      else
        break
      end
    end
    move 'climb bank'
    move 'nw'
    move 'go trail'
  end

  def train_empathy
    [8266, 850, 7902, 19_077, 815, 793, 8265, 4652, 19_093, 19_078].each do |room_id|
      walk_to(room_id)
      until 'You sense:' == bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet')
        pause 1
        rt = waitrt?
        pause 5 if rt.nil? || rt == 0
      end
      waitrt?
      break if DRSkill.getxp('Empathy').to_i >= 30
    end
  end

  def train_scouting
    walk_to 991
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
    walk_to 1378
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
  end

  def train_attunement
    if DRStats.guild == 'Moon Mage'
      fput('perc mana')
      pause 15
      waitrt?
      return
    end
    %w(815 814 802 800 799 801 817 818).each do |roomid|
      walk_to roomid
      fput 'perc'
      waitrt?
      break if DRSkill.getxp('Attunement').to_i >= 30
    end
  end

  def hide_in(room_number)
    walk_to room_number
    fput 'hide'
    waitrt?
    fput 'unhide'
    waitrt?
  end

  def train_stealth
    hide_in 851
    hide_in 850
    hide_in 764
    hide_in 5992
    hide_in 992
  end

  def train_thievery
    EquipmentManager.instance.wear_equipment_set('stealing')

    thievery_skill = DRSkill.getrank('Thievery').to_i

    targets = @settings.stealing_options.select { |data| data['min'] <= thievery_skill && data['trivial'] > thievery_skill && (UserVars.stealing_timers[data['room']].nil? || Time.now > UserVars.stealing_timers[data['room']]) }

    echo("Thievery targets: #{targets}") if UserVars.crossing_trainer_debug

    targets.each { |target| steal(target) }

    EquipmentManager.instance.wear_equipment_set('standard')
  end

  def steal(target)
    return if DRSkill.getxp('Thievery').to_i >= 30
    unless walk_to(target['room'], false)
      UserVars.stealing_timers[target['room']] = Time.now + 60 * 10
      echo("night pause for #{target}") if UserVars.crossing_trainer_debug
      return
    end
    UserVars.stealing_timers[target['room']] = Time.now + 60 * 60
    echo("putting target on cooldown :#{target}") if UserVars.crossing_trainer_debug
    if target['hide'] && @settings.hide_to_steal
      fput 'hide'
      waitrt?
    end
    result = bput("steal #{target['item']} #{target['item_in']}", "You don't feel you learned anything useful from this trivial theft", 'Roundtime')
    if result =~ /trivial theft/
      beep
      echo("Adjust trivial level for #{target} to #{DRSkill.getrank('Thievery').to_i}")
    end
    waitrt?
    bput("steal #{target['item']} #{target['item_in']}", "You don't feel you learned anything useful from this trivial theft", 'Roundtime') if DRSkill.getrank('Thievery').to_i - target['min'] > 10
    move 'out'
    fput "drop my #{target['item'].scan(/\w+/).last}" while checkright || checkleft
  end

  def train_appraisal
    study_art unless assess_zills?
  end

  def study_art
    @settings.art_options.each do |data|
      break unless study?(data['room'], data['targets'])
    end
  end

  def study?(room, targets)
    walk_to(room)
    targets.each do |target|
      fput "study #{target}"
      waitrt?
      return false if DRSkill.getxp('Appraisal').to_i >= 30
    end
    true
  end

  def assess_zills?
    return false if DRSkill.getrank('Appraisal').to_i >= 250

    EquipmentManager.instance.empty_hands
    case bput('remove my zill', 'You slide', 'Remove what')
    when 'Remove what'
      return false
    end
    bput('assess my zill', 'you carefully look them over')
    waitrt?
    bput('wear my zill', 'You slide')

    true
  end

  def train_astrology
    fput('pre pg 5')
    fput('predict weather')
    pause 2
    waitrt?
    fput('cast')
    [%w(sun survival), %w(yavash magic), %w(xibar lore), %w(katamba defense)].each do |body, skill|
      case bput("observe #{body}", 'Your search for', 'roundtime')
      when /roundtime/i
        pause 2
        waitrt?
        bput("align #{skill}", 'You focus internally')
        waitrt?
        bput('predict future', 'roundtime')
        waitrt?
        bput('predict anal', 'roundtime')
        waitrt?
        break
      end
    end
  end

  def train_outfitting
    wait_for_script_to_complete('workorders', ['Tailoring'])
  end

  def train_engineering
    wait_for_script_to_complete('workorders', ['Shaping'])
  end

  def train_trading
    disciplines = @settings.work_order_disciplines(%w(Blacksmithing Tailoring))

    discipline = disciplines.min_by { |s| DRSkill.getxp(@disciplines_to_skill[s]).to_i }

    wait_for_script_to_complete('workorders', [discipline])
  end

  # https://elanthipedia.play.net/mediawiki/index.php/Blacksmithing_Products
  def train_forging
    if @settings.train_workorders([]).include?('Blacksmithing')
      wait_for_script_to_complete('workorders', ['Blacksmithing'])
      return
    end

    rank = DRSkill.getrank('Forging').to_i
    if rank <= 25 # Tier 1	Extremely Easy
      smelt_bronze
    elsif rank <= 50 # Tier 2	Very Easy
      forge(6, 'short metal mug', 'mug', true)
    elsif rank <= 100 # Tier 3	Easy
      forge(6, 'scratcher', 'scratcher', true)
    elsif rank <= 175 # Tier 4	Simple
      forge(6, 'ankle band', 'band', true)
    elsif rank <= 300 # Tier 5	Basic
      forge(6, 'lockpick', 'ring', true)
      # Journeyman book: lockpick ring
    elsif rank <= 425 # Tier 6	Somewhat Challenging
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: armband
    elsif rank <= 550 # Tier 7	Challenging
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: clippers
    elsif rank <= 700 # Tier 8	Complicated
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: triangular wire sieve, bent <metal> scissors, knobby sewing needles, squat knitting needles, narrow <metal> awl
    elsif rank <= 850 # Tier 9	Intricate
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: beveled wood shaper, serrated hide scraper, compact <metal> awl, compact <metal> awl, round pestle
    elsif rank <= 1175 # Tier 10	Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: slender <metal> awl, serrated scissors, grooved pestle, oblong wire sieve
    elsif rank <= 1400 # Tier 11	Very Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: jagged wood shaper, thin sewing needles
    else # Tier 12	Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: trapezoidal wire sieve
    end
  end

  def forge(chapter, unique_name, item, trash_ingot)
    unless @bought_ingot
      buy_bronze_ingot
      fput('stow my ingot')
      @bought_ingot = true
    end

    return unless find_anvil

    @bought_ingot = false

    wait_for_script_to_complete('forge', ['trash', 'blacksmithing', chapter, unique_name, 'bronze', item])

    # Handle the case in which forge fails (i.e. due to running out of oil)
    pause 1
    dispose_trash(checkright) if checkright.include? item
    pause 1
    dispose_trash(checkleft) if checkleft.include? item
    pause 1

    EquipmentManager.instance.empty_hands

    return unless trash_ingot
    fput('get my bronze ingot')
    dispose_trash('ingot')
  end

  def buy_bronze_ingot
    ensure_copper_on_hand(700)
    walk_to 8775
    fput('order 11')
    fput('order 11')
  end

  def smelt_bronze
    buy_bronze_ingot

    find_empty_crucible

    fput('tilt cruc')
    fput('tilt cruc')

    fput('put ingot in cruc')
    wait_for_script_to_complete('smelt')
    dispose_trash('ingot')
  end

  def stop_play
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
    Flags['ct-song'] = true
  end

  def play_song?
    Flags.reset('ct-song')
    UserVars.song = @song_list.first.first unless UserVars.song
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument')
    when 'Play on what instrument'
      return false
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
    when 'dirtiness may affect your performance'
      stop_play
      clean_zills
      play_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      stop_play
      adjust_difficulty
      play_song?
    when 'You struggle to begin'
      UserVars.song = @song_list.first.first
    end

    true
  end

  def adjust_difficulty
    UserVars.song = @song_list[UserVars.song] || @song_list.first.first
  end

  def clean_zills
    bput('remove my zills', 'You slide a pair')
    bput('get my cloth', 'You get a')

    until /a pair of/i =~ bput('wipe my zills with my cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
      until /you wring a dry/i =~ bput('wring my cloth', 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /a pair of/i =~ bput('clean my zills with my cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
    end

    bput('wear my zill', 'You slide a')
    bput('stow my cloth', 'You put your')
  end
end

# Call this last to avoid the need for forward declarations
$CROSSING_TRAINER = CrossingTraining.new
$CROSSING_TRAINER.main
