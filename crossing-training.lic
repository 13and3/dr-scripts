=begin
    Authored by Sheltim and Seped. Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    This script will train a list of skills in order of the lowest amount of field experience. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

    Before running this script for the first time:
    * Download scripts "common", "drinfomon", "events", and "spellmonitor".
    * Optionally, download scripts "pick" and/or "theurgy" if you will be training those skills.
    * Set up a configuration script named "crossing-training-setup"
        * Download "crossing-training-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

# TODO: Start extracting bput success arrays for reuse

# TODO: Convert "crossing-training" to "crossing-training-engine" and "crossing-training-setup" to "crossing-training". This means what was the setup script will now be the script you run. It would manage UserVars, dependencies, etc. and feed those to the engine script.

def main
  # Run helper scripts
  %w(common drinfomon events spellmonitor).each do |script_name|
    unless running?(script_name)
      start_script script_name
      pause 2
    end
  end

  # Configure UserVars
  unless wait_for_script_to_complete('crossing-training-setup')
    echo '***Please configure your setup script (open this script for instructions).***'
    stop_script 'crossing-training'
  end

  Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')

  fput 'exp all'
  pause 2
  loop do
    event_loop
  end
end

def event_loop
  walk_to UserVars.safe_room

  # The next skill to train is the one with the lowest field experience
  skill = UserVars.crossing_training
          .select { |s| ready_to_use?(UserVars.exp_timers[s]) }
          .sort_by { |s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }
          .first

  if (DRSkill.getxp(skill).to_i >= 28)
    echo '***Skills capped, sleeping***' if UserVars.crossing_trainer_debug
    fput 'exit'
    return
  end

  echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

  UserVars.exp_timers[skill]['timer'] = Time.now if UserVars.exp_timers[skill]

  case skill
  when 'Outdoorsmanship'
    train_outdoorsmanship
  when 'Augmentation', 'Warding', 'Utility', 'Debilitation'
    train_magic skill
  when 'First Aid'
    train_first_aid
  when 'Mechanical Lore'
    train_mechanical_lore
  when 'Athletics'
    train_athletics
  when 'Scouting'
    train_scouting
  when 'Attunement'
    train_attunement
  when 'Stealth'
    train_stealth
  when 'Thievery'
    train_thievery
  when 'Appraisal'
    train_appraisal
  when 'Theurgy'
    train_theurgy
  when 'Perception'
    train_outdoorsmanship
  when 'Empathy'
    train_empathy
  when 'Locksmithing'
    train_locksmithing
  else
    echo "#{skill} not implemented yet"
    pause 15
  end
end

def train_locksmithing
  wait_for_script_to_complete('pick')
end

def train_theurgy
  wait_for_script_to_complete('theurgy')
end

def train_magic(skill)
  UserVars.train_with_spells ? cast_spell(skill) : cast_nonspell(skill)
end

def ready_to_use?(exp_timers)
  return true unless exp_timers && exp_timers['timer']

  (Time.now - exp_timers['timer']).to_i > exp_timers['cooldown']
end

def cast_nonspell(skill)
  fput UserVars.training_nonspells[skill]
end

def cast_spell(skill)
  pause 0.5 while checkmana < 30

  Flags.reset('ct-spellcast')
  data = UserVars.training_spells[skill]
  if data['abbrev'] =~ /^comp/i
    walk_to 991
    fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
  end
  fput "remove #{UserVars.cambrinth}" if UserVars.held_cambrinth

  bput "prepare #{data['abbrev']} #{data['mana']}", '^With meditative movements you', '^You begin chanting a psalm', '^With tense movements '

  if data['cambrinth']
    data['cambrinth'].each do |mana|
      bput "charge my #{UserVars.cambrinth} #{mana}", '^You harness a'
      waitrt?
    end
    bput "invoke my #{UserVars.cambrinth}", 'You reach for its center'
  end

  pause 0.5 until Flags['ct-spellcast']

  fput(data['cast'] || 'cast') while DRSpells.prep_spell

  data['after'].call if data['after']

  fput "wear my #{UserVars.cambrinth}" if UserVars.held_cambrinth
end

def braid_to_fail(item)
  forage item
  loop do
    waitrt?
    case bput("braid my #{item}", 'You Need to have more', 'Roundtime', 'You need both hands to do that')
    when 'Roundtime'
      rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
      break if rt >= 8 || DRSkill.getxp('Mechanical Lore').to_i >= 34
    when 'You need both hands to do that'
      waitrt?
      if checkleft == item
        dispose_trash(item)
      else
        fput 'swap'
      end
    else
      forage item
    end
  end
  bput("pull my #{item}", 'You tug and pull')
  waitrt?
  dispose_trash(checkright) while %w(vine rope vines grass).include?(checkright)
  dispose_trash(checkleft) while %w(vine rope vines grass).include?(checkleft)
end

def train_outdoorsmanship
  if DRSkill.getrank('Outdoorsmanship').to_i < 30
    bput 'forage rock', 'Roundtime'
    waitrt?
    dispose_trash 'rock'
  else
    item = DRSkill.getrank('Outdoorsmanship').to_i < 100 ? 'grass' : 'vine'
    fput "collect #{item}" until reget 5, 'You manage to collect'
    waitrt?
    fput 'kick pile'
  end
end

def train_first_aid
  fput "play #{UserVars.song}"
  fput 'get my compendium'
  start_text = bput('look compendium', '^The compendium lies open to the section on (.*) physiology')
  start_text =~ /^The compendium lies open to the section on (.*) physiology/i
  start = Regexp.last_match(1)
  loop do
    study = bput('study my compendium', 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying')
    waitrt?
    next if study =~ /^you attempt/i
    match_text = bput 'turn my compendium', '^You turn to the section containing (.*) physiology'
    match_text =~ /^You turn to the section containing (.*) physiology/i
    match = Regexp.last_match(1)
    break if start == match
  end
  empty_hands
  fput 'stop play'
end

def train_mechanical_lore
  empty_hands
  fput "remove #{UserVars.hand_armor}"
  fput "stow #{UserVars.hand_armor}"
  braid_to_fail(DRSkill.getrank('Outdoorsmanship').to_i < 90 ? 'grass' : 'vine')
  empty_hands
  fput "get my #{UserVars.hand_armor}"
  fput "wear my #{UserVars.hand_armor}"
end

def climb(room_number, climb_target)
  walk_to room_number
  fput "climb #{climb_target}"
  waitrt?
end

def train_athletics
  fput "play #{UserVars.song}"
  empty_hands
  [[835, 'embrasure'], [1035, 'wall'], [1039, 'wall'], [1040, 'wall'], [691, 'wall'], [943, 'break'], [943, 'embrasure'],
   [939, 'embrasure'], [1388, 'wall'], [938, 'embrasure'], [940, 'break'], [940, 'embrasure'], [1611, 'wall'],
   [1609, 'wall'], [1387, 'wall']].each { |room_number, climb_target| climb(room_number, climb_target) }
  fput 'stop play'
end

def train_empathy
  [8266, 850, 7902, 19_077, 815, 793, 8265, 4652, 19_093, 19_078].each do |room_id|
    walk_to(room_id)
    until 'You sense:' == bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet')
      pause 1
      rt = waitrt?
      train_appraisal if rt.nil? || rt == 0
    end
    waitrt?
    break if DRSkill.getxp('Empathy').to_i >= 34
  end
end

def train_scouting
  walk_to 991
  bput 'scout trail', 'You notice a trailmarker'
  bput 'go trail', 'You set off into the wild', 'That would be difficult'
  waitfor 'As your journey ends'
  walk_to 1378
  bput 'scout trail', 'You notice a trailmarker'
  bput 'go trail', 'You set off into the wild', 'That would be difficult'
  waitfor 'As your journey ends'
end

def train_attunement
  %w(815 814 802 800 799 801 817 818).each do |roomid|
    walk_to roomid
    fput 'perc'
    waitrt?
  end
end

def hide_in(room_number)
  walk_to room_number
  fput 'hide'
  waitrt?
  fput 'unhide'
  waitrt?
end

def train_stealth
  hide_in 851
  hide_in 850
  hide_in 764
  hide_in 5992
  hide_in 992
end

def train_thievery
  remove_armor UserVars.armor

  options = [
    { 'room' => 19_078, 'item' => 'pick', 'min' => 30, 'trivial' => 66, 'hide' => true },
    { 'room' => 19_076, 'item' => 'water', 'min' => 0, 'trivial' => 41, 'hide' => true },
    { 'room' => 19_076, 'item' => 'alcohol', 'min' => 46, 'trivial' => 78, 'hide' => true },
    { 'room' => 8265, 'item' => 'bundling rope', 'min' => 0, 'trivial' => 41, 'hide' => true },
    { 'room' => 8265, 'item' => 'coin purse', 'min' => 41, 'trivial' => 58, 'hide' => true },
    { 'room' => 19_073, 'item' => 'grey-brown feather', 'min' => 32, 'trivial' => 58, 'hide' => true },
    { 'room' => 7904, 'item' => 'rugged glove', 'min' => 41, 'trivial' => 75, 'hide' => true }, # unknown trivial
  ]

  thievery_skill = DRSkill.getrank('Thievery').to_i

  targets = options.select { |data| data['min'] <= thievery_skill && data['trivial'] > thievery_skill }

  targets.each { |target| steal(target) }

  wear_armor UserVars.armor
end

def steal(target)
  walk_to target['room']
  if target['hide']
    until checkhidden
      fput 'hide'
      waitrt?
    end
  end
  fput "steal #{target['item']}"
  waitrt?
  move 'out'
  fput "drop my #{target['item']}" while checkright
end

def train_appraisal
  fput 'remove zill' while checkright.nil?
  fput 'assess zill'
  waitrt?
  fput 'wear my zill' while checkright
end

# Call this last to avoid the need for forward declarations
main
