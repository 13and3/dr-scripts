=begin
	Personal script for training skills in crossing.
=end

def main
    # Configure UserVars
    start_script "crossing-training-setup-etreu"
    while running?("crossing-training-setup-etreu")

    end

    # Run helper scripts
    ["drinfomon", "spellmonitor" ].each do |script_name|
        if !running?(script_name)
            start_script script_name
            pause 2
        end
    end

    while true do
        event_loop
    end
end

def event_loop
    # The next skill to train is the one with the lowest field experience
    skill = UserVars.crossing_training.sort_by { |skill | DRSkill.getxp(skill).to_i + check_timer(skill) }.first

    if(DRSkill.getxp(skill).to_i >= 34)
        echo "***Skills capped***" if UserVars.crossing_trainer_debug
        pause 10
        return
    end

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    UserVars.exp_timers[skill]["timer"] = Time.now if UserVars.exp_timers[skill]

    if skill == "Outdoorsmanship"
		walk_to(851)
		if DRSkill.getrank("Outdoorsmanship") < 60 #When can you collect vines?
			while !reget 5, "You manage to collect"
				fput "collect rock"
			end
		else
			while !reget 5, "You manage to collect"
				fput "collect vine"
			end
		end
		fput "kick pile"
    else
    	echo "#{skill} not implemented yet"
    end


end

def check_timer skill
	return 0 unless UserVars.exp_timers[skill] && UserVars.exp_timers[skill]["timer"]
	timer = UserVars.exp_timers[skill]["timer"]
	limit = UserVars.exp_timers[skill]["cooldown"]
	if (Time.now-timer).to_i <= limit
		return 35
	end
	return 0
end

def stow_weapons
    while checkright != nil
        if UserVars.worn_weapons.include? checkright
            fput "wear #{checkright}"
        else
            fput "stow right"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end

    while checkleft != nil
        if UserVars.worn_weapons.include? checkleft
            fput "wear #{checkleft}"
        else
            fput "stow left"
        end
        fput "unload" if get =~ /^You (need to|should) unload/
    end
end

def check_spells
    if DRSpells.prep_spell
        if @charges
            if @charges.length > 0
                fput "charge #{UserVars.cambrinth} #{@charges.pop}"
                waitrt?
                return false
            else
                fput "invoke #{UserVars.cambrinth}"
                @charges = nil
                return false
            end
        end
        if DRSpells.prep_time <= 0
            fput "cast"
            return true
        end
        return false
    end

    UserVars.spells.each {|name, data|
        if !DRSpells.active_spells[name] || (DRSpells.active_spells[name] <= data["recast"])
            fput "prepare #{data["abbrev"]} #{data["mana"]}"
            @charges = data["cambrinth"].dup if data["cambrinth"]
            return true
        end
    }
    return false
end

def stow_ammo
    UserVars.ammo.each {|item|
        DRRoom.room_objs.grep(/#{item}/).each {|item| fput "stow #{item}"}
    }
end

def walk_to(room_num)
	start_script "go2", [room_num]
	while running?("go2")
	end
end

def forage(item)
	while checkright.nil?
		fput "forage #{item}"
		waitrt?
	end
end



# Call this last to avoid the need for forward declarations
main()





# braid1:
# var did_train 1
# if $roomid <> 14 then gosub move 14
# put remove glove
# pause
# put stow glove
# pause
# gosub braid vine
# put get glove
# pause
# put wear glove
# return

# trainaug1:
# var did_train 1
# if $mana < 25 then return
# if $roomid <> 14 then gosub move 14
# gosub cast.held ath armband 11|11|11
# return

# trainutil1:
# var did_train 1
# if $mana < 25 then return
# if $roomid <> 14 then gosub move 14
# gosub cast.held comp armband 12|11|11
# return

# trainward1:
# var did_train 1
# if $mana < 25 then return
# if $roomid <> 14 then gosub move 14
# gosub cast.held ey armband 10|10|9
# return

# climb.aesry:
# var did_train 1
# if $stamina < 65 then return
# if $zoneid = 98 then goto climb.docksup
# if $zoneid = 99 then goto climb.town
# climb.docksup:
# gosub move 86
# climb.town:
# gosub move 308
# gosub move 390
# climb.docksdown:
# put sit
# climb.wait:
# pause 15
# if $stamina < 70 then goto climb.wait
# put stand
# gosub move 14
# return


# scout1:
# var did_train 1
# if $stamina < 40 then return
# gosub move 4
# gosub scout
# gosub move 173
# gosub scout
# return


# collect1:
# var did_train 1
# if $roomid <> 14 then gosub move 14
# gosub collect vine
# gosub kick.pile
# return

# study1:
# var did_train 1
# put play $song
# pause 1
# gosub study
# put stop play
# return

# appraise1:
# var did_train 1
# var location appraise1
# match appraise1.app You slide a pair
# put remove zill
# goto retry
# appraise1.app:
# var location appraise1.app
# match appraise1.done Roundtime
# put ass zill
# goto retry
# appraise1.done:
# var location appraise1.done
# match return You slide a pair
# put wear zill
# goto retry

# powerwalk1:
# var did_train 1
# if $roomid <> 25 then gosub move 25
# gosub perceive
# gosub move 24
# gosub perceive
# gosub move 23
# gosub perceive
# gosub move 6
# gosub perceive
# gosub move 5
# gosub perceive
# gosub move 7
# gosub perceive
# gosub move 4
# gosub perceive
# gosub move 1
# gosub perceive
# gosub move 3
# gosub perceive
# return

# done:
# if $roomid <> 14 then gosub move 14

# fput "exit"




# #Item type to braid (grass, vine); container to dispose
# braid:
# var item $1
# if $2 then var container $2
# else var container 0
# braid.forage:
# var location braid.forage
# match braid.braid You manage to f
# match braid.braid you find
# match braid.forage Roundtime
# put forage %item
# goto retry

# braid.braid:
# var location braid.braid
# match braid.pull You fumble around
# match braid.pull Frustration wells
# match braid.pull but you aren't sure that you are making progress
# match braid.braid Roundtime
# match braid.forage You need to have more
# put braid my %item
# goto retry

# braid.pull:
# var location braid.pull
# match braid.empty You nod with satisfaction for your work so fa
# match braid.drop Roundtime
# put pull my %item
# goto retry

# braid.empty:
# var location braid.empty
# match return You drop
# if %container then {
# 	put put my %item in %container
# }
# else {
# 	put drop my %item
# }
# goto retry

# braid.drop:
# var location braid.drop
# match return You drop
# if %container then {
# 	put put my rope in %container
# }
# else {
# 	put drop my rope
# }
# goto retry


# #Spell Camb_item BasePrep AdditionalPreps...
# cast.held:
# var spell_ready 0
# action var spell_ready 1 when ^You feel fully prepared
# var location cast.held1
# var spell $1
# var camb $2
# var preps $3
# jscall mana doShift("preps")

# cast.held1:
# matchre cast.held.remove ^You begin chanting a prayer
# matchre cast.held.remove ^You direct your attention toward the heavens
# matchre cast.held.remove ^You close your eyes and breathe deeply,
# matchre cast.held.remove ^You trace an arcane sigil in the air,
# matchre cast.held.remove ^Heatless orange flames blaze between your fingertips
# matchre cast.held.remove ^Your eyes darken to black as a starless night
# matchre cast.held.remove ^You raise your arms skyward
# matchre cast.held.remove ^You are already preparing
# matchre cast.held.remove ^You begin chanting
# matchre cast.held.remove ^You prepare
# matchre cast.held.remove ^With meditative movements
# matchre cast.held.remove ^Icy blue frost crackles up your arms
# matchre cast.held.remove ^You make a careless gesture as you chant the words
# matchre cast.held.remove ^Tiny tendrils of lightning jolt between your hands
# matchre cast.held.remove ^The wailing of lost souls accompanies your preparations
# matchre cast.held.remove ^Your skin briefly withers and tightens, becoming gaunt
# matchre cast.held.remove ^Images of streaking stars falling from the heavens flash across your vision
# matchre cast.held.remove ^A nagging sense of desperation guides your hands through the motions
# matchre cast.held.remove ^You hastily shout the arcane phrasings needed to prepare
# matchre cast.held.remove ^You deftly waggle your fingers in the precise motions needed to prepare
# matchre cast.held.remove ^With great force, you slap your hands together before you and slowly pull them apart,
# matchre cast.held.remove ^With no small amount of effort, you slowly recall the teachings
# matchre cast.held.remove ^You struggle against your bindings to prepare
# matchre cast.held.remove ^You have already
# matchre cast.held.remove ^You raise one hand before you and concentrate
# matchre cast.held.remove ^As you begin to focus on preparing
# matchre cast.held.remove ^That won't affect your current attunement very much\.
# put prep %spell %mana
# goto retry

# cast.held.remove:
# put remove %camb
# cast.held.charge.loop:
# jscall mana doShift("preps")
# if %mana = 0 then goto cast.held.invoke
# cast.held.charge:
# var location cast.held.charge
# matchre cast.held.charge.loop ^Roundtime
# put charge %camb %mana
# goto retry
# cast.held.invoke:
# var location cast.held.invoke
# matchre cast.held.wear ^Roundtime
# put invoke %camb
# goto retry
# cast.held.wear:
# var location cast.held.wear
# match cast.held.wait You slide
# match cast.held.wait You attach a
# put wear %camb
# goto retry
# cast.held.wait:
# if %spell_ready then goto cast.held.cast
# match cast.held.cast You feel fully prepared
# matchwait
# cast.held.cast:
# var location cast.held.cast
# matchre cast2 ^You can't cast that at yourself\!
# matchre return ^You gesture
# matchre return ^You raise your hand in an imaginary
# matchre return ^You don't have a spell prepared\!
# matchre return ^Your spell pattern collapses
# matchre return ^With a wave of your hand,
# matchre return ^You close your eyes and focus
# matchre return ^You reach with both your
# matchre return ^Your target pattern dissipates
# matchre return ^You wave your hand\.
# matchre return ^You place your hands on your temples
# matchre return ^A newfound fluidity of your mind
# matchre return ^Your heart skips a beat as your spell
# matchre return ^With a flick of your wrist,
# matchre return ^Your secondary spell pattern dissipates
# matchre return ^You can't cast .+ on yourself\!
# matchre return ^You make a holy gesture
# matchre return ^You raise your palms and face to the heavens
# matchre return ^I could not find what you were referring to\.
# matchre return ^You have difficulty manipulating the mana streams, causing the spell pattern to collapse at the last moment\.
# put cast
# goto retry

# cast.held.cast1:
# put face next
# goto cast.held.cast:


# scout:
# var location scout
# matchre scout.trail ^You notice a
# put scout trail
# goto retry
# scout.trail:
# var location scout.trail
# matchre scout ^I could not find what you
# matchre scout.travel ^You set off into
# put go trail
# goto retry
# scout.travel:
# waitforre ^As your journey ends
# pause .5
# return

# collect:
# var location collect
# matchre return ^You manage to collect
# put collect $1
# goto retry

# kick.pile:
# var location kick.pile
# matchre return ^You take a step back
# put kick pile
# goto retry

# study:
# put get compendium
# study.look:
# var location study.look
# matchre study.save ^The compendium lies open to the section on (.*) physiology
# put look compendium
# goto retry
# study.save:
# var first_page $1
# study.read:
# var location study.read
# match study.read You attempt
# match study.turn You begin to study
# match study.turn You begin studying
# match study.turn You continue studying
# match study.turn You continue to
# match study.turn With a sudden moment of
# match study.turn In a sudden moment of clarity
# match study.turn Why do you
# put study my compendium
# goto retry
# study.turn:
# var location study.turn
# match study.done You turn to the section containing %first_page
# match study.read You turn to the section containing
# put turn my compendium
# goto retry
# study.done:
# put stow compendium
# return

# perceive:
# var location perceive
# match return You reach out with
# put perc
# goto retry