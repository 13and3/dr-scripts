=begin
    Authored by Sheltim and Seped, suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

	Personal script for training skills in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1)

    Before running this script for the first time:
    * Download scripts "drmonitor" and "spellmonitor". These will be automatically run if they are not already running.
    * Set up a configuration script named "crossing-training-setup"
        * Download "crossing-training-setup" for an example configuration script.
    * You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

# TODO: Write more in the begin/end doc

def main
    # Configure UserVars
    start_script "crossing-training-setup"
    while running?("crossing-training-setup")

    end

    # Run helper scripts
    ["drinfomon", "spellmonitor" ].each do |script_name|
        if !running?(script_name)
            start_script script_name
            pause 2
        end
    end
    fput "exp all"
    pause 2
    while true do
        event_loop
    end
end

def event_loop
    # The next skill to train is the one with the lowest field experience
    skill = UserVars.crossing_training.sort_by { |skill | DRSkill.getxp(skill).to_i + check_timer(skill) }.first

    if(DRSkill.getxp(skill).to_i >= 34)
        echo "***Skills capped, sleeping***" if UserVars.crossing_trainer_debug
        pause 10
        return
    end

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    UserVars.exp_timers[skill]["timer"] = Time.now if UserVars.exp_timers[skill]

    if skill == "Outdoorsmanship"
        train_outdoorsmanship
	elsif ["Augmentation", "Warding", "Utility"].index skill
		walk_to(UserVars.safe_room)
		cast_spell(UserVars.training_spells[skill])
	elsif skill == "First Aid"
        train_first_aid
	elsif skill == "Mechanical Lore"
        train_mechanical_lore
    elsif skill == "Athletics"
        train_athletics
    elsif skill == "Scouting"
        train_scouting
    elsif skill == "Attunement"
        train_attunement
    elsif skill == "Stealth"
        train_stealth
    elsif skill == "Thievery"
        train_thievery
    elsif skill == "Appraisal"
        train_appraisal
    else
    	echo "#{skill} not implemented yet"
        pause 15
    end
end

def check_timer skill
	return 0 unless UserVars.exp_timers[skill] && UserVars.exp_timers[skill]["timer"]
	timer = UserVars.exp_timers[skill]["timer"]
	limit = UserVars.exp_timers[skill]["cooldown"]
	if (Time.now-timer).to_i <= limit
        echo "***Timed Skill in cooldown***" if UserVars.crossing_trainer_debug
		return 35
	end
    echo "***Timed Skill out of cooldown***" if UserVars.crossing_trainer_debug
	return 0
end

def empty_hands command=nil
    while checkright != nil
        if command
            fput "#{command} my #{checkright}"
        else
            fput "stow right"
        end
    end
    while checkleft != nil
        if command
            fput "#{command} my #{checkleft}"
        else
            fput "stow left"
        end
    end
end

def cast_spell data
	while !DRSpells.prep_spell
		fput "prepare #{data["abbrev"]} #{data["mana"]}"
	end
	if data["cambrinth"]
		data["cambrinth"].each{|mana| fput "charge my #{UserVars.cambrinth} #{mana}"; waitrt }
		fput "invoke my #{UserVars.cambrinth}"
	end

	while DRSpells.prep_time > 0
    end

    while DRSpells.prep_spell
        fput "cast"
    end
end

def stow_ammo
    UserVars.ammo.each {|item|
        DRRoom.room_objs.grep(/#{item}/).each {|item| fput "stow #{item}"}
    }
end

def walk_to(room_num)
	start_script "go2", ["#{room_num}"]
	while running?("go2")
        pause 0.5
	end
end

def braid_to_fail(item, container)
	forage(item)
	while true
		fput "braid my #{item}"
		waitrt?
		if reget(5,"You need to have more")
			braid_to_fail item, container
			return
		else
			message = reget(10,"Roundtime")
			rt = message.last.scan(/\d+/).first.to_i
			break if rt >= 7
		end
	end
	fput "pull my #{item}"
	waitrt?
	fput "put my #{checkright} in #{container}"
end

def forage(item)
	if checkright.nil?
		while checkright.nil?
			fput "forage #{item}"
			waitrt?
		end
	else
	while checkleft.nil?
			fput "forage #{item}"
			waitrt?
		end
	end
end

def train_outdoorsmanship
    walk_to(UserVars.safe_room)
    item = DRSkill.getrank("Outdoorsmanship").to_i < 60 ? "grass" : "vine" #When can you collect vines?
    while !reget 5, "You manage to collect"
        fput "collect #{item}"
    end
    fput "kick pile"
end

def train_first_aid
    walk_to(UserVars.safe_room)
    fput "get compendium"
    fput "turn my compendium"
    fput "study my compendium"
    empty_hands
end

def train_mechanical_lore
    walk_to(UserVars.safe_room)
    fput "remove #{UserVars.hand_armor}"
    empty_hands
    braid_to_fail(DRSkill.getrank("Outdoorsmanship").to_i < 40 ? "grass" : "vine", "bin")
    fput "get #{UserVars.hand_armor}"
    fput "wear #{UserVars.hand_armor}"
    empty_hands
end

def climb(room_number, climb_target)
    # TODO: Handle being engaged (louts love to do this)
    walk_to room_number
    fput "climb #{climb_target}"
    waitrt?
end

def train_athletics
    fput "play #{UserVars.song}"
    empty_hands
    climb 835, "embrasure"
    climb 1035, "wall"
    climb 1039, "wall"
    climb 1040, "wall"
    climb 691, "wall"
    climb 943, "break"
    climb 943, "embrasure"
    climb 939, "embrasure"
    climb 1388, "wall"
    climb 938, "embrasure"
    climb 940, "break"
    climb 940, "embrasure"
    climb 1611, "wall"
    climb 1609, "wall"
    climb 1387, "wall"
    fput "stop play"
end

def train_scouting
    walk_to 991
    fput "scout trail", "You notice a trailmarker"
    fput "go trail", "You set off into the wild", "That would be difficult"
    waitfor "As your journey ends"
    walk_to 1378
    fput "scout trail", "You notice a trailmarker"
    fput "go trail", "You set off into the wild", "That would be difficult"
    waitfor "As your journey ends"
end

def train_attunement
    ["815","814","802","800","799","801","817","818"].each {|roomid|
        walk_to roomid
        fput "perc"
        waitrt?
    }
end

def train_stealth
    walk_to 851
    fput "hide"
    waitrt?
    fput "unhide"
    waitrt?
    walk_to 850
    fput "hide"
    waitrt?
    fput "unhide"
    waitrt?
end

def train_thievery
    armor true
    options = [
        {"room"=> 19078, "item"=>"pick", "min"=>30, "trivial"=> 66, "hide" => true},
        {"room"=> 19076, "item"=>"water", "min"=>0, "trivial"=> 41, "hide" => true},
        {"room"=> 19076, "item"=>"alcohol", "min"=>46, "trivial"=> 78, "hide" => true},
        {"room"=> 8265, "item"=>"bundling rope", "min"=>0, "trivial"=> 41, "hide" => true},
        {"room"=> 8265, "item"=>"coin purse", "min"=>41, "trivial"=> 58, "hide" => true},
        {"room"=> 19073, "item"=>"grey-brown feather", "min"=>32, "trivial"=> 58, "hide" => true},
        {"room"=> 7904, "item"=>"rugged glove", "min"=>41, "trivial"=> 75, "hide" => true}, #unknown trivial
    ]

    thievery_skill = DRSkill.getrank("Thievery").to_i

    targets = options.select{|data| data["min"] <= thievery_skill && data["trivial"] > thievery_skill}

    targets.each{ |target| steal(target) }

    armor false
end

def steal target
    walk_to target["room"]
    if target["hide"]
        while !checkhidden
            fput "hide"
            waitrt?
        end
    end
    fput "steal #{target["item"]}"
    waitrt?
    move "out"
    empty_hands "drop"
end

def armor remove
    if remove
        UserVars.armor.each {|piece|
            fput "remove #{piece}"
            fput "stow #{piece}"
            pause 0.25
        }
    else
        UserVars.armor.each {|piece|
            fput "get #{piece}"
            fput "wear #{piece}"
            pause 0.25
        }
    end
end

def train_appraisal
    while checkright.nil?
        fput "remove zill"
    end
    fput "ass zill"
    waitrt?
    while checkright
        fput "wear zill"
    end
end

# Call this last to avoid the need for forward declarations
main()
