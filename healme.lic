=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Basic self healing script, seems mostly functional but still under work.
=end

# ***BEGIN USER CONFIG***

UserVars.healme_debug ||= false # turn on echos in the script

# ***END USER CONFIG***

custom_require.call(%w(common events))
pause 0.05

class HealMe
  include DRC

  def initialize
    @wound_map = {
      'insignificant' => 1,
      'negligible' => 2,
      'minor' => 3,
      'more than minor' => 4,
      'harmful' => 5,
      'very harmful' => 6,
      'damaging' => 7,
      'very damaging' => 8,
      'severe' => 9,
      'very severe' => 10,
      'devastating' => 11,
      'very devastating' => 12,
      'useless' => 13
    }

    @deadly_wounds = %w(SKIN HEAD NECK CHEST ABDOMEN BACK)
    @settings = get_settings
  end

  def check_wounds
    bput('perc heal self', 'Roundtime')
    data = reget 100
    data = data.reverse.take_while { |item| item != "Your injuries include...\r" }.reverse
    wounds = {}
    part = nil
    data.each do |line|
      if line =~ /Wounds to the (.+):/
        part = Regexp.last_match(1)
        wounds[part] = []
      end
      wounds[part] += [{ 'part' => part, 'location' => Regexp.last_match(2), 'type' => Regexp.last_match(1), 'level' => @wound_map[Regexp.last_match(3)] }] if line =~ /(\w+) (\w+):.*\-\- (.*)\r/
    end
    waitrt?
    wounds
  end

  def severity(wounds)
    wounds.map { |wound| wound['level'] }.inject(&:+)
  end

  def spam_heal(base, camb)
    Flags.add('hm-heal-done', 'Your body is completely healed')
    until Flags['hm-heal-done']
      pause 1 while checkmana < 25
      Flags.reset('hm-spellcast')
      bput("prepare heal #{base}", '^With tense movements ')
      unless camb.empty?
        camb.each do |mana|
          bput("charge my #{@settings.cambrinth} #{mana}", '^You harness a', 'You are in no condition to do that')
          waitrt?
        end
        bput("invoke my #{@settings.cambrinth}", 'You reach for its center', 'You are in no condition to do that', 'intact')
      end
      pause 0.5 until Flags['hm-spellcast']
      bput('cast', '^You gesture')
      pause 0.5
    end
  end

  def cast_spell(spell, preps, part, internal = false)
    pause 1 while checkmana < 25
    Flags.reset('hm-spellcast')
    bput("prepare #{spell} #{preps.first}", '^With tense movements ')
    unless preps[1..-1].empty?
      preps[1..-1].each do |mana|
        bput("charge my #{@settings.cambrinth} #{mana}", '^You harness a', 'You are in no condition to do that')
        waitrt?
      end
      bput("invoke my #{@settings.cambrinth}", 'You reach for its center', 'You are in no condition to do that', 'intact')
    end
    pause 0.5 until Flags['hm-spellcast']
    Flags.reset('hm-partial-heal')
    if internal
      bput("cast #{part} internal", '^You gesture')
    else
      bput("cast #{part}", '^You gesture')
    end
    pause 0.5
    echo "partial: #{Flags['hm-partial-heal']}" if UserVars.healme_debug
    Flags['hm-partial-heal']
  end

  def heal_wound(part, internal)
    pause 0.5 while cast_spell('HW', @settings.empath_healing['HW'], part, internal)
  end

  def heal_scar(part)
    pause 0.5 while cast_spell('HS', @settings.empath_healing['HS'], part)
  end

  def heal_wounds(wounds, skip_parts)
    echo "healing: #{wounds}" if UserVars.healme_debug

    if wounds.count { |wound| wound['type'] == 'Fresh' } > 0
      heal_wound(wounds.first['part'], skip_parts.include?(wounds.first['part']))
    end
    heal_scar(wounds.first['part'])
  end

  def heal_self(skip_parts)
    Flags.delete('hm-spellcast')
    Flags.add('hm-spellcast', '^You feel fully prepared to cast your spell\.')

    Flags.delete('hm-partial-heal')
    Flags.add('hm-partial-heal',
              'appear very slightly improved\.',
              'appear slightly improved\.',
              'appear better\.',
              'appear greatly improved\.',
              'appear almost completely healed\.',
              'but it is ineffective\.',
              'appear somewhat better\.',
              'appear considerably better\.'
             )

    fput("remove #{@settings.cambrinth}") if @settings.held_cambrinth
    fput("get my #{@settings.cambrinth}") if @settings.stored_cambrinth

    if @settings.empath_healing['HEAL'] && skip_parts.empty?
      spam_heal(@settings.empath_healing['HEAL'].first, @settings.empath_healing['HEAL'][1..-1])
    else
      wounds = check_wounds

      skip_parts.map!(&:upcase)

      echo("wounds: #{wounds}") if UserVars.healme_debug
      echo("dw: #{@deadly_wounds}") if UserVars.healme_debug
      danger_wounds = wounds.select { |part, _| @deadly_wounds.include?(part) }.sort_by { |_, val| severity(val) }.reverse

      echo("bad wounds: #{danger_wounds}") if UserVars.healme_debug

      danger_wounds.each do |part, _|
        heal_wounds(wounds[part], skip_parts)
        wounds.delete(part)
      end

      wounds.sort_by { |_, val| severity(val) }.reverse_each { |_, wound| heal_wounds(wound, skip_parts) }
    end
    fput("wear #{@settings.cambrinth}") if @settings.held_cambrinth
    fput("stow #{@settings.cambrinth}") if @settings.stored_cambrinth
  end
end
HealMe.new.heal_self(variable.drop(1))
